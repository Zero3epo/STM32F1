
pon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a30  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08004b40  08004b40  00014b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c24  08004c24  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08004c24  08004c24  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c24  08004c24  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c24  08004c24  00014c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c28  08004c28  00014c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08004c2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019c8  20000020  08004c4c  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200019e8  08004c4c  000219e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010a6d  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028de  00000000  00000000  00030ab6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef0  00000000  00000000  00033398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e00  00000000  00000000  00034288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003265  00000000  00000000  00035088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b3d  00000000  00000000  000382ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c424  00000000  00000000  00048e2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d524e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003db0  00000000  00000000  000d52a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000020 	.word	0x20000020
 800012c:	00000000 	.word	0x00000000
 8000130:	08004b28 	.word	0x08004b28

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000024 	.word	0x20000024
 800014c:	08004b28 	.word	0x08004b28

08000150 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
 8000156:	4603      	mov	r3, r0
 8000158:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 800015a:	4a38      	ldr	r2, [pc, #224]	; (800023c <HD44780_Init+0xec>)
 800015c:	79fb      	ldrb	r3, [r7, #7]
 800015e:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000160:	4b37      	ldr	r3, [pc, #220]	; (8000240 <HD44780_Init+0xf0>)
 8000162:	2208      	movs	r2, #8
 8000164:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000166:	4b37      	ldr	r3, [pc, #220]	; (8000244 <HD44780_Init+0xf4>)
 8000168:	2200      	movs	r2, #0
 800016a:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 800016c:	4b33      	ldr	r3, [pc, #204]	; (800023c <HD44780_Init+0xec>)
 800016e:	781b      	ldrb	r3, [r3, #0]
 8000170:	2b01      	cmp	r3, #1
 8000172:	d907      	bls.n	8000184 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000174:	4b33      	ldr	r3, [pc, #204]	; (8000244 <HD44780_Init+0xf4>)
 8000176:	781b      	ldrb	r3, [r3, #0]
 8000178:	f043 0308 	orr.w	r3, r3, #8
 800017c:	b2da      	uxtb	r2, r3
 800017e:	4b31      	ldr	r3, [pc, #196]	; (8000244 <HD44780_Init+0xf4>)
 8000180:	701a      	strb	r2, [r3, #0]
 8000182:	e006      	b.n	8000192 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000184:	4b2f      	ldr	r3, [pc, #188]	; (8000244 <HD44780_Init+0xf4>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	f043 0304 	orr.w	r3, r3, #4
 800018c:	b2da      	uxtb	r2, r3
 800018e:	4b2d      	ldr	r3, [pc, #180]	; (8000244 <HD44780_Init+0xf4>)
 8000190:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000192:	f000 fa13 	bl	80005bc <DelayInit>
  HAL_Delay(50);
 8000196:	2032      	movs	r0, #50	; 0x32
 8000198:	f000 fcdc 	bl	8000b54 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 800019c:	4b28      	ldr	r3, [pc, #160]	; (8000240 <HD44780_Init+0xf0>)
 800019e:	781b      	ldrb	r3, [r3, #0]
 80001a0:	4618      	mov	r0, r3
 80001a2:	f000 f9d1 	bl	8000548 <ExpanderWrite>
  HAL_Delay(1000);
 80001a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001aa:	f000 fcd3 	bl	8000b54 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80001ae:	2030      	movs	r0, #48	; 0x30
 80001b0:	f000 f9b9 	bl	8000526 <Write4Bits>
  DelayUS(4500);
 80001b4:	f241 1094 	movw	r0, #4500	; 0x1194
 80001b8:	f000 fa28 	bl	800060c <DelayUS>

  Write4Bits(0x03 << 4);
 80001bc:	2030      	movs	r0, #48	; 0x30
 80001be:	f000 f9b2 	bl	8000526 <Write4Bits>
  DelayUS(4500);
 80001c2:	f241 1094 	movw	r0, #4500	; 0x1194
 80001c6:	f000 fa21 	bl	800060c <DelayUS>

  Write4Bits(0x03 << 4);
 80001ca:	2030      	movs	r0, #48	; 0x30
 80001cc:	f000 f9ab 	bl	8000526 <Write4Bits>
  DelayUS(4500);
 80001d0:	f241 1094 	movw	r0, #4500	; 0x1194
 80001d4:	f000 fa1a 	bl	800060c <DelayUS>

  Write4Bits(0x02 << 4);
 80001d8:	2020      	movs	r0, #32
 80001da:	f000 f9a4 	bl	8000526 <Write4Bits>
  DelayUS(100);
 80001de:	2064      	movs	r0, #100	; 0x64
 80001e0:	f000 fa14 	bl	800060c <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 80001e4:	4b17      	ldr	r3, [pc, #92]	; (8000244 <HD44780_Init+0xf4>)
 80001e6:	781b      	ldrb	r3, [r3, #0]
 80001e8:	f043 0320 	orr.w	r3, r3, #32
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	4618      	mov	r0, r3
 80001f0:	f000 f95c 	bl	80004ac <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80001f4:	4b14      	ldr	r3, [pc, #80]	; (8000248 <HD44780_Init+0xf8>)
 80001f6:	2204      	movs	r2, #4
 80001f8:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80001fa:	f000 f88b 	bl	8000314 <HD44780_Display>
  HD44780_Clear();
 80001fe:	f000 f82b 	bl	8000258 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000202:	4b12      	ldr	r3, [pc, #72]	; (800024c <HD44780_Init+0xfc>)
 8000204:	2202      	movs	r2, #2
 8000206:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000208:	4b10      	ldr	r3, [pc, #64]	; (800024c <HD44780_Init+0xfc>)
 800020a:	781b      	ldrb	r3, [r3, #0]
 800020c:	f043 0304 	orr.w	r3, r3, #4
 8000210:	b2db      	uxtb	r3, r3
 8000212:	4618      	mov	r0, r3
 8000214:	f000 f94a 	bl	80004ac <SendCommand>
  DelayUS(4500);
 8000218:	f241 1094 	movw	r0, #4500	; 0x1194
 800021c:	f000 f9f6 	bl	800060c <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000220:	490b      	ldr	r1, [pc, #44]	; (8000250 <HD44780_Init+0x100>)
 8000222:	2000      	movs	r0, #0
 8000224:	f000 f8eb 	bl	80003fe <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000228:	490a      	ldr	r1, [pc, #40]	; (8000254 <HD44780_Init+0x104>)
 800022a:	2001      	movs	r0, #1
 800022c:	f000 f8e7 	bl	80003fe <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000230:	f000 f81d 	bl	800026e <HD44780_Home>
}
 8000234:	bf00      	nop
 8000236:	3708      	adds	r7, #8
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}
 800023c:	2000003f 	.word	0x2000003f
 8000240:	20000040 	.word	0x20000040
 8000244:	2000003c 	.word	0x2000003c
 8000248:	2000003d 	.word	0x2000003d
 800024c:	2000003e 	.word	0x2000003e
 8000250:	20000000 	.word	0x20000000
 8000254:	20000008 	.word	0x20000008

08000258 <HD44780_Clear>:

void HD44780_Clear()
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 800025c:	2001      	movs	r0, #1
 800025e:	f000 f925 	bl	80004ac <SendCommand>
  DelayUS(2000);
 8000262:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000266:	f000 f9d1 	bl	800060c <DelayUS>
}
 800026a:	bf00      	nop
 800026c:	bd80      	pop	{r7, pc}

0800026e <HD44780_Home>:

void HD44780_Home()
{
 800026e:	b580      	push	{r7, lr}
 8000270:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000272:	2002      	movs	r0, #2
 8000274:	f000 f91a 	bl	80004ac <SendCommand>
  DelayUS(2000);
 8000278:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800027c:	f000 f9c6 	bl	800060c <DelayUS>
}
 8000280:	bf00      	nop
 8000282:	bd80      	pop	{r7, pc}

08000284 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000284:	b590      	push	{r4, r7, lr}
 8000286:	b087      	sub	sp, #28
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	460a      	mov	r2, r1
 800028e:	71fb      	strb	r3, [r7, #7]
 8000290:	4613      	mov	r3, r2
 8000292:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000294:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <HD44780_SetCursor+0x5c>)
 8000296:	f107 0408 	add.w	r4, r7, #8
 800029a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800029c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80002a0:	4b10      	ldr	r3, [pc, #64]	; (80002e4 <HD44780_SetCursor+0x60>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	79ba      	ldrb	r2, [r7, #6]
 80002a6:	429a      	cmp	r2, r3
 80002a8:	d303      	bcc.n	80002b2 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80002aa:	4b0e      	ldr	r3, [pc, #56]	; (80002e4 <HD44780_SetCursor+0x60>)
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	3b01      	subs	r3, #1
 80002b0:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80002b2:	79bb      	ldrb	r3, [r7, #6]
 80002b4:	009b      	lsls	r3, r3, #2
 80002b6:	3318      	adds	r3, #24
 80002b8:	443b      	add	r3, r7
 80002ba:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80002be:	b2da      	uxtb	r2, r3
 80002c0:	79fb      	ldrb	r3, [r7, #7]
 80002c2:	4413      	add	r3, r2
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	b25b      	sxtb	r3, r3
 80002c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80002cc:	b25b      	sxtb	r3, r3
 80002ce:	b2db      	uxtb	r3, r3
 80002d0:	4618      	mov	r0, r3
 80002d2:	f000 f8eb 	bl	80004ac <SendCommand>
}
 80002d6:	bf00      	nop
 80002d8:	371c      	adds	r7, #28
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd90      	pop	{r4, r7, pc}
 80002de:	bf00      	nop
 80002e0:	08004b40 	.word	0x08004b40
 80002e4:	2000003f 	.word	0x2000003f

080002e8 <HD44780_NoDisplay>:

void HD44780_NoDisplay()
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_DISPLAYON;
 80002ec:	4b08      	ldr	r3, [pc, #32]	; (8000310 <HD44780_NoDisplay+0x28>)
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	f023 0304 	bic.w	r3, r3, #4
 80002f4:	b2da      	uxtb	r2, r3
 80002f6:	4b06      	ldr	r3, [pc, #24]	; (8000310 <HD44780_NoDisplay+0x28>)
 80002f8:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80002fa:	4b05      	ldr	r3, [pc, #20]	; (8000310 <HD44780_NoDisplay+0x28>)
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	f043 0308 	orr.w	r3, r3, #8
 8000302:	b2db      	uxtb	r3, r3
 8000304:	4618      	mov	r0, r3
 8000306:	f000 f8d1 	bl	80004ac <SendCommand>
}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	2000003d 	.word	0x2000003d

08000314 <HD44780_Display>:

void HD44780_Display()
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000318:	4b08      	ldr	r3, [pc, #32]	; (800033c <HD44780_Display+0x28>)
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	f043 0304 	orr.w	r3, r3, #4
 8000320:	b2da      	uxtb	r2, r3
 8000322:	4b06      	ldr	r3, [pc, #24]	; (800033c <HD44780_Display+0x28>)
 8000324:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000326:	4b05      	ldr	r3, [pc, #20]	; (800033c <HD44780_Display+0x28>)
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	f043 0308 	orr.w	r3, r3, #8
 800032e:	b2db      	uxtb	r3, r3
 8000330:	4618      	mov	r0, r3
 8000332:	f000 f8bb 	bl	80004ac <SendCommand>
}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	2000003d 	.word	0x2000003d

08000340 <HD44780_NoCursor>:

void HD44780_NoCursor()
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_CURSORON;
 8000344:	4b08      	ldr	r3, [pc, #32]	; (8000368 <HD44780_NoCursor+0x28>)
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	f023 0302 	bic.w	r3, r3, #2
 800034c:	b2da      	uxtb	r2, r3
 800034e:	4b06      	ldr	r3, [pc, #24]	; (8000368 <HD44780_NoCursor+0x28>)
 8000350:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000352:	4b05      	ldr	r3, [pc, #20]	; (8000368 <HD44780_NoCursor+0x28>)
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	f043 0308 	orr.w	r3, r3, #8
 800035a:	b2db      	uxtb	r3, r3
 800035c:	4618      	mov	r0, r3
 800035e:	f000 f8a5 	bl	80004ac <SendCommand>
}
 8000362:	bf00      	nop
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	2000003d 	.word	0x2000003d

0800036c <HD44780_Cursor>:

void HD44780_Cursor()
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
  dpControl |= LCD_CURSORON;
 8000370:	4b08      	ldr	r3, [pc, #32]	; (8000394 <HD44780_Cursor+0x28>)
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	f043 0302 	orr.w	r3, r3, #2
 8000378:	b2da      	uxtb	r2, r3
 800037a:	4b06      	ldr	r3, [pc, #24]	; (8000394 <HD44780_Cursor+0x28>)
 800037c:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800037e:	4b05      	ldr	r3, [pc, #20]	; (8000394 <HD44780_Cursor+0x28>)
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	f043 0308 	orr.w	r3, r3, #8
 8000386:	b2db      	uxtb	r3, r3
 8000388:	4618      	mov	r0, r3
 800038a:	f000 f88f 	bl	80004ac <SendCommand>
}
 800038e:	bf00      	nop
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	2000003d 	.word	0x2000003d

08000398 <HD44780_NoBlink>:

void HD44780_NoBlink()
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_BLINKON;
 800039c:	4b08      	ldr	r3, [pc, #32]	; (80003c0 <HD44780_NoBlink+0x28>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	f023 0301 	bic.w	r3, r3, #1
 80003a4:	b2da      	uxtb	r2, r3
 80003a6:	4b06      	ldr	r3, [pc, #24]	; (80003c0 <HD44780_NoBlink+0x28>)
 80003a8:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80003aa:	4b05      	ldr	r3, [pc, #20]	; (80003c0 <HD44780_NoBlink+0x28>)
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	f043 0308 	orr.w	r3, r3, #8
 80003b2:	b2db      	uxtb	r3, r3
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 f879 	bl	80004ac <SendCommand>
}
 80003ba:	bf00      	nop
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	2000003d 	.word	0x2000003d

080003c4 <HD44780_Blink>:

void HD44780_Blink()
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
  dpControl |= LCD_BLINKON;
 80003c8:	4b08      	ldr	r3, [pc, #32]	; (80003ec <HD44780_Blink+0x28>)
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	f043 0301 	orr.w	r3, r3, #1
 80003d0:	b2da      	uxtb	r2, r3
 80003d2:	4b06      	ldr	r3, [pc, #24]	; (80003ec <HD44780_Blink+0x28>)
 80003d4:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80003d6:	4b05      	ldr	r3, [pc, #20]	; (80003ec <HD44780_Blink+0x28>)
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	f043 0308 	orr.w	r3, r3, #8
 80003de:	b2db      	uxtb	r3, r3
 80003e0:	4618      	mov	r0, r3
 80003e2:	f000 f863 	bl	80004ac <SendCommand>
}
 80003e6:	bf00      	nop
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	2000003d 	.word	0x2000003d

080003f0 <HD44780_ScrollDisplayLeft>:

void HD44780_ScrollDisplayLeft(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
  SendCommand(LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVELEFT);
 80003f4:	2018      	movs	r0, #24
 80003f6:	f000 f859 	bl	80004ac <SendCommand>
}
 80003fa:	bf00      	nop
 80003fc:	bd80      	pop	{r7, pc}

080003fe <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 80003fe:	b580      	push	{r7, lr}
 8000400:	b084      	sub	sp, #16
 8000402:	af00      	add	r7, sp, #0
 8000404:	4603      	mov	r3, r0
 8000406:	6039      	str	r1, [r7, #0]
 8000408:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 800040a:	79fb      	ldrb	r3, [r7, #7]
 800040c:	f003 0307 	and.w	r3, r3, #7
 8000410:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000412:	79fb      	ldrb	r3, [r7, #7]
 8000414:	00db      	lsls	r3, r3, #3
 8000416:	b25b      	sxtb	r3, r3
 8000418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800041c:	b25b      	sxtb	r3, r3
 800041e:	b2db      	uxtb	r3, r3
 8000420:	4618      	mov	r0, r3
 8000422:	f000 f843 	bl	80004ac <SendCommand>
  for (int i=0; i<8; i++)
 8000426:	2300      	movs	r3, #0
 8000428:	60fb      	str	r3, [r7, #12]
 800042a:	e009      	b.n	8000440 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	683a      	ldr	r2, [r7, #0]
 8000430:	4413      	add	r3, r2
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	4618      	mov	r0, r3
 8000436:	f000 f847 	bl	80004c8 <SendChar>
  for (int i=0; i<8; i++)
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	3301      	adds	r3, #1
 800043e:	60fb      	str	r3, [r7, #12]
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	2b07      	cmp	r3, #7
 8000444:	ddf2      	ble.n	800042c <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000446:	bf00      	nop
 8000448:	bf00      	nop
 800044a:	3710      	adds	r7, #16
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}

08000450 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000458:	e006      	b.n	8000468 <HD44780_PrintStr+0x18>
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	1c5a      	adds	r2, r3, #1
 800045e:	607a      	str	r2, [r7, #4]
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	4618      	mov	r0, r3
 8000464:	f000 f830 	bl	80004c8 <SendChar>
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	2b00      	cmp	r3, #0
 800046e:	d1f4      	bne.n	800045a <HD44780_PrintStr+0xa>
}
 8000470:	bf00      	nop
 8000472:	bf00      	nop
 8000474:	3708      	adds	r7, #8
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
	...

0800047c <HD44780_NoBacklight>:
  if(new_val) HD44780_Backlight();
  else HD44780_NoBacklight();
}

void HD44780_NoBacklight(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  dpBacklight=LCD_NOBACKLIGHT;
 8000480:	4b03      	ldr	r3, [pc, #12]	; (8000490 <HD44780_NoBacklight+0x14>)
 8000482:	2200      	movs	r2, #0
 8000484:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 8000486:	2000      	movs	r0, #0
 8000488:	f000 f85e 	bl	8000548 <ExpanderWrite>
}
 800048c:	bf00      	nop
 800048e:	bd80      	pop	{r7, pc}
 8000490:	20000040 	.word	0x20000040

08000494 <HD44780_Backlight>:

void HD44780_Backlight(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  dpBacklight=LCD_BACKLIGHT;
 8000498:	4b03      	ldr	r3, [pc, #12]	; (80004a8 <HD44780_Backlight+0x14>)
 800049a:	2208      	movs	r2, #8
 800049c:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 800049e:	2000      	movs	r0, #0
 80004a0:	f000 f852 	bl	8000548 <ExpanderWrite>
}
 80004a4:	bf00      	nop
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	20000040 	.word	0x20000040

080004ac <SendCommand>:

static void SendCommand(uint8_t cmd)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	4603      	mov	r3, r0
 80004b4:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80004b6:	79fb      	ldrb	r3, [r7, #7]
 80004b8:	2100      	movs	r1, #0
 80004ba:	4618      	mov	r0, r3
 80004bc:	f000 f812 	bl	80004e4 <Send>
}
 80004c0:	bf00      	nop
 80004c2:	3708      	adds	r7, #8
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}

080004c8 <SendChar>:

static void SendChar(uint8_t ch)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	2101      	movs	r1, #1
 80004d6:	4618      	mov	r0, r3
 80004d8:	f000 f804 	bl	80004e4 <Send>
}
 80004dc:	bf00      	nop
 80004de:	3708      	adds	r7, #8
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}

080004e4 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4603      	mov	r3, r0
 80004ec:	460a      	mov	r2, r1
 80004ee:	71fb      	strb	r3, [r7, #7]
 80004f0:	4613      	mov	r3, r2
 80004f2:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80004f4:	79fb      	ldrb	r3, [r7, #7]
 80004f6:	f023 030f 	bic.w	r3, r3, #15
 80004fa:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80004fc:	79fb      	ldrb	r3, [r7, #7]
 80004fe:	011b      	lsls	r3, r3, #4
 8000500:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000502:	7bfa      	ldrb	r2, [r7, #15]
 8000504:	79bb      	ldrb	r3, [r7, #6]
 8000506:	4313      	orrs	r3, r2
 8000508:	b2db      	uxtb	r3, r3
 800050a:	4618      	mov	r0, r3
 800050c:	f000 f80b 	bl	8000526 <Write4Bits>
  Write4Bits((lownib)|mode);
 8000510:	7bba      	ldrb	r2, [r7, #14]
 8000512:	79bb      	ldrb	r3, [r7, #6]
 8000514:	4313      	orrs	r3, r2
 8000516:	b2db      	uxtb	r3, r3
 8000518:	4618      	mov	r0, r3
 800051a:	f000 f804 	bl	8000526 <Write4Bits>
}
 800051e:	bf00      	nop
 8000520:	3710      	adds	r7, #16
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}

08000526 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000526:	b580      	push	{r7, lr}
 8000528:	b082      	sub	sp, #8
 800052a:	af00      	add	r7, sp, #0
 800052c:	4603      	mov	r3, r0
 800052e:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000530:	79fb      	ldrb	r3, [r7, #7]
 8000532:	4618      	mov	r0, r3
 8000534:	f000 f808 	bl	8000548 <ExpanderWrite>
  PulseEnable(value);
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	4618      	mov	r0, r3
 800053c:	f000 f820 	bl	8000580 <PulseEnable>
}
 8000540:	bf00      	nop
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}

08000548 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b086      	sub	sp, #24
 800054c:	af02      	add	r7, sp, #8
 800054e:	4603      	mov	r3, r0
 8000550:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000552:	4b09      	ldr	r3, [pc, #36]	; (8000578 <ExpanderWrite+0x30>)
 8000554:	781a      	ldrb	r2, [r3, #0]
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	4313      	orrs	r3, r2
 800055a:	b2db      	uxtb	r3, r3
 800055c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800055e:	f107 020f 	add.w	r2, r7, #15
 8000562:	230a      	movs	r3, #10
 8000564:	9300      	str	r3, [sp, #0]
 8000566:	2301      	movs	r3, #1
 8000568:	2170      	movs	r1, #112	; 0x70
 800056a:	4804      	ldr	r0, [pc, #16]	; (800057c <ExpanderWrite+0x34>)
 800056c:	f000 fec2 	bl	80012f4 <HAL_I2C_Master_Transmit>
}
 8000570:	bf00      	nop
 8000572:	3710      	adds	r7, #16
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	20000040 	.word	0x20000040
 800057c:	20000044 	.word	0x20000044

08000580 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	f043 0304 	orr.w	r3, r3, #4
 8000590:	b2db      	uxtb	r3, r3
 8000592:	4618      	mov	r0, r3
 8000594:	f7ff ffd8 	bl	8000548 <ExpanderWrite>
  DelayUS(20);
 8000598:	2014      	movs	r0, #20
 800059a:	f000 f837 	bl	800060c <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	f023 0304 	bic.w	r3, r3, #4
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	4618      	mov	r0, r3
 80005a8:	f7ff ffce 	bl	8000548 <ExpanderWrite>
  DelayUS(20);
 80005ac:	2014      	movs	r0, #20
 80005ae:	f000 f82d 	bl	800060c <DelayUS>
}
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
	...

080005bc <DelayInit>:

static void DelayInit(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80005c0:	4b10      	ldr	r3, [pc, #64]	; (8000604 <DelayInit+0x48>)
 80005c2:	68db      	ldr	r3, [r3, #12]
 80005c4:	4a0f      	ldr	r2, [pc, #60]	; (8000604 <DelayInit+0x48>)
 80005c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80005ca:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80005cc:	4b0d      	ldr	r3, [pc, #52]	; (8000604 <DelayInit+0x48>)
 80005ce:	68db      	ldr	r3, [r3, #12]
 80005d0:	4a0c      	ldr	r2, [pc, #48]	; (8000604 <DelayInit+0x48>)
 80005d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005d6:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80005d8:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <DelayInit+0x4c>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a0a      	ldr	r2, [pc, #40]	; (8000608 <DelayInit+0x4c>)
 80005de:	f023 0301 	bic.w	r3, r3, #1
 80005e2:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80005e4:	4b08      	ldr	r3, [pc, #32]	; (8000608 <DelayInit+0x4c>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a07      	ldr	r2, [pc, #28]	; (8000608 <DelayInit+0x4c>)
 80005ea:	f043 0301 	orr.w	r3, r3, #1
 80005ee:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80005f0:	4b05      	ldr	r3, [pc, #20]	; (8000608 <DelayInit+0x4c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80005f6:	bf00      	nop
  __ASM volatile ("NOP");
 80005f8:	bf00      	nop
  __ASM volatile ("NOP");
 80005fa:	bf00      	nop
}
 80005fc:	bf00      	nop
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr
 8000604:	e000edf0 	.word	0xe000edf0
 8000608:	e0001000 	.word	0xe0001000

0800060c <DelayUS>:

static void DelayUS(uint32_t us) {
 800060c:	b480      	push	{r7}
 800060e:	b087      	sub	sp, #28
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000614:	4b0d      	ldr	r3, [pc, #52]	; (800064c <DelayUS+0x40>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a0d      	ldr	r2, [pc, #52]	; (8000650 <DelayUS+0x44>)
 800061a:	fba2 2303 	umull	r2, r3, r2, r3
 800061e:	0c9a      	lsrs	r2, r3, #18
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	fb02 f303 	mul.w	r3, r2, r3
 8000626:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000628:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <DelayUS+0x48>)
 800062a:	685b      	ldr	r3, [r3, #4]
 800062c:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800062e:	4b09      	ldr	r3, [pc, #36]	; (8000654 <DelayUS+0x48>)
 8000630:	685a      	ldr	r2, [r3, #4]
 8000632:	693b      	ldr	r3, [r7, #16]
 8000634:	1ad3      	subs	r3, r2, r3
 8000636:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	697a      	ldr	r2, [r7, #20]
 800063c:	429a      	cmp	r2, r3
 800063e:	d8f6      	bhi.n	800062e <DelayUS+0x22>
}
 8000640:	bf00      	nop
 8000642:	bf00      	nop
 8000644:	371c      	adds	r7, #28
 8000646:	46bd      	mov	sp, r7
 8000648:	bc80      	pop	{r7}
 800064a:	4770      	bx	lr
 800064c:	20000010 	.word	0x20000010
 8000650:	431bde83 	.word	0x431bde83
 8000654:	e0001000 	.word	0xe0001000

08000658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065e:	f000 fa17 	bl	8000a90 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000662:	f000 f8a3 	bl	80007ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000666:	f000 f92d 	bl	80008c4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800066a:	f000 f8db 	bl	8000824 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
   HD44780_Init(2);
 800066e:	2002      	movs	r0, #2
 8000670:	f7ff fd6e 	bl	8000150 <HD44780_Init>
   HD44780_Clear();
 8000674:	f7ff fdf0 	bl	8000258 <HD44780_Clear>
   HD44780_SetCursor(0,0);
 8000678:	2100      	movs	r1, #0
 800067a:	2000      	movs	r0, #0
 800067c:	f7ff fe02 	bl	8000284 <HD44780_SetCursor>
   HD44780_PrintStr("привет");
 8000680:	4844      	ldr	r0, [pc, #272]	; (8000794 <main+0x13c>)
 8000682:	f7ff fee5 	bl	8000450 <HD44780_PrintStr>
   HD44780_SetCursor(10,1);
 8000686:	2101      	movs	r1, #1
 8000688:	200a      	movs	r0, #10
 800068a:	f7ff fdfb 	bl	8000284 <HD44780_SetCursor>
   HD44780_PrintStr("мир");
 800068e:	4842      	ldr	r0, [pc, #264]	; (8000798 <main+0x140>)
 8000690:	f7ff fede 	bl	8000450 <HD44780_PrintStr>
   HAL_Delay(2000);
 8000694:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000698:	f000 fa5c 	bl	8000b54 <HAL_Delay>

   HD44780_Clear();
 800069c:	f7ff fddc 	bl	8000258 <HD44780_Clear>
   HD44780_SetCursor(0,0);
 80006a0:	2100      	movs	r1, #0
 80006a2:	2000      	movs	r0, #0
 80006a4:	f7ff fdee 	bl	8000284 <HD44780_SetCursor>
   HD44780_PrintStr("привет");
 80006a8:	483a      	ldr	r0, [pc, #232]	; (8000794 <main+0x13c>)
 80006aa:	f7ff fed1 	bl	8000450 <HD44780_PrintStr>
   HAL_Delay(2000);
 80006ae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006b2:	f000 fa4f 	bl	8000b54 <HAL_Delay>
   HD44780_NoBacklight();
 80006b6:	f7ff fee1 	bl	800047c <HD44780_NoBacklight>
   HAL_Delay(2000);
 80006ba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006be:	f000 fa49 	bl	8000b54 <HAL_Delay>
   HD44780_Backlight();
 80006c2:	f7ff fee7 	bl	8000494 <HD44780_Backlight>

   HAL_Delay(2000);
 80006c6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006ca:	f000 fa43 	bl	8000b54 <HAL_Delay>
   HD44780_Cursor();
 80006ce:	f7ff fe4d 	bl	800036c <HD44780_Cursor>
   HAL_Delay(2000);
 80006d2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006d6:	f000 fa3d 	bl	8000b54 <HAL_Delay>
   HD44780_Blink();
 80006da:	f7ff fe73 	bl	80003c4 <HD44780_Blink>
   HAL_Delay(5000);
 80006de:	f241 3088 	movw	r0, #5000	; 0x1388
 80006e2:	f000 fa37 	bl	8000b54 <HAL_Delay>
   HD44780_NoBlink();
 80006e6:	f7ff fe57 	bl	8000398 <HD44780_NoBlink>
   HAL_Delay(2000);
 80006ea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006ee:	f000 fa31 	bl	8000b54 <HAL_Delay>
   HD44780_NoCursor();
 80006f2:	f7ff fe25 	bl	8000340 <HD44780_NoCursor>
   HAL_Delay(2000);
 80006f6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006fa:	f000 fa2b 	bl	8000b54 <HAL_Delay>

   HD44780_NoDisplay();
 80006fe:	f7ff fdf3 	bl	80002e8 <HD44780_NoDisplay>
   HAL_Delay(2000);
 8000702:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000706:	f000 fa25 	bl	8000b54 <HAL_Delay>
   HD44780_Display();
 800070a:	f7ff fe03 	bl	8000314 <HD44780_Display>

   HD44780_Clear();
 800070e:	f7ff fda3 	bl	8000258 <HD44780_Clear>
   HD44780_SetCursor(0,0);
 8000712:	2100      	movs	r1, #0
 8000714:	2000      	movs	r0, #0
 8000716:	f7ff fdb5 	bl	8000284 <HD44780_SetCursor>
   HD44780_PrintStr("Learning STM32 with LCD is fun :-)");
 800071a:	4820      	ldr	r0, [pc, #128]	; (800079c <main+0x144>)
 800071c:	f7ff fe98 	bl	8000450 <HD44780_PrintStr>
   int x;
   for(int x=0; x<40; x=x+1)
 8000720:	2300      	movs	r3, #0
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	e008      	b.n	8000738 <main+0xe0>
   {
     HD44780_ScrollDisplayLeft();  //HD44780_ScrollDisplayRight();
 8000726:	f7ff fe63 	bl	80003f0 <HD44780_ScrollDisplayLeft>
     HAL_Delay(500);
 800072a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800072e:	f000 fa11 	bl	8000b54 <HAL_Delay>
   for(int x=0; x<40; x=x+1)
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	3301      	adds	r3, #1
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	2b27      	cmp	r3, #39	; 0x27
 800073c:	ddf3      	ble.n	8000726 <main+0xce>
   }

   char snum[5];
   for ( int x = 1; x <= 200 ; x++ )
 800073e:	2301      	movs	r3, #1
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	e016      	b.n	8000772 <main+0x11a>
   {
     itoa(x, snum, 10);
 8000744:	463b      	mov	r3, r7
 8000746:	220a      	movs	r2, #10
 8000748:	4619      	mov	r1, r3
 800074a:	68b8      	ldr	r0, [r7, #8]
 800074c:	f004 f992 	bl	8004a74 <itoa>
     HD44780_Clear();
 8000750:	f7ff fd82 	bl	8000258 <HD44780_Clear>
     HD44780_SetCursor(0,0);
 8000754:	2100      	movs	r1, #0
 8000756:	2000      	movs	r0, #0
 8000758:	f7ff fd94 	bl	8000284 <HD44780_SetCursor>
     HD44780_PrintStr(snum);
 800075c:	463b      	mov	r3, r7
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff fe76 	bl	8000450 <HD44780_PrintStr>
     HAL_Delay (1000);
 8000764:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000768:	f000 f9f4 	bl	8000b54 <HAL_Delay>
   for ( int x = 1; x <= 200 ; x++ )
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	3301      	adds	r3, #1
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	2bc8      	cmp	r3, #200	; 0xc8
 8000776:	dde5      	ble.n	8000744 <main+0xec>
   }
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000778:	f001 fcc8 	bl	800210c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800077c:	4a08      	ldr	r2, [pc, #32]	; (80007a0 <main+0x148>)
 800077e:	2100      	movs	r1, #0
 8000780:	4808      	ldr	r0, [pc, #32]	; (80007a4 <main+0x14c>)
 8000782:	f001 fd29 	bl	80021d8 <osThreadNew>
 8000786:	4603      	mov	r3, r0
 8000788:	4a07      	ldr	r2, [pc, #28]	; (80007a8 <main+0x150>)
 800078a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800078c:	f001 fcf0 	bl	8002170 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000790:	e7fe      	b.n	8000790 <main+0x138>
 8000792:	bf00      	nop
 8000794:	08004b5c 	.word	0x08004b5c
 8000798:	08004b6c 	.word	0x08004b6c
 800079c:	08004b74 	.word	0x08004b74
 80007a0:	08004bc0 	.word	0x08004bc0
 80007a4:	080008f1 	.word	0x080008f1
 80007a8:	20000098 	.word	0x20000098

080007ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b090      	sub	sp, #64	; 0x40
 80007b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b2:	f107 0318 	add.w	r3, r7, #24
 80007b6:	2228      	movs	r2, #40	; 0x28
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f004 f96a 	bl	8004a94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ce:	2302      	movs	r3, #2
 80007d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d2:	2301      	movs	r3, #1
 80007d4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d6:	2310      	movs	r3, #16
 80007d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007da:	2300      	movs	r3, #0
 80007dc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007de:	f107 0318 	add.w	r3, r7, #24
 80007e2:	4618      	mov	r0, r3
 80007e4:	f001 f88c 	bl	8001900 <HAL_RCC_OscConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80007ee:	f000 f884 	bl	80008fa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f2:	230f      	movs	r3, #15
 80007f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f001 fafa 	bl	8001e04 <HAL_RCC_ClockConfig>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000816:	f000 f870 	bl	80008fa <Error_Handler>
  }
}
 800081a:	bf00      	nop
 800081c:	3740      	adds	r7, #64	; 0x40
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
	...

08000824 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */
	  __HAL_RCC_AFIO_CLK_ENABLE();
 800082a:	4b21      	ldr	r3, [pc, #132]	; (80008b0 <MX_I2C1_Init+0x8c>)
 800082c:	699b      	ldr	r3, [r3, #24]
 800082e:	4a20      	ldr	r2, [pc, #128]	; (80008b0 <MX_I2C1_Init+0x8c>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6193      	str	r3, [r2, #24]
 8000836:	4b1e      	ldr	r3, [pc, #120]	; (80008b0 <MX_I2C1_Init+0x8c>)
 8000838:	699b      	ldr	r3, [r3, #24]
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	683b      	ldr	r3, [r7, #0]
	  __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000842:	4b1c      	ldr	r3, [pc, #112]	; (80008b4 <MX_I2C1_Init+0x90>)
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	f043 0302 	orr.w	r3, r3, #2
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	4a16      	ldr	r2, [pc, #88]	; (80008b4 <MX_I2C1_Init+0x90>)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	6053      	str	r3, [r2, #4]
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800085e:	4b16      	ldr	r3, [pc, #88]	; (80008b8 <MX_I2C1_Init+0x94>)
 8000860:	4a16      	ldr	r2, [pc, #88]	; (80008bc <MX_I2C1_Init+0x98>)
 8000862:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000864:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <MX_I2C1_Init+0x94>)
 8000866:	4a16      	ldr	r2, [pc, #88]	; (80008c0 <MX_I2C1_Init+0x9c>)
 8000868:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800086a:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <MX_I2C1_Init+0x94>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000870:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <MX_I2C1_Init+0x94>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000876:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <MX_I2C1_Init+0x94>)
 8000878:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800087c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MX_I2C1_Init+0x94>)
 8000880:	2200      	movs	r2, #0
 8000882:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <MX_I2C1_Init+0x94>)
 8000886:	2200      	movs	r2, #0
 8000888:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <MX_I2C1_Init+0x94>)
 800088c:	2200      	movs	r2, #0
 800088e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <MX_I2C1_Init+0x94>)
 8000892:	2200      	movs	r2, #0
 8000894:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000896:	4808      	ldr	r0, [pc, #32]	; (80008b8 <MX_I2C1_Init+0x94>)
 8000898:	f000 fbe8 	bl	800106c <HAL_I2C_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_I2C1_Init+0x82>
  {
    Error_Handler();
 80008a2:	f000 f82a 	bl	80008fa <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40021000 	.word	0x40021000
 80008b4:	40010000 	.word	0x40010000
 80008b8:	20000044 	.word	0x20000044
 80008bc:	40005400 	.word	0x40005400
 80008c0:	000186a0 	.word	0x000186a0

080008c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ca:	4b08      	ldr	r3, [pc, #32]	; (80008ec <MX_GPIO_Init+0x28>)
 80008cc:	699b      	ldr	r3, [r3, #24]
 80008ce:	4a07      	ldr	r2, [pc, #28]	; (80008ec <MX_GPIO_Init+0x28>)
 80008d0:	f043 0308 	orr.w	r3, r3, #8
 80008d4:	6193      	str	r3, [r2, #24]
 80008d6:	4b05      	ldr	r3, [pc, #20]	; (80008ec <MX_GPIO_Init+0x28>)
 80008d8:	699b      	ldr	r3, [r3, #24]
 80008da:	f003 0308 	and.w	r3, r3, #8
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008e2:	bf00      	nop
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr
 80008ec:	40021000 	.word	0x40021000

080008f0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
 80008f8:	e7fe      	b.n	80008f8 <StartDefaultTask+0x8>

080008fa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008fe:	b672      	cpsid	i
}
 8000900:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000902:	e7fe      	b.n	8000902 <Error_Handler+0x8>

08000904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800090a:	4b11      	ldr	r3, [pc, #68]	; (8000950 <HAL_MspInit+0x4c>)
 800090c:	699b      	ldr	r3, [r3, #24]
 800090e:	4a10      	ldr	r2, [pc, #64]	; (8000950 <HAL_MspInit+0x4c>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6193      	str	r3, [r2, #24]
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <HAL_MspInit+0x4c>)
 8000918:	699b      	ldr	r3, [r3, #24]
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000922:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <HAL_MspInit+0x4c>)
 8000924:	69db      	ldr	r3, [r3, #28]
 8000926:	4a0a      	ldr	r2, [pc, #40]	; (8000950 <HAL_MspInit+0x4c>)
 8000928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800092c:	61d3      	str	r3, [r2, #28]
 800092e:	4b08      	ldr	r3, [pc, #32]	; (8000950 <HAL_MspInit+0x4c>)
 8000930:	69db      	ldr	r3, [r3, #28]
 8000932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	210f      	movs	r1, #15
 800093e:	f06f 0001 	mvn.w	r0, #1
 8000942:	f000 f9e6 	bl	8000d12 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40021000 	.word	0x40021000

08000954 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08a      	sub	sp, #40	; 0x28
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4a1d      	ldr	r2, [pc, #116]	; (80009e4 <HAL_I2C_MspInit+0x90>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d132      	bne.n	80009da <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000974:	4b1c      	ldr	r3, [pc, #112]	; (80009e8 <HAL_I2C_MspInit+0x94>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	4a1b      	ldr	r2, [pc, #108]	; (80009e8 <HAL_I2C_MspInit+0x94>)
 800097a:	f043 0308 	orr.w	r3, r3, #8
 800097e:	6193      	str	r3, [r2, #24]
 8000980:	4b19      	ldr	r3, [pc, #100]	; (80009e8 <HAL_I2C_MspInit+0x94>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	f003 0308 	and.w	r3, r3, #8
 8000988:	613b      	str	r3, [r7, #16]
 800098a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800098c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000990:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000992:	2312      	movs	r3, #18
 8000994:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000996:	2303      	movs	r3, #3
 8000998:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099a:	f107 0314 	add.w	r3, r7, #20
 800099e:	4619      	mov	r1, r3
 80009a0:	4812      	ldr	r0, [pc, #72]	; (80009ec <HAL_I2C_MspInit+0x98>)
 80009a2:	f000 f9df 	bl	8000d64 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80009a6:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <HAL_I2C_MspInit+0x9c>)
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	627b      	str	r3, [r7, #36]	; 0x24
 80009ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ae:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
 80009b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b6:	f043 0302 	orr.w	r3, r3, #2
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
 80009bc:	4a0c      	ldr	r2, [pc, #48]	; (80009f0 <HAL_I2C_MspInit+0x9c>)
 80009be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c0:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009c2:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <HAL_I2C_MspInit+0x94>)
 80009c4:	69db      	ldr	r3, [r3, #28]
 80009c6:	4a08      	ldr	r2, [pc, #32]	; (80009e8 <HAL_I2C_MspInit+0x94>)
 80009c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009cc:	61d3      	str	r3, [r2, #28]
 80009ce:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <HAL_I2C_MspInit+0x94>)
 80009d0:	69db      	ldr	r3, [r3, #28]
 80009d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009da:	bf00      	nop
 80009dc:	3728      	adds	r7, #40	; 0x28
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40005400 	.word	0x40005400
 80009e8:	40021000 	.word	0x40021000
 80009ec:	40010c00 	.word	0x40010c00
 80009f0:	40010000 	.word	0x40010000

080009f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <NMI_Handler+0x4>

080009fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009fe:	e7fe      	b.n	80009fe <HardFault_Handler+0x4>

08000a00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <MemManage_Handler+0x4>

08000a06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a0a:	e7fe      	b.n	8000a0a <BusFault_Handler+0x4>

08000a0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <UsageFault_Handler+0x4>

08000a12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bc80      	pop	{r7}
 8000a1c:	4770      	bx	lr

08000a1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a22:	f000 f87b 	bl	8000b1c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a26:	f003 f82b 	bl	8003a80 <xTaskGetSchedulerState>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d001      	beq.n	8000a34 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a30:	f003 fd8a 	bl	8004548 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr

08000a44 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a44:	480c      	ldr	r0, [pc, #48]	; (8000a78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a46:	490d      	ldr	r1, [pc, #52]	; (8000a7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a48:	4a0d      	ldr	r2, [pc, #52]	; (8000a80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a4c:	e002      	b.n	8000a54 <LoopCopyDataInit>

08000a4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a52:	3304      	adds	r3, #4

08000a54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a58:	d3f9      	bcc.n	8000a4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a5a:	4a0a      	ldr	r2, [pc, #40]	; (8000a84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a5c:	4c0a      	ldr	r4, [pc, #40]	; (8000a88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a60:	e001      	b.n	8000a66 <LoopFillZerobss>

08000a62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a64:	3204      	adds	r2, #4

08000a66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a68:	d3fb      	bcc.n	8000a62 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a6a:	f7ff ffe5 	bl	8000a38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a6e:	f003 ffc5 	bl	80049fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a72:	f7ff fdf1 	bl	8000658 <main>
  bx lr
 8000a76:	4770      	bx	lr
  ldr r0, =_sdata
 8000a78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a7c:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000a80:	08004c2c 	.word	0x08004c2c
  ldr r2, =_sbss
 8000a84:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000a88:	200019e8 	.word	0x200019e8

08000a8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a8c:	e7fe      	b.n	8000a8c <ADC1_2_IRQHandler>
	...

08000a90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <HAL_Init+0x28>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a07      	ldr	r2, [pc, #28]	; (8000ab8 <HAL_Init+0x28>)
 8000a9a:	f043 0310 	orr.w	r3, r3, #16
 8000a9e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa0:	2003      	movs	r0, #3
 8000aa2:	f000 f92b 	bl	8000cfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aa6:	200f      	movs	r0, #15
 8000aa8:	f000 f808 	bl	8000abc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aac:	f7ff ff2a 	bl	8000904 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40022000 	.word	0x40022000

08000abc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <HAL_InitTick+0x54>)
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <HAL_InitTick+0x58>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	4619      	mov	r1, r3
 8000ace:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ad2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ada:	4618      	mov	r0, r3
 8000adc:	f000 f935 	bl	8000d4a <HAL_SYSTICK_Config>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e00e      	b.n	8000b08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2b0f      	cmp	r3, #15
 8000aee:	d80a      	bhi.n	8000b06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af0:	2200      	movs	r2, #0
 8000af2:	6879      	ldr	r1, [r7, #4]
 8000af4:	f04f 30ff 	mov.w	r0, #4294967295
 8000af8:	f000 f90b 	bl	8000d12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000afc:	4a06      	ldr	r2, [pc, #24]	; (8000b18 <HAL_InitTick+0x5c>)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b02:	2300      	movs	r3, #0
 8000b04:	e000      	b.n	8000b08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000010 	.word	0x20000010
 8000b14:	20000018 	.word	0x20000018
 8000b18:	20000014 	.word	0x20000014

08000b1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b20:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <HAL_IncTick+0x1c>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	461a      	mov	r2, r3
 8000b26:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <HAL_IncTick+0x20>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	4a03      	ldr	r2, [pc, #12]	; (8000b3c <HAL_IncTick+0x20>)
 8000b2e:	6013      	str	r3, [r2, #0]
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr
 8000b38:	20000018 	.word	0x20000018
 8000b3c:	2000009c 	.word	0x2000009c

08000b40 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  return uwTick;
 8000b44:	4b02      	ldr	r3, [pc, #8]	; (8000b50 <HAL_GetTick+0x10>)
 8000b46:	681b      	ldr	r3, [r3, #0]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc80      	pop	{r7}
 8000b4e:	4770      	bx	lr
 8000b50:	2000009c 	.word	0x2000009c

08000b54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b5c:	f7ff fff0 	bl	8000b40 <HAL_GetTick>
 8000b60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b6c:	d005      	beq.n	8000b7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b6e:	4b0a      	ldr	r3, [pc, #40]	; (8000b98 <HAL_Delay+0x44>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	461a      	mov	r2, r3
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	4413      	add	r3, r2
 8000b78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b7a:	bf00      	nop
 8000b7c:	f7ff ffe0 	bl	8000b40 <HAL_GetTick>
 8000b80:	4602      	mov	r2, r0
 8000b82:	68bb      	ldr	r3, [r7, #8]
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	68fa      	ldr	r2, [r7, #12]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d8f7      	bhi.n	8000b7c <HAL_Delay+0x28>
  {
  }
}
 8000b8c:	bf00      	nop
 8000b8e:	bf00      	nop
 8000b90:	3710      	adds	r7, #16
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000018 	.word	0x20000018

08000b9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f003 0307 	and.w	r3, r3, #7
 8000baa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bb2:	68ba      	ldr	r2, [r7, #8]
 8000bb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bb8:	4013      	ands	r3, r2
 8000bba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bce:	4a04      	ldr	r2, [pc, #16]	; (8000be0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	60d3      	str	r3, [r2, #12]
}
 8000bd4:	bf00      	nop
 8000bd6:	3714      	adds	r7, #20
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc80      	pop	{r7}
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be8:	4b04      	ldr	r3, [pc, #16]	; (8000bfc <__NVIC_GetPriorityGrouping+0x18>)
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	0a1b      	lsrs	r3, r3, #8
 8000bee:	f003 0307 	and.w	r3, r3, #7
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc80      	pop	{r7}
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	6039      	str	r1, [r7, #0]
 8000c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	db0a      	blt.n	8000c2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	b2da      	uxtb	r2, r3
 8000c18:	490c      	ldr	r1, [pc, #48]	; (8000c4c <__NVIC_SetPriority+0x4c>)
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	0112      	lsls	r2, r2, #4
 8000c20:	b2d2      	uxtb	r2, r2
 8000c22:	440b      	add	r3, r1
 8000c24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c28:	e00a      	b.n	8000c40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	4908      	ldr	r1, [pc, #32]	; (8000c50 <__NVIC_SetPriority+0x50>)
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	f003 030f 	and.w	r3, r3, #15
 8000c36:	3b04      	subs	r3, #4
 8000c38:	0112      	lsls	r2, r2, #4
 8000c3a:	b2d2      	uxtb	r2, r2
 8000c3c:	440b      	add	r3, r1
 8000c3e:	761a      	strb	r2, [r3, #24]
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc80      	pop	{r7}
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000e100 	.word	0xe000e100
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b089      	sub	sp, #36	; 0x24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	f1c3 0307 	rsb	r3, r3, #7
 8000c6e:	2b04      	cmp	r3, #4
 8000c70:	bf28      	it	cs
 8000c72:	2304      	movcs	r3, #4
 8000c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	3304      	adds	r3, #4
 8000c7a:	2b06      	cmp	r3, #6
 8000c7c:	d902      	bls.n	8000c84 <NVIC_EncodePriority+0x30>
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3b03      	subs	r3, #3
 8000c82:	e000      	b.n	8000c86 <NVIC_EncodePriority+0x32>
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c88:	f04f 32ff 	mov.w	r2, #4294967295
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	43da      	mvns	r2, r3
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	401a      	ands	r2, r3
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca6:	43d9      	mvns	r1, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cac:	4313      	orrs	r3, r2
         );
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3724      	adds	r7, #36	; 0x24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr

08000cb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cc8:	d301      	bcc.n	8000cce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e00f      	b.n	8000cee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cce:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <SysTick_Config+0x40>)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cd6:	210f      	movs	r1, #15
 8000cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cdc:	f7ff ff90 	bl	8000c00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce0:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <SysTick_Config+0x40>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce6:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <SysTick_Config+0x40>)
 8000ce8:	2207      	movs	r2, #7
 8000cea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	e000e010 	.word	0xe000e010

08000cfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f7ff ff49 	bl	8000b9c <__NVIC_SetPriorityGrouping>
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b086      	sub	sp, #24
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	4603      	mov	r3, r0
 8000d1a:	60b9      	str	r1, [r7, #8]
 8000d1c:	607a      	str	r2, [r7, #4]
 8000d1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d24:	f7ff ff5e 	bl	8000be4 <__NVIC_GetPriorityGrouping>
 8000d28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	68b9      	ldr	r1, [r7, #8]
 8000d2e:	6978      	ldr	r0, [r7, #20]
 8000d30:	f7ff ff90 	bl	8000c54 <NVIC_EncodePriority>
 8000d34:	4602      	mov	r2, r0
 8000d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d3a:	4611      	mov	r1, r2
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ff5f 	bl	8000c00 <__NVIC_SetPriority>
}
 8000d42:	bf00      	nop
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f7ff ffb0 	bl	8000cb8 <SysTick_Config>
 8000d58:	4603      	mov	r3, r0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b08b      	sub	sp, #44	; 0x2c
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d72:	2300      	movs	r3, #0
 8000d74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d76:	e169      	b.n	800104c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d78:	2201      	movs	r2, #1
 8000d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	69fa      	ldr	r2, [r7, #28]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	f040 8158 	bne.w	8001046 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	4a9a      	ldr	r2, [pc, #616]	; (8001004 <HAL_GPIO_Init+0x2a0>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d05e      	beq.n	8000e5e <HAL_GPIO_Init+0xfa>
 8000da0:	4a98      	ldr	r2, [pc, #608]	; (8001004 <HAL_GPIO_Init+0x2a0>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d875      	bhi.n	8000e92 <HAL_GPIO_Init+0x12e>
 8000da6:	4a98      	ldr	r2, [pc, #608]	; (8001008 <HAL_GPIO_Init+0x2a4>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d058      	beq.n	8000e5e <HAL_GPIO_Init+0xfa>
 8000dac:	4a96      	ldr	r2, [pc, #600]	; (8001008 <HAL_GPIO_Init+0x2a4>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d86f      	bhi.n	8000e92 <HAL_GPIO_Init+0x12e>
 8000db2:	4a96      	ldr	r2, [pc, #600]	; (800100c <HAL_GPIO_Init+0x2a8>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d052      	beq.n	8000e5e <HAL_GPIO_Init+0xfa>
 8000db8:	4a94      	ldr	r2, [pc, #592]	; (800100c <HAL_GPIO_Init+0x2a8>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d869      	bhi.n	8000e92 <HAL_GPIO_Init+0x12e>
 8000dbe:	4a94      	ldr	r2, [pc, #592]	; (8001010 <HAL_GPIO_Init+0x2ac>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d04c      	beq.n	8000e5e <HAL_GPIO_Init+0xfa>
 8000dc4:	4a92      	ldr	r2, [pc, #584]	; (8001010 <HAL_GPIO_Init+0x2ac>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d863      	bhi.n	8000e92 <HAL_GPIO_Init+0x12e>
 8000dca:	4a92      	ldr	r2, [pc, #584]	; (8001014 <HAL_GPIO_Init+0x2b0>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d046      	beq.n	8000e5e <HAL_GPIO_Init+0xfa>
 8000dd0:	4a90      	ldr	r2, [pc, #576]	; (8001014 <HAL_GPIO_Init+0x2b0>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d85d      	bhi.n	8000e92 <HAL_GPIO_Init+0x12e>
 8000dd6:	2b12      	cmp	r3, #18
 8000dd8:	d82a      	bhi.n	8000e30 <HAL_GPIO_Init+0xcc>
 8000dda:	2b12      	cmp	r3, #18
 8000ddc:	d859      	bhi.n	8000e92 <HAL_GPIO_Init+0x12e>
 8000dde:	a201      	add	r2, pc, #4	; (adr r2, 8000de4 <HAL_GPIO_Init+0x80>)
 8000de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000de4:	08000e5f 	.word	0x08000e5f
 8000de8:	08000e39 	.word	0x08000e39
 8000dec:	08000e4b 	.word	0x08000e4b
 8000df0:	08000e8d 	.word	0x08000e8d
 8000df4:	08000e93 	.word	0x08000e93
 8000df8:	08000e93 	.word	0x08000e93
 8000dfc:	08000e93 	.word	0x08000e93
 8000e00:	08000e93 	.word	0x08000e93
 8000e04:	08000e93 	.word	0x08000e93
 8000e08:	08000e93 	.word	0x08000e93
 8000e0c:	08000e93 	.word	0x08000e93
 8000e10:	08000e93 	.word	0x08000e93
 8000e14:	08000e93 	.word	0x08000e93
 8000e18:	08000e93 	.word	0x08000e93
 8000e1c:	08000e93 	.word	0x08000e93
 8000e20:	08000e93 	.word	0x08000e93
 8000e24:	08000e93 	.word	0x08000e93
 8000e28:	08000e41 	.word	0x08000e41
 8000e2c:	08000e55 	.word	0x08000e55
 8000e30:	4a79      	ldr	r2, [pc, #484]	; (8001018 <HAL_GPIO_Init+0x2b4>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d013      	beq.n	8000e5e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e36:	e02c      	b.n	8000e92 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	623b      	str	r3, [r7, #32]
          break;
 8000e3e:	e029      	b.n	8000e94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	3304      	adds	r3, #4
 8000e46:	623b      	str	r3, [r7, #32]
          break;
 8000e48:	e024      	b.n	8000e94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	68db      	ldr	r3, [r3, #12]
 8000e4e:	3308      	adds	r3, #8
 8000e50:	623b      	str	r3, [r7, #32]
          break;
 8000e52:	e01f      	b.n	8000e94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	330c      	adds	r3, #12
 8000e5a:	623b      	str	r3, [r7, #32]
          break;
 8000e5c:	e01a      	b.n	8000e94 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d102      	bne.n	8000e6c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e66:	2304      	movs	r3, #4
 8000e68:	623b      	str	r3, [r7, #32]
          break;
 8000e6a:	e013      	b.n	8000e94 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d105      	bne.n	8000e80 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e74:	2308      	movs	r3, #8
 8000e76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	69fa      	ldr	r2, [r7, #28]
 8000e7c:	611a      	str	r2, [r3, #16]
          break;
 8000e7e:	e009      	b.n	8000e94 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e80:	2308      	movs	r3, #8
 8000e82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	69fa      	ldr	r2, [r7, #28]
 8000e88:	615a      	str	r2, [r3, #20]
          break;
 8000e8a:	e003      	b.n	8000e94 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	623b      	str	r3, [r7, #32]
          break;
 8000e90:	e000      	b.n	8000e94 <HAL_GPIO_Init+0x130>
          break;
 8000e92:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	2bff      	cmp	r3, #255	; 0xff
 8000e98:	d801      	bhi.n	8000e9e <HAL_GPIO_Init+0x13a>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	e001      	b.n	8000ea2 <HAL_GPIO_Init+0x13e>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	2bff      	cmp	r3, #255	; 0xff
 8000ea8:	d802      	bhi.n	8000eb0 <HAL_GPIO_Init+0x14c>
 8000eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	e002      	b.n	8000eb6 <HAL_GPIO_Init+0x152>
 8000eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb2:	3b08      	subs	r3, #8
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	210f      	movs	r1, #15
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	401a      	ands	r2, r3
 8000ec8:	6a39      	ldr	r1, [r7, #32]
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed0:	431a      	orrs	r2, r3
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	f000 80b1 	beq.w	8001046 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ee4:	4b4d      	ldr	r3, [pc, #308]	; (800101c <HAL_GPIO_Init+0x2b8>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	4a4c      	ldr	r2, [pc, #304]	; (800101c <HAL_GPIO_Init+0x2b8>)
 8000eea:	f043 0301 	orr.w	r3, r3, #1
 8000eee:	6193      	str	r3, [r2, #24]
 8000ef0:	4b4a      	ldr	r3, [pc, #296]	; (800101c <HAL_GPIO_Init+0x2b8>)
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	f003 0301 	and.w	r3, r3, #1
 8000ef8:	60bb      	str	r3, [r7, #8]
 8000efa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000efc:	4a48      	ldr	r2, [pc, #288]	; (8001020 <HAL_GPIO_Init+0x2bc>)
 8000efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f00:	089b      	lsrs	r3, r3, #2
 8000f02:	3302      	adds	r3, #2
 8000f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f08:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0c:	f003 0303 	and.w	r3, r3, #3
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	220f      	movs	r2, #15
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4a40      	ldr	r2, [pc, #256]	; (8001024 <HAL_GPIO_Init+0x2c0>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d013      	beq.n	8000f50 <HAL_GPIO_Init+0x1ec>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4a3f      	ldr	r2, [pc, #252]	; (8001028 <HAL_GPIO_Init+0x2c4>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d00d      	beq.n	8000f4c <HAL_GPIO_Init+0x1e8>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4a3e      	ldr	r2, [pc, #248]	; (800102c <HAL_GPIO_Init+0x2c8>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d007      	beq.n	8000f48 <HAL_GPIO_Init+0x1e4>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a3d      	ldr	r2, [pc, #244]	; (8001030 <HAL_GPIO_Init+0x2cc>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d101      	bne.n	8000f44 <HAL_GPIO_Init+0x1e0>
 8000f40:	2303      	movs	r3, #3
 8000f42:	e006      	b.n	8000f52 <HAL_GPIO_Init+0x1ee>
 8000f44:	2304      	movs	r3, #4
 8000f46:	e004      	b.n	8000f52 <HAL_GPIO_Init+0x1ee>
 8000f48:	2302      	movs	r3, #2
 8000f4a:	e002      	b.n	8000f52 <HAL_GPIO_Init+0x1ee>
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e000      	b.n	8000f52 <HAL_GPIO_Init+0x1ee>
 8000f50:	2300      	movs	r3, #0
 8000f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f54:	f002 0203 	and.w	r2, r2, #3
 8000f58:	0092      	lsls	r2, r2, #2
 8000f5a:	4093      	lsls	r3, r2
 8000f5c:	68fa      	ldr	r2, [r7, #12]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f62:	492f      	ldr	r1, [pc, #188]	; (8001020 <HAL_GPIO_Init+0x2bc>)
 8000f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f66:	089b      	lsrs	r3, r3, #2
 8000f68:	3302      	adds	r3, #2
 8000f6a:	68fa      	ldr	r2, [r7, #12]
 8000f6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d006      	beq.n	8000f8a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f7c:	4b2d      	ldr	r3, [pc, #180]	; (8001034 <HAL_GPIO_Init+0x2d0>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	492c      	ldr	r1, [pc, #176]	; (8001034 <HAL_GPIO_Init+0x2d0>)
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	600b      	str	r3, [r1, #0]
 8000f88:	e006      	b.n	8000f98 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f8a:	4b2a      	ldr	r3, [pc, #168]	; (8001034 <HAL_GPIO_Init+0x2d0>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	43db      	mvns	r3, r3
 8000f92:	4928      	ldr	r1, [pc, #160]	; (8001034 <HAL_GPIO_Init+0x2d0>)
 8000f94:	4013      	ands	r3, r2
 8000f96:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d006      	beq.n	8000fb2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fa4:	4b23      	ldr	r3, [pc, #140]	; (8001034 <HAL_GPIO_Init+0x2d0>)
 8000fa6:	685a      	ldr	r2, [r3, #4]
 8000fa8:	4922      	ldr	r1, [pc, #136]	; (8001034 <HAL_GPIO_Init+0x2d0>)
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	604b      	str	r3, [r1, #4]
 8000fb0:	e006      	b.n	8000fc0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fb2:	4b20      	ldr	r3, [pc, #128]	; (8001034 <HAL_GPIO_Init+0x2d0>)
 8000fb4:	685a      	ldr	r2, [r3, #4]
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	491e      	ldr	r1, [pc, #120]	; (8001034 <HAL_GPIO_Init+0x2d0>)
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d006      	beq.n	8000fda <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fcc:	4b19      	ldr	r3, [pc, #100]	; (8001034 <HAL_GPIO_Init+0x2d0>)
 8000fce:	689a      	ldr	r2, [r3, #8]
 8000fd0:	4918      	ldr	r1, [pc, #96]	; (8001034 <HAL_GPIO_Init+0x2d0>)
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	608b      	str	r3, [r1, #8]
 8000fd8:	e006      	b.n	8000fe8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fda:	4b16      	ldr	r3, [pc, #88]	; (8001034 <HAL_GPIO_Init+0x2d0>)
 8000fdc:	689a      	ldr	r2, [r3, #8]
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	4914      	ldr	r1, [pc, #80]	; (8001034 <HAL_GPIO_Init+0x2d0>)
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d021      	beq.n	8001038 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <HAL_GPIO_Init+0x2d0>)
 8000ff6:	68da      	ldr	r2, [r3, #12]
 8000ff8:	490e      	ldr	r1, [pc, #56]	; (8001034 <HAL_GPIO_Init+0x2d0>)
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	60cb      	str	r3, [r1, #12]
 8001000:	e021      	b.n	8001046 <HAL_GPIO_Init+0x2e2>
 8001002:	bf00      	nop
 8001004:	10320000 	.word	0x10320000
 8001008:	10310000 	.word	0x10310000
 800100c:	10220000 	.word	0x10220000
 8001010:	10210000 	.word	0x10210000
 8001014:	10120000 	.word	0x10120000
 8001018:	10110000 	.word	0x10110000
 800101c:	40021000 	.word	0x40021000
 8001020:	40010000 	.word	0x40010000
 8001024:	40010800 	.word	0x40010800
 8001028:	40010c00 	.word	0x40010c00
 800102c:	40011000 	.word	0x40011000
 8001030:	40011400 	.word	0x40011400
 8001034:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001038:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <HAL_GPIO_Init+0x304>)
 800103a:	68da      	ldr	r2, [r3, #12]
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	43db      	mvns	r3, r3
 8001040:	4909      	ldr	r1, [pc, #36]	; (8001068 <HAL_GPIO_Init+0x304>)
 8001042:	4013      	ands	r3, r2
 8001044:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001048:	3301      	adds	r3, #1
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001052:	fa22 f303 	lsr.w	r3, r2, r3
 8001056:	2b00      	cmp	r3, #0
 8001058:	f47f ae8e 	bne.w	8000d78 <HAL_GPIO_Init+0x14>
  }
}
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	372c      	adds	r7, #44	; 0x2c
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr
 8001068:	40010400 	.word	0x40010400

0800106c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d101      	bne.n	800107e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e12b      	b.n	80012d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b00      	cmp	r3, #0
 8001088:	d106      	bne.n	8001098 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff fc5e 	bl	8000954 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2224      	movs	r2, #36	; 0x24
 800109c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f022 0201 	bic.w	r2, r2, #1
 80010ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80010be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80010d0:	f000 ffea 	bl	80020a8 <HAL_RCC_GetPCLK1Freq>
 80010d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	4a81      	ldr	r2, [pc, #516]	; (80012e0 <HAL_I2C_Init+0x274>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d807      	bhi.n	80010f0 <HAL_I2C_Init+0x84>
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	4a80      	ldr	r2, [pc, #512]	; (80012e4 <HAL_I2C_Init+0x278>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	bf94      	ite	ls
 80010e8:	2301      	movls	r3, #1
 80010ea:	2300      	movhi	r3, #0
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	e006      	b.n	80010fe <HAL_I2C_Init+0x92>
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4a7d      	ldr	r2, [pc, #500]	; (80012e8 <HAL_I2C_Init+0x27c>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	bf94      	ite	ls
 80010f8:	2301      	movls	r3, #1
 80010fa:	2300      	movhi	r3, #0
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e0e7      	b.n	80012d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	4a78      	ldr	r2, [pc, #480]	; (80012ec <HAL_I2C_Init+0x280>)
 800110a:	fba2 2303 	umull	r2, r3, r2, r3
 800110e:	0c9b      	lsrs	r3, r3, #18
 8001110:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	68ba      	ldr	r2, [r7, #8]
 8001122:	430a      	orrs	r2, r1
 8001124:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	6a1b      	ldr	r3, [r3, #32]
 800112c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	4a6a      	ldr	r2, [pc, #424]	; (80012e0 <HAL_I2C_Init+0x274>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d802      	bhi.n	8001140 <HAL_I2C_Init+0xd4>
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	3301      	adds	r3, #1
 800113e:	e009      	b.n	8001154 <HAL_I2C_Init+0xe8>
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001146:	fb02 f303 	mul.w	r3, r2, r3
 800114a:	4a69      	ldr	r2, [pc, #420]	; (80012f0 <HAL_I2C_Init+0x284>)
 800114c:	fba2 2303 	umull	r2, r3, r2, r3
 8001150:	099b      	lsrs	r3, r3, #6
 8001152:	3301      	adds	r3, #1
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	6812      	ldr	r2, [r2, #0]
 8001158:	430b      	orrs	r3, r1
 800115a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	69db      	ldr	r3, [r3, #28]
 8001162:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001166:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	495c      	ldr	r1, [pc, #368]	; (80012e0 <HAL_I2C_Init+0x274>)
 8001170:	428b      	cmp	r3, r1
 8001172:	d819      	bhi.n	80011a8 <HAL_I2C_Init+0x13c>
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	1e59      	subs	r1, r3, #1
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001182:	1c59      	adds	r1, r3, #1
 8001184:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001188:	400b      	ands	r3, r1
 800118a:	2b00      	cmp	r3, #0
 800118c:	d00a      	beq.n	80011a4 <HAL_I2C_Init+0x138>
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	1e59      	subs	r1, r3, #1
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	fbb1 f3f3 	udiv	r3, r1, r3
 800119c:	3301      	adds	r3, #1
 800119e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011a2:	e051      	b.n	8001248 <HAL_I2C_Init+0x1dc>
 80011a4:	2304      	movs	r3, #4
 80011a6:	e04f      	b.n	8001248 <HAL_I2C_Init+0x1dc>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d111      	bne.n	80011d4 <HAL_I2C_Init+0x168>
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	1e58      	subs	r0, r3, #1
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6859      	ldr	r1, [r3, #4]
 80011b8:	460b      	mov	r3, r1
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	440b      	add	r3, r1
 80011be:	fbb0 f3f3 	udiv	r3, r0, r3
 80011c2:	3301      	adds	r3, #1
 80011c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	bf0c      	ite	eq
 80011cc:	2301      	moveq	r3, #1
 80011ce:	2300      	movne	r3, #0
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	e012      	b.n	80011fa <HAL_I2C_Init+0x18e>
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	1e58      	subs	r0, r3, #1
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6859      	ldr	r1, [r3, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	440b      	add	r3, r1
 80011e2:	0099      	lsls	r1, r3, #2
 80011e4:	440b      	add	r3, r1
 80011e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80011ea:	3301      	adds	r3, #1
 80011ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	bf0c      	ite	eq
 80011f4:	2301      	moveq	r3, #1
 80011f6:	2300      	movne	r3, #0
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <HAL_I2C_Init+0x196>
 80011fe:	2301      	movs	r3, #1
 8001200:	e022      	b.n	8001248 <HAL_I2C_Init+0x1dc>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d10e      	bne.n	8001228 <HAL_I2C_Init+0x1bc>
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	1e58      	subs	r0, r3, #1
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6859      	ldr	r1, [r3, #4]
 8001212:	460b      	mov	r3, r1
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	440b      	add	r3, r1
 8001218:	fbb0 f3f3 	udiv	r3, r0, r3
 800121c:	3301      	adds	r3, #1
 800121e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001222:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001226:	e00f      	b.n	8001248 <HAL_I2C_Init+0x1dc>
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	1e58      	subs	r0, r3, #1
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6859      	ldr	r1, [r3, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	440b      	add	r3, r1
 8001236:	0099      	lsls	r1, r3, #2
 8001238:	440b      	add	r3, r1
 800123a:	fbb0 f3f3 	udiv	r3, r0, r3
 800123e:	3301      	adds	r3, #1
 8001240:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001244:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001248:	6879      	ldr	r1, [r7, #4]
 800124a:	6809      	ldr	r1, [r1, #0]
 800124c:	4313      	orrs	r3, r2
 800124e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	69da      	ldr	r2, [r3, #28]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6a1b      	ldr	r3, [r3, #32]
 8001262:	431a      	orrs	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	430a      	orrs	r2, r1
 800126a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001276:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	6911      	ldr	r1, [r2, #16]
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	68d2      	ldr	r2, [r2, #12]
 8001282:	4311      	orrs	r1, r2
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	6812      	ldr	r2, [r2, #0]
 8001288:	430b      	orrs	r3, r1
 800128a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	695a      	ldr	r2, [r3, #20]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	431a      	orrs	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	430a      	orrs	r2, r1
 80012a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f042 0201 	orr.w	r2, r2, #1
 80012b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2220      	movs	r2, #32
 80012c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2200      	movs	r2, #0
 80012ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	000186a0 	.word	0x000186a0
 80012e4:	001e847f 	.word	0x001e847f
 80012e8:	003d08ff 	.word	0x003d08ff
 80012ec:	431bde83 	.word	0x431bde83
 80012f0:	10624dd3 	.word	0x10624dd3

080012f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b088      	sub	sp, #32
 80012f8:	af02      	add	r7, sp, #8
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	607a      	str	r2, [r7, #4]
 80012fe:	461a      	mov	r2, r3
 8001300:	460b      	mov	r3, r1
 8001302:	817b      	strh	r3, [r7, #10]
 8001304:	4613      	mov	r3, r2
 8001306:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001308:	f7ff fc1a 	bl	8000b40 <HAL_GetTick>
 800130c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b20      	cmp	r3, #32
 8001318:	f040 80e0 	bne.w	80014dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	2319      	movs	r3, #25
 8001322:	2201      	movs	r2, #1
 8001324:	4970      	ldr	r1, [pc, #448]	; (80014e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001326:	68f8      	ldr	r0, [r7, #12]
 8001328:	f000 f964 	bl	80015f4 <I2C_WaitOnFlagUntilTimeout>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001332:	2302      	movs	r3, #2
 8001334:	e0d3      	b.n	80014de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800133c:	2b01      	cmp	r3, #1
 800133e:	d101      	bne.n	8001344 <HAL_I2C_Master_Transmit+0x50>
 8001340:	2302      	movs	r3, #2
 8001342:	e0cc      	b.n	80014de <HAL_I2C_Master_Transmit+0x1ea>
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2201      	movs	r2, #1
 8001348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	2b01      	cmp	r3, #1
 8001358:	d007      	beq.n	800136a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f042 0201 	orr.w	r2, r2, #1
 8001368:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001378:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2221      	movs	r2, #33	; 0x21
 800137e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	2210      	movs	r2, #16
 8001386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	2200      	movs	r2, #0
 800138e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	893a      	ldrh	r2, [r7, #8]
 800139a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013a0:	b29a      	uxth	r2, r3
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	4a50      	ldr	r2, [pc, #320]	; (80014ec <HAL_I2C_Master_Transmit+0x1f8>)
 80013aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80013ac:	8979      	ldrh	r1, [r7, #10]
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	6a3a      	ldr	r2, [r7, #32]
 80013b2:	68f8      	ldr	r0, [r7, #12]
 80013b4:	f000 f89c 	bl	80014f0 <I2C_MasterRequestWrite>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e08d      	b.n	80014de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	695b      	ldr	r3, [r3, #20]
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	613b      	str	r3, [r7, #16]
 80013d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80013d8:	e066      	b.n	80014a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013da:	697a      	ldr	r2, [r7, #20]
 80013dc:	6a39      	ldr	r1, [r7, #32]
 80013de:	68f8      	ldr	r0, [r7, #12]
 80013e0:	f000 f9de 	bl	80017a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d00d      	beq.n	8001406 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	2b04      	cmp	r3, #4
 80013f0:	d107      	bne.n	8001402 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001400:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e06b      	b.n	80014de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140a:	781a      	ldrb	r2, [r3, #0]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001416:	1c5a      	adds	r2, r3, #1
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001420:	b29b      	uxth	r3, r3
 8001422:	3b01      	subs	r3, #1
 8001424:	b29a      	uxth	r2, r3
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800142e:	3b01      	subs	r3, #1
 8001430:	b29a      	uxth	r2, r3
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	695b      	ldr	r3, [r3, #20]
 800143c:	f003 0304 	and.w	r3, r3, #4
 8001440:	2b04      	cmp	r3, #4
 8001442:	d11b      	bne.n	800147c <HAL_I2C_Master_Transmit+0x188>
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001448:	2b00      	cmp	r3, #0
 800144a:	d017      	beq.n	800147c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001450:	781a      	ldrb	r2, [r3, #0]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145c:	1c5a      	adds	r2, r3, #1
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001466:	b29b      	uxth	r3, r3
 8001468:	3b01      	subs	r3, #1
 800146a:	b29a      	uxth	r2, r3
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001474:	3b01      	subs	r3, #1
 8001476:	b29a      	uxth	r2, r3
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800147c:	697a      	ldr	r2, [r7, #20]
 800147e:	6a39      	ldr	r1, [r7, #32]
 8001480:	68f8      	ldr	r0, [r7, #12]
 8001482:	f000 f9ce 	bl	8001822 <I2C_WaitOnBTFFlagUntilTimeout>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d00d      	beq.n	80014a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001490:	2b04      	cmp	r3, #4
 8001492:	d107      	bne.n	80014a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e01a      	b.n	80014de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d194      	bne.n	80013da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2220      	movs	r2, #32
 80014c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2200      	movs	r2, #0
 80014d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80014d8:	2300      	movs	r3, #0
 80014da:	e000      	b.n	80014de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80014dc:	2302      	movs	r3, #2
  }
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3718      	adds	r7, #24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	00100002 	.word	0x00100002
 80014ec:	ffff0000 	.word	0xffff0000

080014f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b088      	sub	sp, #32
 80014f4:	af02      	add	r7, sp, #8
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	607a      	str	r2, [r7, #4]
 80014fa:	603b      	str	r3, [r7, #0]
 80014fc:	460b      	mov	r3, r1
 80014fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001504:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	2b08      	cmp	r3, #8
 800150a:	d006      	beq.n	800151a <I2C_MasterRequestWrite+0x2a>
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d003      	beq.n	800151a <I2C_MasterRequestWrite+0x2a>
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001518:	d108      	bne.n	800152c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	e00b      	b.n	8001544 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001530:	2b12      	cmp	r3, #18
 8001532:	d107      	bne.n	8001544 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001542:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	9300      	str	r3, [sp, #0]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001550:	68f8      	ldr	r0, [r7, #12]
 8001552:	f000 f84f 	bl	80015f4 <I2C_WaitOnFlagUntilTimeout>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d00d      	beq.n	8001578 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800156a:	d103      	bne.n	8001574 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001572:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e035      	b.n	80015e4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	691b      	ldr	r3, [r3, #16]
 800157c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001580:	d108      	bne.n	8001594 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001582:	897b      	ldrh	r3, [r7, #10]
 8001584:	b2db      	uxtb	r3, r3
 8001586:	461a      	mov	r2, r3
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001590:	611a      	str	r2, [r3, #16]
 8001592:	e01b      	b.n	80015cc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001594:	897b      	ldrh	r3, [r7, #10]
 8001596:	11db      	asrs	r3, r3, #7
 8001598:	b2db      	uxtb	r3, r3
 800159a:	f003 0306 	and.w	r3, r3, #6
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	f063 030f 	orn	r3, r3, #15
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	490e      	ldr	r1, [pc, #56]	; (80015ec <I2C_MasterRequestWrite+0xfc>)
 80015b2:	68f8      	ldr	r0, [r7, #12]
 80015b4:	f000 f875 	bl	80016a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e010      	b.n	80015e4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80015c2:	897b      	ldrh	r3, [r7, #10]
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	4907      	ldr	r1, [pc, #28]	; (80015f0 <I2C_MasterRequestWrite+0x100>)
 80015d2:	68f8      	ldr	r0, [r7, #12]
 80015d4:	f000 f865 	bl	80016a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e000      	b.n	80015e4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80015e2:	2300      	movs	r3, #0
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	00010008 	.word	0x00010008
 80015f0:	00010002 	.word	0x00010002

080015f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	603b      	str	r3, [r7, #0]
 8001600:	4613      	mov	r3, r2
 8001602:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001604:	e025      	b.n	8001652 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800160c:	d021      	beq.n	8001652 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800160e:	f7ff fa97 	bl	8000b40 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	683a      	ldr	r2, [r7, #0]
 800161a:	429a      	cmp	r2, r3
 800161c:	d302      	bcc.n	8001624 <I2C_WaitOnFlagUntilTimeout+0x30>
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d116      	bne.n	8001652 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2200      	movs	r2, #0
 8001628:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2220      	movs	r2, #32
 800162e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2200      	movs	r2, #0
 8001636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	f043 0220 	orr.w	r2, r3, #32
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	2200      	movs	r2, #0
 800164a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e023      	b.n	800169a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	0c1b      	lsrs	r3, r3, #16
 8001656:	b2db      	uxtb	r3, r3
 8001658:	2b01      	cmp	r3, #1
 800165a:	d10d      	bne.n	8001678 <I2C_WaitOnFlagUntilTimeout+0x84>
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	43da      	mvns	r2, r3
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	4013      	ands	r3, r2
 8001668:	b29b      	uxth	r3, r3
 800166a:	2b00      	cmp	r3, #0
 800166c:	bf0c      	ite	eq
 800166e:	2301      	moveq	r3, #1
 8001670:	2300      	movne	r3, #0
 8001672:	b2db      	uxtb	r3, r3
 8001674:	461a      	mov	r2, r3
 8001676:	e00c      	b.n	8001692 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	43da      	mvns	r2, r3
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	4013      	ands	r3, r2
 8001684:	b29b      	uxth	r3, r3
 8001686:	2b00      	cmp	r3, #0
 8001688:	bf0c      	ite	eq
 800168a:	2301      	moveq	r3, #1
 800168c:	2300      	movne	r3, #0
 800168e:	b2db      	uxtb	r3, r3
 8001690:	461a      	mov	r2, r3
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	429a      	cmp	r2, r3
 8001696:	d0b6      	beq.n	8001606 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b084      	sub	sp, #16
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	60f8      	str	r0, [r7, #12]
 80016aa:	60b9      	str	r1, [r7, #8]
 80016ac:	607a      	str	r2, [r7, #4]
 80016ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80016b0:	e051      	b.n	8001756 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	695b      	ldr	r3, [r3, #20]
 80016b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016c0:	d123      	bne.n	800170a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80016da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2200      	movs	r2, #0
 80016e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2220      	movs	r2, #32
 80016e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	f043 0204 	orr.w	r2, r3, #4
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2200      	movs	r2, #0
 8001702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e046      	b.n	8001798 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001710:	d021      	beq.n	8001756 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001712:	f7ff fa15 	bl	8000b40 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	429a      	cmp	r2, r3
 8001720:	d302      	bcc.n	8001728 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d116      	bne.n	8001756 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2200      	movs	r2, #0
 800172c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2220      	movs	r2, #32
 8001732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	f043 0220 	orr.w	r2, r3, #32
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e020      	b.n	8001798 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	0c1b      	lsrs	r3, r3, #16
 800175a:	b2db      	uxtb	r3, r3
 800175c:	2b01      	cmp	r3, #1
 800175e:	d10c      	bne.n	800177a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	695b      	ldr	r3, [r3, #20]
 8001766:	43da      	mvns	r2, r3
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	4013      	ands	r3, r2
 800176c:	b29b      	uxth	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	bf14      	ite	ne
 8001772:	2301      	movne	r3, #1
 8001774:	2300      	moveq	r3, #0
 8001776:	b2db      	uxtb	r3, r3
 8001778:	e00b      	b.n	8001792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	43da      	mvns	r2, r3
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	4013      	ands	r3, r2
 8001786:	b29b      	uxth	r3, r3
 8001788:	2b00      	cmp	r3, #0
 800178a:	bf14      	ite	ne
 800178c:	2301      	movne	r3, #1
 800178e:	2300      	moveq	r3, #0
 8001790:	b2db      	uxtb	r3, r3
 8001792:	2b00      	cmp	r3, #0
 8001794:	d18d      	bne.n	80016b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001796:	2300      	movs	r3, #0
}
 8001798:	4618      	mov	r0, r3
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80017ac:	e02d      	b.n	800180a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80017ae:	68f8      	ldr	r0, [r7, #12]
 80017b0:	f000 f878 	bl	80018a4 <I2C_IsAcknowledgeFailed>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e02d      	b.n	800181a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017c4:	d021      	beq.n	800180a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017c6:	f7ff f9bb 	bl	8000b40 <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	68ba      	ldr	r2, [r7, #8]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d302      	bcc.n	80017dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d116      	bne.n	800180a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2200      	movs	r2, #0
 80017e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2220      	movs	r2, #32
 80017e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	f043 0220 	orr.w	r2, r3, #32
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e007      	b.n	800181a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	695b      	ldr	r3, [r3, #20]
 8001810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001814:	2b80      	cmp	r3, #128	; 0x80
 8001816:	d1ca      	bne.n	80017ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b084      	sub	sp, #16
 8001826:	af00      	add	r7, sp, #0
 8001828:	60f8      	str	r0, [r7, #12]
 800182a:	60b9      	str	r1, [r7, #8]
 800182c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800182e:	e02d      	b.n	800188c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001830:	68f8      	ldr	r0, [r7, #12]
 8001832:	f000 f837 	bl	80018a4 <I2C_IsAcknowledgeFailed>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e02d      	b.n	800189c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001846:	d021      	beq.n	800188c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001848:	f7ff f97a 	bl	8000b40 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	68ba      	ldr	r2, [r7, #8]
 8001854:	429a      	cmp	r2, r3
 8001856:	d302      	bcc.n	800185e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d116      	bne.n	800188c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2200      	movs	r2, #0
 8001862:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2220      	movs	r2, #32
 8001868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2200      	movs	r2, #0
 8001870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001878:	f043 0220 	orr.w	r2, r3, #32
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2200      	movs	r2, #0
 8001884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e007      	b.n	800189c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	695b      	ldr	r3, [r3, #20]
 8001892:	f003 0304 	and.w	r3, r3, #4
 8001896:	2b04      	cmp	r3, #4
 8001898:	d1ca      	bne.n	8001830 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800189a:	2300      	movs	r3, #0
}
 800189c:	4618      	mov	r0, r3
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ba:	d11b      	bne.n	80018f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80018c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2220      	movs	r2, #32
 80018d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e0:	f043 0204 	orr.w	r2, r3, #4
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e000      	b.n	80018f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bc80      	pop	{r7}
 80018fe:	4770      	bx	lr

08001900 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d101      	bne.n	8001912 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e272      	b.n	8001df8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	2b00      	cmp	r3, #0
 800191c:	f000 8087 	beq.w	8001a2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001920:	4b92      	ldr	r3, [pc, #584]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f003 030c 	and.w	r3, r3, #12
 8001928:	2b04      	cmp	r3, #4
 800192a:	d00c      	beq.n	8001946 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800192c:	4b8f      	ldr	r3, [pc, #572]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 030c 	and.w	r3, r3, #12
 8001934:	2b08      	cmp	r3, #8
 8001936:	d112      	bne.n	800195e <HAL_RCC_OscConfig+0x5e>
 8001938:	4b8c      	ldr	r3, [pc, #560]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001944:	d10b      	bne.n	800195e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001946:	4b89      	ldr	r3, [pc, #548]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d06c      	beq.n	8001a2c <HAL_RCC_OscConfig+0x12c>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d168      	bne.n	8001a2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e24c      	b.n	8001df8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001966:	d106      	bne.n	8001976 <HAL_RCC_OscConfig+0x76>
 8001968:	4b80      	ldr	r3, [pc, #512]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a7f      	ldr	r2, [pc, #508]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 800196e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001972:	6013      	str	r3, [r2, #0]
 8001974:	e02e      	b.n	80019d4 <HAL_RCC_OscConfig+0xd4>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d10c      	bne.n	8001998 <HAL_RCC_OscConfig+0x98>
 800197e:	4b7b      	ldr	r3, [pc, #492]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a7a      	ldr	r2, [pc, #488]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 8001984:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001988:	6013      	str	r3, [r2, #0]
 800198a:	4b78      	ldr	r3, [pc, #480]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a77      	ldr	r2, [pc, #476]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 8001990:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001994:	6013      	str	r3, [r2, #0]
 8001996:	e01d      	b.n	80019d4 <HAL_RCC_OscConfig+0xd4>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019a0:	d10c      	bne.n	80019bc <HAL_RCC_OscConfig+0xbc>
 80019a2:	4b72      	ldr	r3, [pc, #456]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a71      	ldr	r2, [pc, #452]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 80019a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019ac:	6013      	str	r3, [r2, #0]
 80019ae:	4b6f      	ldr	r3, [pc, #444]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a6e      	ldr	r2, [pc, #440]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 80019b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019b8:	6013      	str	r3, [r2, #0]
 80019ba:	e00b      	b.n	80019d4 <HAL_RCC_OscConfig+0xd4>
 80019bc:	4b6b      	ldr	r3, [pc, #428]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a6a      	ldr	r2, [pc, #424]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 80019c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019c6:	6013      	str	r3, [r2, #0]
 80019c8:	4b68      	ldr	r3, [pc, #416]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a67      	ldr	r2, [pc, #412]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 80019ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d013      	beq.n	8001a04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019dc:	f7ff f8b0 	bl	8000b40 <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019e4:	f7ff f8ac 	bl	8000b40 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b64      	cmp	r3, #100	; 0x64
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e200      	b.n	8001df8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019f6:	4b5d      	ldr	r3, [pc, #372]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d0f0      	beq.n	80019e4 <HAL_RCC_OscConfig+0xe4>
 8001a02:	e014      	b.n	8001a2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a04:	f7ff f89c 	bl	8000b40 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a0c:	f7ff f898 	bl	8000b40 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b64      	cmp	r3, #100	; 0x64
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e1ec      	b.n	8001df8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a1e:	4b53      	ldr	r3, [pc, #332]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f0      	bne.n	8001a0c <HAL_RCC_OscConfig+0x10c>
 8001a2a:	e000      	b.n	8001a2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d063      	beq.n	8001b02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a3a:	4b4c      	ldr	r3, [pc, #304]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f003 030c 	and.w	r3, r3, #12
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d00b      	beq.n	8001a5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a46:	4b49      	ldr	r3, [pc, #292]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f003 030c 	and.w	r3, r3, #12
 8001a4e:	2b08      	cmp	r3, #8
 8001a50:	d11c      	bne.n	8001a8c <HAL_RCC_OscConfig+0x18c>
 8001a52:	4b46      	ldr	r3, [pc, #280]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d116      	bne.n	8001a8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a5e:	4b43      	ldr	r3, [pc, #268]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d005      	beq.n	8001a76 <HAL_RCC_OscConfig+0x176>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d001      	beq.n	8001a76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e1c0      	b.n	8001df8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a76:	4b3d      	ldr	r3, [pc, #244]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	4939      	ldr	r1, [pc, #228]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a8a:	e03a      	b.n	8001b02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d020      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a94:	4b36      	ldr	r3, [pc, #216]	; (8001b70 <HAL_RCC_OscConfig+0x270>)
 8001a96:	2201      	movs	r2, #1
 8001a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9a:	f7ff f851 	bl	8000b40 <HAL_GetTick>
 8001a9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa0:	e008      	b.n	8001ab4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aa2:	f7ff f84d 	bl	8000b40 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e1a1      	b.n	8001df8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab4:	4b2d      	ldr	r3, [pc, #180]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d0f0      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac0:	4b2a      	ldr	r3, [pc, #168]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	695b      	ldr	r3, [r3, #20]
 8001acc:	00db      	lsls	r3, r3, #3
 8001ace:	4927      	ldr	r1, [pc, #156]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	600b      	str	r3, [r1, #0]
 8001ad4:	e015      	b.n	8001b02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ad6:	4b26      	ldr	r3, [pc, #152]	; (8001b70 <HAL_RCC_OscConfig+0x270>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001adc:	f7ff f830 	bl	8000b40 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae4:	f7ff f82c 	bl	8000b40 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e180      	b.n	8001df8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001af6:	4b1d      	ldr	r3, [pc, #116]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1f0      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0308 	and.w	r3, r3, #8
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d03a      	beq.n	8001b84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d019      	beq.n	8001b4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b16:	4b17      	ldr	r3, [pc, #92]	; (8001b74 <HAL_RCC_OscConfig+0x274>)
 8001b18:	2201      	movs	r2, #1
 8001b1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b1c:	f7ff f810 	bl	8000b40 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b24:	f7ff f80c 	bl	8000b40 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e160      	b.n	8001df8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b36:	4b0d      	ldr	r3, [pc, #52]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 8001b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d0f0      	beq.n	8001b24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b42:	2001      	movs	r0, #1
 8001b44:	f000 fac4 	bl	80020d0 <RCC_Delay>
 8001b48:	e01c      	b.n	8001b84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b4a:	4b0a      	ldr	r3, [pc, #40]	; (8001b74 <HAL_RCC_OscConfig+0x274>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b50:	f7fe fff6 	bl	8000b40 <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b56:	e00f      	b.n	8001b78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b58:	f7fe fff2 	bl	8000b40 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d908      	bls.n	8001b78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e146      	b.n	8001df8 <HAL_RCC_OscConfig+0x4f8>
 8001b6a:	bf00      	nop
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	42420000 	.word	0x42420000
 8001b74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b78:	4b92      	ldr	r3, [pc, #584]	; (8001dc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1e9      	bne.n	8001b58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f000 80a6 	beq.w	8001cde <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b92:	2300      	movs	r3, #0
 8001b94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b96:	4b8b      	ldr	r3, [pc, #556]	; (8001dc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d10d      	bne.n	8001bbe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ba2:	4b88      	ldr	r3, [pc, #544]	; (8001dc4 <HAL_RCC_OscConfig+0x4c4>)
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	4a87      	ldr	r2, [pc, #540]	; (8001dc4 <HAL_RCC_OscConfig+0x4c4>)
 8001ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bac:	61d3      	str	r3, [r2, #28]
 8001bae:	4b85      	ldr	r3, [pc, #532]	; (8001dc4 <HAL_RCC_OscConfig+0x4c4>)
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb6:	60bb      	str	r3, [r7, #8]
 8001bb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bbe:	4b82      	ldr	r3, [pc, #520]	; (8001dc8 <HAL_RCC_OscConfig+0x4c8>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d118      	bne.n	8001bfc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bca:	4b7f      	ldr	r3, [pc, #508]	; (8001dc8 <HAL_RCC_OscConfig+0x4c8>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a7e      	ldr	r2, [pc, #504]	; (8001dc8 <HAL_RCC_OscConfig+0x4c8>)
 8001bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bd6:	f7fe ffb3 	bl	8000b40 <HAL_GetTick>
 8001bda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bdc:	e008      	b.n	8001bf0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bde:	f7fe ffaf 	bl	8000b40 <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b64      	cmp	r3, #100	; 0x64
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e103      	b.n	8001df8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf0:	4b75      	ldr	r3, [pc, #468]	; (8001dc8 <HAL_RCC_OscConfig+0x4c8>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d0f0      	beq.n	8001bde <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d106      	bne.n	8001c12 <HAL_RCC_OscConfig+0x312>
 8001c04:	4b6f      	ldr	r3, [pc, #444]	; (8001dc4 <HAL_RCC_OscConfig+0x4c4>)
 8001c06:	6a1b      	ldr	r3, [r3, #32]
 8001c08:	4a6e      	ldr	r2, [pc, #440]	; (8001dc4 <HAL_RCC_OscConfig+0x4c4>)
 8001c0a:	f043 0301 	orr.w	r3, r3, #1
 8001c0e:	6213      	str	r3, [r2, #32]
 8001c10:	e02d      	b.n	8001c6e <HAL_RCC_OscConfig+0x36e>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d10c      	bne.n	8001c34 <HAL_RCC_OscConfig+0x334>
 8001c1a:	4b6a      	ldr	r3, [pc, #424]	; (8001dc4 <HAL_RCC_OscConfig+0x4c4>)
 8001c1c:	6a1b      	ldr	r3, [r3, #32]
 8001c1e:	4a69      	ldr	r2, [pc, #420]	; (8001dc4 <HAL_RCC_OscConfig+0x4c4>)
 8001c20:	f023 0301 	bic.w	r3, r3, #1
 8001c24:	6213      	str	r3, [r2, #32]
 8001c26:	4b67      	ldr	r3, [pc, #412]	; (8001dc4 <HAL_RCC_OscConfig+0x4c4>)
 8001c28:	6a1b      	ldr	r3, [r3, #32]
 8001c2a:	4a66      	ldr	r2, [pc, #408]	; (8001dc4 <HAL_RCC_OscConfig+0x4c4>)
 8001c2c:	f023 0304 	bic.w	r3, r3, #4
 8001c30:	6213      	str	r3, [r2, #32]
 8001c32:	e01c      	b.n	8001c6e <HAL_RCC_OscConfig+0x36e>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	2b05      	cmp	r3, #5
 8001c3a:	d10c      	bne.n	8001c56 <HAL_RCC_OscConfig+0x356>
 8001c3c:	4b61      	ldr	r3, [pc, #388]	; (8001dc4 <HAL_RCC_OscConfig+0x4c4>)
 8001c3e:	6a1b      	ldr	r3, [r3, #32]
 8001c40:	4a60      	ldr	r2, [pc, #384]	; (8001dc4 <HAL_RCC_OscConfig+0x4c4>)
 8001c42:	f043 0304 	orr.w	r3, r3, #4
 8001c46:	6213      	str	r3, [r2, #32]
 8001c48:	4b5e      	ldr	r3, [pc, #376]	; (8001dc4 <HAL_RCC_OscConfig+0x4c4>)
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	4a5d      	ldr	r2, [pc, #372]	; (8001dc4 <HAL_RCC_OscConfig+0x4c4>)
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	6213      	str	r3, [r2, #32]
 8001c54:	e00b      	b.n	8001c6e <HAL_RCC_OscConfig+0x36e>
 8001c56:	4b5b      	ldr	r3, [pc, #364]	; (8001dc4 <HAL_RCC_OscConfig+0x4c4>)
 8001c58:	6a1b      	ldr	r3, [r3, #32]
 8001c5a:	4a5a      	ldr	r2, [pc, #360]	; (8001dc4 <HAL_RCC_OscConfig+0x4c4>)
 8001c5c:	f023 0301 	bic.w	r3, r3, #1
 8001c60:	6213      	str	r3, [r2, #32]
 8001c62:	4b58      	ldr	r3, [pc, #352]	; (8001dc4 <HAL_RCC_OscConfig+0x4c4>)
 8001c64:	6a1b      	ldr	r3, [r3, #32]
 8001c66:	4a57      	ldr	r2, [pc, #348]	; (8001dc4 <HAL_RCC_OscConfig+0x4c4>)
 8001c68:	f023 0304 	bic.w	r3, r3, #4
 8001c6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d015      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c76:	f7fe ff63 	bl	8000b40 <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c7c:	e00a      	b.n	8001c94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c7e:	f7fe ff5f 	bl	8000b40 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e0b1      	b.n	8001df8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c94:	4b4b      	ldr	r3, [pc, #300]	; (8001dc4 <HAL_RCC_OscConfig+0x4c4>)
 8001c96:	6a1b      	ldr	r3, [r3, #32]
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d0ee      	beq.n	8001c7e <HAL_RCC_OscConfig+0x37e>
 8001ca0:	e014      	b.n	8001ccc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca2:	f7fe ff4d 	bl	8000b40 <HAL_GetTick>
 8001ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ca8:	e00a      	b.n	8001cc0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001caa:	f7fe ff49 	bl	8000b40 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e09b      	b.n	8001df8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cc0:	4b40      	ldr	r3, [pc, #256]	; (8001dc4 <HAL_RCC_OscConfig+0x4c4>)
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1ee      	bne.n	8001caa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ccc:	7dfb      	ldrb	r3, [r7, #23]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d105      	bne.n	8001cde <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cd2:	4b3c      	ldr	r3, [pc, #240]	; (8001dc4 <HAL_RCC_OscConfig+0x4c4>)
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	4a3b      	ldr	r2, [pc, #236]	; (8001dc4 <HAL_RCC_OscConfig+0x4c4>)
 8001cd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cdc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f000 8087 	beq.w	8001df6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ce8:	4b36      	ldr	r3, [pc, #216]	; (8001dc4 <HAL_RCC_OscConfig+0x4c4>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f003 030c 	and.w	r3, r3, #12
 8001cf0:	2b08      	cmp	r3, #8
 8001cf2:	d061      	beq.n	8001db8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	69db      	ldr	r3, [r3, #28]
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d146      	bne.n	8001d8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cfc:	4b33      	ldr	r3, [pc, #204]	; (8001dcc <HAL_RCC_OscConfig+0x4cc>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d02:	f7fe ff1d 	bl	8000b40 <HAL_GetTick>
 8001d06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d08:	e008      	b.n	8001d1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d0a:	f7fe ff19 	bl	8000b40 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e06d      	b.n	8001df8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d1c:	4b29      	ldr	r3, [pc, #164]	; (8001dc4 <HAL_RCC_OscConfig+0x4c4>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1f0      	bne.n	8001d0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a1b      	ldr	r3, [r3, #32]
 8001d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d30:	d108      	bne.n	8001d44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d32:	4b24      	ldr	r3, [pc, #144]	; (8001dc4 <HAL_RCC_OscConfig+0x4c4>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	4921      	ldr	r1, [pc, #132]	; (8001dc4 <HAL_RCC_OscConfig+0x4c4>)
 8001d40:	4313      	orrs	r3, r2
 8001d42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d44:	4b1f      	ldr	r3, [pc, #124]	; (8001dc4 <HAL_RCC_OscConfig+0x4c4>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a19      	ldr	r1, [r3, #32]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d54:	430b      	orrs	r3, r1
 8001d56:	491b      	ldr	r1, [pc, #108]	; (8001dc4 <HAL_RCC_OscConfig+0x4c4>)
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d5c:	4b1b      	ldr	r3, [pc, #108]	; (8001dcc <HAL_RCC_OscConfig+0x4cc>)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d62:	f7fe feed 	bl	8000b40 <HAL_GetTick>
 8001d66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d68:	e008      	b.n	8001d7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d6a:	f7fe fee9 	bl	8000b40 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e03d      	b.n	8001df8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d7c:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <HAL_RCC_OscConfig+0x4c4>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d0f0      	beq.n	8001d6a <HAL_RCC_OscConfig+0x46a>
 8001d88:	e035      	b.n	8001df6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d8a:	4b10      	ldr	r3, [pc, #64]	; (8001dcc <HAL_RCC_OscConfig+0x4cc>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d90:	f7fe fed6 	bl	8000b40 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d98:	f7fe fed2 	bl	8000b40 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e026      	b.n	8001df8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001daa:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <HAL_RCC_OscConfig+0x4c4>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1f0      	bne.n	8001d98 <HAL_RCC_OscConfig+0x498>
 8001db6:	e01e      	b.n	8001df6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	69db      	ldr	r3, [r3, #28]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d107      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e019      	b.n	8001df8 <HAL_RCC_OscConfig+0x4f8>
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	40007000 	.word	0x40007000
 8001dcc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001dd0:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <HAL_RCC_OscConfig+0x500>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d106      	bne.n	8001df2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d001      	beq.n	8001df6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e000      	b.n	8001df8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3718      	adds	r7, #24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40021000 	.word	0x40021000

08001e04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e0d0      	b.n	8001fba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e18:	4b6a      	ldr	r3, [pc, #424]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0307 	and.w	r3, r3, #7
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d910      	bls.n	8001e48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e26:	4b67      	ldr	r3, [pc, #412]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f023 0207 	bic.w	r2, r3, #7
 8001e2e:	4965      	ldr	r1, [pc, #404]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e36:	4b63      	ldr	r3, [pc, #396]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d001      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e0b8      	b.n	8001fba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d020      	beq.n	8001e96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d005      	beq.n	8001e6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e60:	4b59      	ldr	r3, [pc, #356]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	4a58      	ldr	r2, [pc, #352]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0308 	and.w	r3, r3, #8
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d005      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e78:	4b53      	ldr	r3, [pc, #332]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	4a52      	ldr	r2, [pc, #328]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e84:	4b50      	ldr	r3, [pc, #320]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	494d      	ldr	r1, [pc, #308]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d040      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d107      	bne.n	8001eba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eaa:	4b47      	ldr	r3, [pc, #284]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d115      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e07f      	b.n	8001fba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d107      	bne.n	8001ed2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ec2:	4b41      	ldr	r3, [pc, #260]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d109      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e073      	b.n	8001fba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed2:	4b3d      	ldr	r3, [pc, #244]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e06b      	b.n	8001fba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ee2:	4b39      	ldr	r3, [pc, #228]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f023 0203 	bic.w	r2, r3, #3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	4936      	ldr	r1, [pc, #216]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ef4:	f7fe fe24 	bl	8000b40 <HAL_GetTick>
 8001ef8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efa:	e00a      	b.n	8001f12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001efc:	f7fe fe20 	bl	8000b40 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e053      	b.n	8001fba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f12:	4b2d      	ldr	r3, [pc, #180]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f003 020c 	and.w	r2, r3, #12
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d1eb      	bne.n	8001efc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f24:	4b27      	ldr	r3, [pc, #156]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d210      	bcs.n	8001f54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f32:	4b24      	ldr	r3, [pc, #144]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f023 0207 	bic.w	r2, r3, #7
 8001f3a:	4922      	ldr	r1, [pc, #136]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f42:	4b20      	ldr	r3, [pc, #128]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d001      	beq.n	8001f54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e032      	b.n	8001fba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0304 	and.w	r3, r3, #4
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d008      	beq.n	8001f72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f60:	4b19      	ldr	r3, [pc, #100]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	4916      	ldr	r1, [pc, #88]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0308 	and.w	r3, r3, #8
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d009      	beq.n	8001f92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f7e:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	490e      	ldr	r1, [pc, #56]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f92:	f000 f821 	bl	8001fd8 <HAL_RCC_GetSysClockFreq>
 8001f96:	4602      	mov	r2, r0
 8001f98:	4b0b      	ldr	r3, [pc, #44]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	091b      	lsrs	r3, r3, #4
 8001f9e:	f003 030f 	and.w	r3, r3, #15
 8001fa2:	490a      	ldr	r1, [pc, #40]	; (8001fcc <HAL_RCC_ClockConfig+0x1c8>)
 8001fa4:	5ccb      	ldrb	r3, [r1, r3]
 8001fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8001faa:	4a09      	ldr	r2, [pc, #36]	; (8001fd0 <HAL_RCC_ClockConfig+0x1cc>)
 8001fac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fae:	4b09      	ldr	r3, [pc, #36]	; (8001fd4 <HAL_RCC_ClockConfig+0x1d0>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7fe fd82 	bl	8000abc <HAL_InitTick>

  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40022000 	.word	0x40022000
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	08004be4 	.word	0x08004be4
 8001fd0:	20000010 	.word	0x20000010
 8001fd4:	20000014 	.word	0x20000014

08001fd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fd8:	b490      	push	{r4, r7}
 8001fda:	b08a      	sub	sp, #40	; 0x28
 8001fdc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001fde:	4b29      	ldr	r3, [pc, #164]	; (8002084 <HAL_RCC_GetSysClockFreq+0xac>)
 8001fe0:	1d3c      	adds	r4, r7, #4
 8001fe2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fe4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001fe8:	f240 2301 	movw	r3, #513	; 0x201
 8001fec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61fb      	str	r3, [r7, #28]
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	61bb      	str	r3, [r7, #24]
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	627b      	str	r3, [r7, #36]	; 0x24
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ffe:	2300      	movs	r3, #0
 8002000:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002002:	4b21      	ldr	r3, [pc, #132]	; (8002088 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	f003 030c 	and.w	r3, r3, #12
 800200e:	2b04      	cmp	r3, #4
 8002010:	d002      	beq.n	8002018 <HAL_RCC_GetSysClockFreq+0x40>
 8002012:	2b08      	cmp	r3, #8
 8002014:	d003      	beq.n	800201e <HAL_RCC_GetSysClockFreq+0x46>
 8002016:	e02b      	b.n	8002070 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002018:	4b1c      	ldr	r3, [pc, #112]	; (800208c <HAL_RCC_GetSysClockFreq+0xb4>)
 800201a:	623b      	str	r3, [r7, #32]
      break;
 800201c:	e02b      	b.n	8002076 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	0c9b      	lsrs	r3, r3, #18
 8002022:	f003 030f 	and.w	r3, r3, #15
 8002026:	3328      	adds	r3, #40	; 0x28
 8002028:	443b      	add	r3, r7
 800202a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800202e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d012      	beq.n	8002060 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800203a:	4b13      	ldr	r3, [pc, #76]	; (8002088 <HAL_RCC_GetSysClockFreq+0xb0>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	0c5b      	lsrs	r3, r3, #17
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	3328      	adds	r3, #40	; 0x28
 8002046:	443b      	add	r3, r7
 8002048:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800204c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	4a0e      	ldr	r2, [pc, #56]	; (800208c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002052:	fb03 f202 	mul.w	r2, r3, r2
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	fbb2 f3f3 	udiv	r3, r2, r3
 800205c:	627b      	str	r3, [r7, #36]	; 0x24
 800205e:	e004      	b.n	800206a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	4a0b      	ldr	r2, [pc, #44]	; (8002090 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002064:	fb02 f303 	mul.w	r3, r2, r3
 8002068:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	623b      	str	r3, [r7, #32]
      break;
 800206e:	e002      	b.n	8002076 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002070:	4b06      	ldr	r3, [pc, #24]	; (800208c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002072:	623b      	str	r3, [r7, #32]
      break;
 8002074:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002076:	6a3b      	ldr	r3, [r7, #32]
}
 8002078:	4618      	mov	r0, r3
 800207a:	3728      	adds	r7, #40	; 0x28
 800207c:	46bd      	mov	sp, r7
 800207e:	bc90      	pop	{r4, r7}
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	08004b98 	.word	0x08004b98
 8002088:	40021000 	.word	0x40021000
 800208c:	007a1200 	.word	0x007a1200
 8002090:	003d0900 	.word	0x003d0900

08002094 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002098:	4b02      	ldr	r3, [pc, #8]	; (80020a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800209a:	681b      	ldr	r3, [r3, #0]
}
 800209c:	4618      	mov	r0, r3
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr
 80020a4:	20000010 	.word	0x20000010

080020a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020ac:	f7ff fff2 	bl	8002094 <HAL_RCC_GetHCLKFreq>
 80020b0:	4602      	mov	r2, r0
 80020b2:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	0a1b      	lsrs	r3, r3, #8
 80020b8:	f003 0307 	and.w	r3, r3, #7
 80020bc:	4903      	ldr	r1, [pc, #12]	; (80020cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80020be:	5ccb      	ldrb	r3, [r1, r3]
 80020c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40021000 	.word	0x40021000
 80020cc:	08004bf4 	.word	0x08004bf4

080020d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020d8:	4b0a      	ldr	r3, [pc, #40]	; (8002104 <RCC_Delay+0x34>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a0a      	ldr	r2, [pc, #40]	; (8002108 <RCC_Delay+0x38>)
 80020de:	fba2 2303 	umull	r2, r3, r2, r3
 80020e2:	0a5b      	lsrs	r3, r3, #9
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	fb02 f303 	mul.w	r3, r2, r3
 80020ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020ec:	bf00      	nop
  }
  while (Delay --);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	1e5a      	subs	r2, r3, #1
 80020f2:	60fa      	str	r2, [r7, #12]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1f9      	bne.n	80020ec <RCC_Delay+0x1c>
}
 80020f8:	bf00      	nop
 80020fa:	bf00      	nop
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	bc80      	pop	{r7}
 8002102:	4770      	bx	lr
 8002104:	20000010 	.word	0x20000010
 8002108:	10624dd3 	.word	0x10624dd3

0800210c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002112:	f3ef 8305 	mrs	r3, IPSR
 8002116:	60bb      	str	r3, [r7, #8]
  return(result);
 8002118:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10f      	bne.n	800213e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800211e:	f3ef 8310 	mrs	r3, PRIMASK
 8002122:	607b      	str	r3, [r7, #4]
  return(result);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d109      	bne.n	800213e <osKernelInitialize+0x32>
 800212a:	4b10      	ldr	r3, [pc, #64]	; (800216c <osKernelInitialize+0x60>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2b02      	cmp	r3, #2
 8002130:	d109      	bne.n	8002146 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002132:	f3ef 8311 	mrs	r3, BASEPRI
 8002136:	603b      	str	r3, [r7, #0]
  return(result);
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800213e:	f06f 0305 	mvn.w	r3, #5
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	e00c      	b.n	8002160 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002146:	4b09      	ldr	r3, [pc, #36]	; (800216c <osKernelInitialize+0x60>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d105      	bne.n	800215a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800214e:	4b07      	ldr	r3, [pc, #28]	; (800216c <osKernelInitialize+0x60>)
 8002150:	2201      	movs	r2, #1
 8002152:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002154:	2300      	movs	r3, #0
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	e002      	b.n	8002160 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800215a:	f04f 33ff 	mov.w	r3, #4294967295
 800215e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002160:	68fb      	ldr	r3, [r7, #12]
}
 8002162:	4618      	mov	r0, r3
 8002164:	3714      	adds	r7, #20
 8002166:	46bd      	mov	sp, r7
 8002168:	bc80      	pop	{r7}
 800216a:	4770      	bx	lr
 800216c:	200000a0 	.word	0x200000a0

08002170 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002176:	f3ef 8305 	mrs	r3, IPSR
 800217a:	60bb      	str	r3, [r7, #8]
  return(result);
 800217c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800217e:	2b00      	cmp	r3, #0
 8002180:	d10f      	bne.n	80021a2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002182:	f3ef 8310 	mrs	r3, PRIMASK
 8002186:	607b      	str	r3, [r7, #4]
  return(result);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d109      	bne.n	80021a2 <osKernelStart+0x32>
 800218e:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <osKernelStart+0x64>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2b02      	cmp	r3, #2
 8002194:	d109      	bne.n	80021aa <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002196:	f3ef 8311 	mrs	r3, BASEPRI
 800219a:	603b      	str	r3, [r7, #0]
  return(result);
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <osKernelStart+0x3a>
    stat = osErrorISR;
 80021a2:	f06f 0305 	mvn.w	r3, #5
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	e00e      	b.n	80021c8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80021aa:	4b0a      	ldr	r3, [pc, #40]	; (80021d4 <osKernelStart+0x64>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d107      	bne.n	80021c2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80021b2:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <osKernelStart+0x64>)
 80021b4:	2202      	movs	r2, #2
 80021b6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80021b8:	f001 f816 	bl	80031e8 <vTaskStartScheduler>
      stat = osOK;
 80021bc:	2300      	movs	r3, #0
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	e002      	b.n	80021c8 <osKernelStart+0x58>
    } else {
      stat = osError;
 80021c2:	f04f 33ff 	mov.w	r3, #4294967295
 80021c6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80021c8:	68fb      	ldr	r3, [r7, #12]
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	200000a0 	.word	0x200000a0

080021d8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80021d8:	b580      	push	{r7, lr}
 80021da:	b092      	sub	sp, #72	; 0x48
 80021dc:	af04      	add	r7, sp, #16
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021e8:	f3ef 8305 	mrs	r3, IPSR
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f040 8094 	bne.w	800231e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021f6:	f3ef 8310 	mrs	r3, PRIMASK
 80021fa:	623b      	str	r3, [r7, #32]
  return(result);
 80021fc:	6a3b      	ldr	r3, [r7, #32]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f040 808d 	bne.w	800231e <osThreadNew+0x146>
 8002204:	4b48      	ldr	r3, [pc, #288]	; (8002328 <osThreadNew+0x150>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2b02      	cmp	r3, #2
 800220a:	d106      	bne.n	800221a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800220c:	f3ef 8311 	mrs	r3, BASEPRI
 8002210:	61fb      	str	r3, [r7, #28]
  return(result);
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	2b00      	cmp	r3, #0
 8002216:	f040 8082 	bne.w	800231e <osThreadNew+0x146>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d07e      	beq.n	800231e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002220:	2380      	movs	r3, #128	; 0x80
 8002222:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002224:	2318      	movs	r3, #24
 8002226:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002228:	2300      	movs	r3, #0
 800222a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800222c:	f107 031b 	add.w	r3, r7, #27
 8002230:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002232:	f04f 33ff 	mov.w	r3, #4294967295
 8002236:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d045      	beq.n	80022ca <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d002      	beq.n	800224c <osThreadNew+0x74>
        name = attr->name;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d002      	beq.n	800225a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800225a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800225c:	2b00      	cmp	r3, #0
 800225e:	d008      	beq.n	8002272 <osThreadNew+0x9a>
 8002260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002262:	2b38      	cmp	r3, #56	; 0x38
 8002264:	d805      	bhi.n	8002272 <osThreadNew+0x9a>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <osThreadNew+0x9e>
        return (NULL);
 8002272:	2300      	movs	r3, #0
 8002274:	e054      	b.n	8002320 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	089b      	lsrs	r3, r3, #2
 8002284:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00e      	beq.n	80022ac <osThreadNew+0xd4>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	2b5b      	cmp	r3, #91	; 0x5b
 8002294:	d90a      	bls.n	80022ac <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800229a:	2b00      	cmp	r3, #0
 800229c:	d006      	beq.n	80022ac <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d002      	beq.n	80022ac <osThreadNew+0xd4>
        mem = 1;
 80022a6:	2301      	movs	r3, #1
 80022a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80022aa:	e010      	b.n	80022ce <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d10c      	bne.n	80022ce <osThreadNew+0xf6>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d108      	bne.n	80022ce <osThreadNew+0xf6>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d104      	bne.n	80022ce <osThreadNew+0xf6>
          mem = 0;
 80022c4:	2300      	movs	r3, #0
 80022c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80022c8:	e001      	b.n	80022ce <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80022ca:	2300      	movs	r3, #0
 80022cc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80022ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d110      	bne.n	80022f6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80022dc:	9202      	str	r2, [sp, #8]
 80022de:	9301      	str	r3, [sp, #4]
 80022e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022e8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f000 fde4 	bl	8002eb8 <xTaskCreateStatic>
 80022f0:	4603      	mov	r3, r0
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	e013      	b.n	800231e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80022f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d110      	bne.n	800231e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80022fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022fe:	b29a      	uxth	r2, r3
 8002300:	f107 0314 	add.w	r3, r7, #20
 8002304:	9301      	str	r3, [sp, #4]
 8002306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800230e:	68f8      	ldr	r0, [r7, #12]
 8002310:	f000 fe2e 	bl	8002f70 <xTaskCreate>
 8002314:	4603      	mov	r3, r0
 8002316:	2b01      	cmp	r3, #1
 8002318:	d001      	beq.n	800231e <osThreadNew+0x146>
          hTask = NULL;
 800231a:	2300      	movs	r3, #0
 800231c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800231e:	697b      	ldr	r3, [r7, #20]
}
 8002320:	4618      	mov	r0, r3
 8002322:	3738      	adds	r7, #56	; 0x38
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	200000a0 	.word	0x200000a0

0800232c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4a06      	ldr	r2, [pc, #24]	; (8002354 <vApplicationGetIdleTaskMemory+0x28>)
 800233c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	4a05      	ldr	r2, [pc, #20]	; (8002358 <vApplicationGetIdleTaskMemory+0x2c>)
 8002342:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2280      	movs	r2, #128	; 0x80
 8002348:	601a      	str	r2, [r3, #0]
}
 800234a:	bf00      	nop
 800234c:	3714      	adds	r7, #20
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr
 8002354:	200000a4 	.word	0x200000a4
 8002358:	20000100 	.word	0x20000100

0800235c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	4a07      	ldr	r2, [pc, #28]	; (8002388 <vApplicationGetTimerTaskMemory+0x2c>)
 800236c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	4a06      	ldr	r2, [pc, #24]	; (800238c <vApplicationGetTimerTaskMemory+0x30>)
 8002372:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f44f 7280 	mov.w	r2, #256	; 0x100
 800237a:	601a      	str	r2, [r3, #0]
}
 800237c:	bf00      	nop
 800237e:	3714      	adds	r7, #20
 8002380:	46bd      	mov	sp, r7
 8002382:	bc80      	pop	{r7}
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	20000300 	.word	0x20000300
 800238c:	2000035c 	.word	0x2000035c

08002390 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f103 0208 	add.w	r2, r3, #8
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f04f 32ff 	mov.w	r2, #4294967295
 80023a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f103 0208 	add.w	r2, r3, #8
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f103 0208 	add.w	r2, r3, #8
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bc80      	pop	{r7}
 80023cc:	4770      	bx	lr

080023ce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80023ce:	b480      	push	{r7}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bc80      	pop	{r7}
 80023e4:	4770      	bx	lr

080023e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80023e6:	b480      	push	{r7}
 80023e8:	b085      	sub	sp, #20
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
 80023ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	1c5a      	adds	r2, r3, #1
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	601a      	str	r2, [r3, #0]
}
 8002422:	bf00      	nop
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr

0800242c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002442:	d103      	bne.n	800244c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	e00c      	b.n	8002466 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3308      	adds	r3, #8
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	e002      	b.n	800245a <vListInsert+0x2e>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68ba      	ldr	r2, [r7, #8]
 8002462:	429a      	cmp	r2, r3
 8002464:	d2f6      	bcs.n	8002454 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	685a      	ldr	r2, [r3, #4]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	1c5a      	adds	r2, r3, #1
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	601a      	str	r2, [r3, #0]
}
 8002492:	bf00      	nop
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr

0800249c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	6892      	ldr	r2, [r2, #8]
 80024b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	6852      	ldr	r2, [r2, #4]
 80024bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d103      	bne.n	80024d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	1e5a      	subs	r2, r3, #1
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3714      	adds	r7, #20
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bc80      	pop	{r7}
 80024ec:	4770      	bx	lr
	...

080024f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10a      	bne.n	800251a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002508:	f383 8811 	msr	BASEPRI, r3
 800250c:	f3bf 8f6f 	isb	sy
 8002510:	f3bf 8f4f 	dsb	sy
 8002514:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002516:	bf00      	nop
 8002518:	e7fe      	b.n	8002518 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800251a:	f001 ff97 	bl	800444c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002526:	68f9      	ldr	r1, [r7, #12]
 8002528:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800252a:	fb01 f303 	mul.w	r3, r1, r3
 800252e:	441a      	add	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800254a:	3b01      	subs	r3, #1
 800254c:	68f9      	ldr	r1, [r7, #12]
 800254e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002550:	fb01 f303 	mul.w	r3, r1, r3
 8002554:	441a      	add	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	22ff      	movs	r2, #255	; 0xff
 800255e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	22ff      	movs	r2, #255	; 0xff
 8002566:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d114      	bne.n	800259a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d01a      	beq.n	80025ae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	3310      	adds	r3, #16
 800257c:	4618      	mov	r0, r3
 800257e:	f001 f8bd 	bl	80036fc <xTaskRemoveFromEventList>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d012      	beq.n	80025ae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002588:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <xQueueGenericReset+0xcc>)
 800258a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	f3bf 8f4f 	dsb	sy
 8002594:	f3bf 8f6f 	isb	sy
 8002598:	e009      	b.n	80025ae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	3310      	adds	r3, #16
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff fef6 	bl	8002390 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	3324      	adds	r3, #36	; 0x24
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff fef1 	bl	8002390 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80025ae:	f001 ff7d 	bl	80044ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80025b2:	2301      	movs	r3, #1
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3710      	adds	r7, #16
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	e000ed04 	.word	0xe000ed04

080025c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b08e      	sub	sp, #56	; 0x38
 80025c4:	af02      	add	r7, sp, #8
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
 80025cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d10a      	bne.n	80025ea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80025d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025d8:	f383 8811 	msr	BASEPRI, r3
 80025dc:	f3bf 8f6f 	isb	sy
 80025e0:	f3bf 8f4f 	dsb	sy
 80025e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80025e6:	bf00      	nop
 80025e8:	e7fe      	b.n	80025e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d10a      	bne.n	8002606 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80025f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f4:	f383 8811 	msr	BASEPRI, r3
 80025f8:	f3bf 8f6f 	isb	sy
 80025fc:	f3bf 8f4f 	dsb	sy
 8002600:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002602:	bf00      	nop
 8002604:	e7fe      	b.n	8002604 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d002      	beq.n	8002612 <xQueueGenericCreateStatic+0x52>
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <xQueueGenericCreateStatic+0x56>
 8002612:	2301      	movs	r3, #1
 8002614:	e000      	b.n	8002618 <xQueueGenericCreateStatic+0x58>
 8002616:	2300      	movs	r3, #0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d10a      	bne.n	8002632 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800261c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002620:	f383 8811 	msr	BASEPRI, r3
 8002624:	f3bf 8f6f 	isb	sy
 8002628:	f3bf 8f4f 	dsb	sy
 800262c:	623b      	str	r3, [r7, #32]
}
 800262e:	bf00      	nop
 8002630:	e7fe      	b.n	8002630 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d102      	bne.n	800263e <xQueueGenericCreateStatic+0x7e>
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <xQueueGenericCreateStatic+0x82>
 800263e:	2301      	movs	r3, #1
 8002640:	e000      	b.n	8002644 <xQueueGenericCreateStatic+0x84>
 8002642:	2300      	movs	r3, #0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d10a      	bne.n	800265e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800264c:	f383 8811 	msr	BASEPRI, r3
 8002650:	f3bf 8f6f 	isb	sy
 8002654:	f3bf 8f4f 	dsb	sy
 8002658:	61fb      	str	r3, [r7, #28]
}
 800265a:	bf00      	nop
 800265c:	e7fe      	b.n	800265c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800265e:	2350      	movs	r3, #80	; 0x50
 8002660:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	2b50      	cmp	r3, #80	; 0x50
 8002666:	d00a      	beq.n	800267e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800266c:	f383 8811 	msr	BASEPRI, r3
 8002670:	f3bf 8f6f 	isb	sy
 8002674:	f3bf 8f4f 	dsb	sy
 8002678:	61bb      	str	r3, [r7, #24]
}
 800267a:	bf00      	nop
 800267c:	e7fe      	b.n	800267c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00d      	beq.n	80026a4 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002690:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002696:	9300      	str	r3, [sp, #0]
 8002698:	4613      	mov	r3, r2
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	68b9      	ldr	r1, [r7, #8]
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f000 f805 	bl	80026ae <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80026a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3730      	adds	r7, #48	; 0x30
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b084      	sub	sp, #16
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	60f8      	str	r0, [r7, #12]
 80026b6:	60b9      	str	r1, [r7, #8]
 80026b8:	607a      	str	r2, [r7, #4]
 80026ba:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d103      	bne.n	80026ca <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	e002      	b.n	80026d0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	68ba      	ldr	r2, [r7, #8]
 80026da:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80026dc:	2101      	movs	r1, #1
 80026de:	69b8      	ldr	r0, [r7, #24]
 80026e0:	f7ff ff06 	bl	80024f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	78fa      	ldrb	r2, [r7, #3]
 80026e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80026ec:	bf00      	nop
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b08e      	sub	sp, #56	; 0x38
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
 8002700:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002702:	2300      	movs	r3, #0
 8002704:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800270a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800270c:	2b00      	cmp	r3, #0
 800270e:	d10a      	bne.n	8002726 <xQueueGenericSend+0x32>
	__asm volatile
 8002710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002714:	f383 8811 	msr	BASEPRI, r3
 8002718:	f3bf 8f6f 	isb	sy
 800271c:	f3bf 8f4f 	dsb	sy
 8002720:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002722:	bf00      	nop
 8002724:	e7fe      	b.n	8002724 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d103      	bne.n	8002734 <xQueueGenericSend+0x40>
 800272c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800272e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002730:	2b00      	cmp	r3, #0
 8002732:	d101      	bne.n	8002738 <xQueueGenericSend+0x44>
 8002734:	2301      	movs	r3, #1
 8002736:	e000      	b.n	800273a <xQueueGenericSend+0x46>
 8002738:	2300      	movs	r3, #0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10a      	bne.n	8002754 <xQueueGenericSend+0x60>
	__asm volatile
 800273e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002742:	f383 8811 	msr	BASEPRI, r3
 8002746:	f3bf 8f6f 	isb	sy
 800274a:	f3bf 8f4f 	dsb	sy
 800274e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002750:	bf00      	nop
 8002752:	e7fe      	b.n	8002752 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	2b02      	cmp	r3, #2
 8002758:	d103      	bne.n	8002762 <xQueueGenericSend+0x6e>
 800275a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800275c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800275e:	2b01      	cmp	r3, #1
 8002760:	d101      	bne.n	8002766 <xQueueGenericSend+0x72>
 8002762:	2301      	movs	r3, #1
 8002764:	e000      	b.n	8002768 <xQueueGenericSend+0x74>
 8002766:	2300      	movs	r3, #0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d10a      	bne.n	8002782 <xQueueGenericSend+0x8e>
	__asm volatile
 800276c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002770:	f383 8811 	msr	BASEPRI, r3
 8002774:	f3bf 8f6f 	isb	sy
 8002778:	f3bf 8f4f 	dsb	sy
 800277c:	623b      	str	r3, [r7, #32]
}
 800277e:	bf00      	nop
 8002780:	e7fe      	b.n	8002780 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002782:	f001 f97d 	bl	8003a80 <xTaskGetSchedulerState>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d102      	bne.n	8002792 <xQueueGenericSend+0x9e>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <xQueueGenericSend+0xa2>
 8002792:	2301      	movs	r3, #1
 8002794:	e000      	b.n	8002798 <xQueueGenericSend+0xa4>
 8002796:	2300      	movs	r3, #0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d10a      	bne.n	80027b2 <xQueueGenericSend+0xbe>
	__asm volatile
 800279c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a0:	f383 8811 	msr	BASEPRI, r3
 80027a4:	f3bf 8f6f 	isb	sy
 80027a8:	f3bf 8f4f 	dsb	sy
 80027ac:	61fb      	str	r3, [r7, #28]
}
 80027ae:	bf00      	nop
 80027b0:	e7fe      	b.n	80027b0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80027b2:	f001 fe4b 	bl	800444c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80027b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027be:	429a      	cmp	r2, r3
 80027c0:	d302      	bcc.n	80027c8 <xQueueGenericSend+0xd4>
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d129      	bne.n	800281c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	68b9      	ldr	r1, [r7, #8]
 80027cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027ce:	f000 fa07 	bl	8002be0 <prvCopyDataToQueue>
 80027d2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d010      	beq.n	80027fe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027de:	3324      	adds	r3, #36	; 0x24
 80027e0:	4618      	mov	r0, r3
 80027e2:	f000 ff8b 	bl	80036fc <xTaskRemoveFromEventList>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d013      	beq.n	8002814 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80027ec:	4b3f      	ldr	r3, [pc, #252]	; (80028ec <xQueueGenericSend+0x1f8>)
 80027ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	f3bf 8f4f 	dsb	sy
 80027f8:	f3bf 8f6f 	isb	sy
 80027fc:	e00a      	b.n	8002814 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80027fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002800:	2b00      	cmp	r3, #0
 8002802:	d007      	beq.n	8002814 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002804:	4b39      	ldr	r3, [pc, #228]	; (80028ec <xQueueGenericSend+0x1f8>)
 8002806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	f3bf 8f4f 	dsb	sy
 8002810:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002814:	f001 fe4a 	bl	80044ac <vPortExitCritical>
				return pdPASS;
 8002818:	2301      	movs	r3, #1
 800281a:	e063      	b.n	80028e4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d103      	bne.n	800282a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002822:	f001 fe43 	bl	80044ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002826:	2300      	movs	r3, #0
 8002828:	e05c      	b.n	80028e4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800282a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800282c:	2b00      	cmp	r3, #0
 800282e:	d106      	bne.n	800283e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002830:	f107 0314 	add.w	r3, r7, #20
 8002834:	4618      	mov	r0, r3
 8002836:	f000 ffc5 	bl	80037c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800283a:	2301      	movs	r3, #1
 800283c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800283e:	f001 fe35 	bl	80044ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002842:	f000 fd37 	bl	80032b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002846:	f001 fe01 	bl	800444c <vPortEnterCritical>
 800284a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800284c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002850:	b25b      	sxtb	r3, r3
 8002852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002856:	d103      	bne.n	8002860 <xQueueGenericSend+0x16c>
 8002858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002862:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002866:	b25b      	sxtb	r3, r3
 8002868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800286c:	d103      	bne.n	8002876 <xQueueGenericSend+0x182>
 800286e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002876:	f001 fe19 	bl	80044ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800287a:	1d3a      	adds	r2, r7, #4
 800287c:	f107 0314 	add.w	r3, r7, #20
 8002880:	4611      	mov	r1, r2
 8002882:	4618      	mov	r0, r3
 8002884:	f000 ffb4 	bl	80037f0 <xTaskCheckForTimeOut>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d124      	bne.n	80028d8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800288e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002890:	f000 fa9e 	bl	8002dd0 <prvIsQueueFull>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d018      	beq.n	80028cc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800289a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800289c:	3310      	adds	r3, #16
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	4611      	mov	r1, r2
 80028a2:	4618      	mov	r0, r3
 80028a4:	f000 feda 	bl	800365c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80028a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028aa:	f000 fa29 	bl	8002d00 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80028ae:	f000 fd0f 	bl	80032d0 <xTaskResumeAll>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f47f af7c 	bne.w	80027b2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80028ba:	4b0c      	ldr	r3, [pc, #48]	; (80028ec <xQueueGenericSend+0x1f8>)
 80028bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	f3bf 8f4f 	dsb	sy
 80028c6:	f3bf 8f6f 	isb	sy
 80028ca:	e772      	b.n	80027b2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80028cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028ce:	f000 fa17 	bl	8002d00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80028d2:	f000 fcfd 	bl	80032d0 <xTaskResumeAll>
 80028d6:	e76c      	b.n	80027b2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80028d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028da:	f000 fa11 	bl	8002d00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80028de:	f000 fcf7 	bl	80032d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80028e2:	2300      	movs	r3, #0
		}
	}
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3738      	adds	r7, #56	; 0x38
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	e000ed04 	.word	0xe000ed04

080028f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b08e      	sub	sp, #56	; 0x38
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
 80028fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10a      	bne.n	800291e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800290c:	f383 8811 	msr	BASEPRI, r3
 8002910:	f3bf 8f6f 	isb	sy
 8002914:	f3bf 8f4f 	dsb	sy
 8002918:	627b      	str	r3, [r7, #36]	; 0x24
}
 800291a:	bf00      	nop
 800291c:	e7fe      	b.n	800291c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d103      	bne.n	800292c <xQueueGenericSendFromISR+0x3c>
 8002924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002928:	2b00      	cmp	r3, #0
 800292a:	d101      	bne.n	8002930 <xQueueGenericSendFromISR+0x40>
 800292c:	2301      	movs	r3, #1
 800292e:	e000      	b.n	8002932 <xQueueGenericSendFromISR+0x42>
 8002930:	2300      	movs	r3, #0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d10a      	bne.n	800294c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800293a:	f383 8811 	msr	BASEPRI, r3
 800293e:	f3bf 8f6f 	isb	sy
 8002942:	f3bf 8f4f 	dsb	sy
 8002946:	623b      	str	r3, [r7, #32]
}
 8002948:	bf00      	nop
 800294a:	e7fe      	b.n	800294a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	2b02      	cmp	r3, #2
 8002950:	d103      	bne.n	800295a <xQueueGenericSendFromISR+0x6a>
 8002952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002956:	2b01      	cmp	r3, #1
 8002958:	d101      	bne.n	800295e <xQueueGenericSendFromISR+0x6e>
 800295a:	2301      	movs	r3, #1
 800295c:	e000      	b.n	8002960 <xQueueGenericSendFromISR+0x70>
 800295e:	2300      	movs	r3, #0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d10a      	bne.n	800297a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002968:	f383 8811 	msr	BASEPRI, r3
 800296c:	f3bf 8f6f 	isb	sy
 8002970:	f3bf 8f4f 	dsb	sy
 8002974:	61fb      	str	r3, [r7, #28]
}
 8002976:	bf00      	nop
 8002978:	e7fe      	b.n	8002978 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800297a:	f001 fe29 	bl	80045d0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800297e:	f3ef 8211 	mrs	r2, BASEPRI
 8002982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002986:	f383 8811 	msr	BASEPRI, r3
 800298a:	f3bf 8f6f 	isb	sy
 800298e:	f3bf 8f4f 	dsb	sy
 8002992:	61ba      	str	r2, [r7, #24]
 8002994:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002996:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002998:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800299a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800299e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d302      	bcc.n	80029ac <xQueueGenericSendFromISR+0xbc>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d12c      	bne.n	8002a06 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80029ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	68b9      	ldr	r1, [r7, #8]
 80029ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029bc:	f000 f910 	bl	8002be0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80029c0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80029c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c8:	d112      	bne.n	80029f0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d016      	beq.n	8002a00 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d4:	3324      	adds	r3, #36	; 0x24
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 fe90 	bl	80036fc <xTaskRemoveFromEventList>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00e      	beq.n	8002a00 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d00b      	beq.n	8002a00 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	e007      	b.n	8002a00 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80029f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80029f4:	3301      	adds	r3, #1
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	b25a      	sxtb	r2, r3
 80029fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002a00:	2301      	movs	r3, #1
 8002a02:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002a04:	e001      	b.n	8002a0a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002a06:	2300      	movs	r3, #0
 8002a08:	637b      	str	r3, [r7, #52]	; 0x34
 8002a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a0c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002a14:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3738      	adds	r7, #56	; 0x38
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b08c      	sub	sp, #48	; 0x30
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d10a      	bne.n	8002a50 <xQueueReceive+0x30>
	__asm volatile
 8002a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a3e:	f383 8811 	msr	BASEPRI, r3
 8002a42:	f3bf 8f6f 	isb	sy
 8002a46:	f3bf 8f4f 	dsb	sy
 8002a4a:	623b      	str	r3, [r7, #32]
}
 8002a4c:	bf00      	nop
 8002a4e:	e7fe      	b.n	8002a4e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d103      	bne.n	8002a5e <xQueueReceive+0x3e>
 8002a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <xQueueReceive+0x42>
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e000      	b.n	8002a64 <xQueueReceive+0x44>
 8002a62:	2300      	movs	r3, #0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d10a      	bne.n	8002a7e <xQueueReceive+0x5e>
	__asm volatile
 8002a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a6c:	f383 8811 	msr	BASEPRI, r3
 8002a70:	f3bf 8f6f 	isb	sy
 8002a74:	f3bf 8f4f 	dsb	sy
 8002a78:	61fb      	str	r3, [r7, #28]
}
 8002a7a:	bf00      	nop
 8002a7c:	e7fe      	b.n	8002a7c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a7e:	f000 ffff 	bl	8003a80 <xTaskGetSchedulerState>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d102      	bne.n	8002a8e <xQueueReceive+0x6e>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <xQueueReceive+0x72>
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e000      	b.n	8002a94 <xQueueReceive+0x74>
 8002a92:	2300      	movs	r3, #0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10a      	bne.n	8002aae <xQueueReceive+0x8e>
	__asm volatile
 8002a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a9c:	f383 8811 	msr	BASEPRI, r3
 8002aa0:	f3bf 8f6f 	isb	sy
 8002aa4:	f3bf 8f4f 	dsb	sy
 8002aa8:	61bb      	str	r3, [r7, #24]
}
 8002aaa:	bf00      	nop
 8002aac:	e7fe      	b.n	8002aac <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002aae:	f001 fccd 	bl	800444c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d01f      	beq.n	8002afe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002abe:	68b9      	ldr	r1, [r7, #8]
 8002ac0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ac2:	f000 f8f7 	bl	8002cb4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac8:	1e5a      	subs	r2, r3, #1
 8002aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002acc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00f      	beq.n	8002af6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad8:	3310      	adds	r3, #16
 8002ada:	4618      	mov	r0, r3
 8002adc:	f000 fe0e 	bl	80036fc <xTaskRemoveFromEventList>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d007      	beq.n	8002af6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002ae6:	4b3d      	ldr	r3, [pc, #244]	; (8002bdc <xQueueReceive+0x1bc>)
 8002ae8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	f3bf 8f4f 	dsb	sy
 8002af2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002af6:	f001 fcd9 	bl	80044ac <vPortExitCritical>
				return pdPASS;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e069      	b.n	8002bd2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d103      	bne.n	8002b0c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002b04:	f001 fcd2 	bl	80044ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	e062      	b.n	8002bd2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d106      	bne.n	8002b20 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b12:	f107 0310 	add.w	r3, r7, #16
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 fe54 	bl	80037c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b20:	f001 fcc4 	bl	80044ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b24:	f000 fbc6 	bl	80032b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b28:	f001 fc90 	bl	800444c <vPortEnterCritical>
 8002b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b32:	b25b      	sxtb	r3, r3
 8002b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b38:	d103      	bne.n	8002b42 <xQueueReceive+0x122>
 8002b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b48:	b25b      	sxtb	r3, r3
 8002b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b4e:	d103      	bne.n	8002b58 <xQueueReceive+0x138>
 8002b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b58:	f001 fca8 	bl	80044ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b5c:	1d3a      	adds	r2, r7, #4
 8002b5e:	f107 0310 	add.w	r3, r7, #16
 8002b62:	4611      	mov	r1, r2
 8002b64:	4618      	mov	r0, r3
 8002b66:	f000 fe43 	bl	80037f0 <xTaskCheckForTimeOut>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d123      	bne.n	8002bb8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b72:	f000 f917 	bl	8002da4 <prvIsQueueEmpty>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d017      	beq.n	8002bac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7e:	3324      	adds	r3, #36	; 0x24
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	4611      	mov	r1, r2
 8002b84:	4618      	mov	r0, r3
 8002b86:	f000 fd69 	bl	800365c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002b8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b8c:	f000 f8b8 	bl	8002d00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002b90:	f000 fb9e 	bl	80032d0 <xTaskResumeAll>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d189      	bne.n	8002aae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002b9a:	4b10      	ldr	r3, [pc, #64]	; (8002bdc <xQueueReceive+0x1bc>)
 8002b9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ba0:	601a      	str	r2, [r3, #0]
 8002ba2:	f3bf 8f4f 	dsb	sy
 8002ba6:	f3bf 8f6f 	isb	sy
 8002baa:	e780      	b.n	8002aae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002bac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bae:	f000 f8a7 	bl	8002d00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002bb2:	f000 fb8d 	bl	80032d0 <xTaskResumeAll>
 8002bb6:	e77a      	b.n	8002aae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002bb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bba:	f000 f8a1 	bl	8002d00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002bbe:	f000 fb87 	bl	80032d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002bc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bc4:	f000 f8ee 	bl	8002da4 <prvIsQueueEmpty>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f43f af6f 	beq.w	8002aae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002bd0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3730      	adds	r7, #48	; 0x30
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	e000ed04 	.word	0xe000ed04

08002be0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002bec:	2300      	movs	r3, #0
 8002bee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10d      	bne.n	8002c1a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d14d      	bne.n	8002ca2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 ff56 	bl	8003abc <xTaskPriorityDisinherit>
 8002c10:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	605a      	str	r2, [r3, #4]
 8002c18:	e043      	b.n	8002ca2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d119      	bne.n	8002c54 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6898      	ldr	r0, [r3, #8]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c28:	461a      	mov	r2, r3
 8002c2a:	68b9      	ldr	r1, [r7, #8]
 8002c2c:	f001 ff24 	bl	8004a78 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c38:	441a      	add	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	689a      	ldr	r2, [r3, #8]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d32b      	bcc.n	8002ca2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	609a      	str	r2, [r3, #8]
 8002c52:	e026      	b.n	8002ca2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	68d8      	ldr	r0, [r3, #12]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	68b9      	ldr	r1, [r7, #8]
 8002c60:	f001 ff0a 	bl	8004a78 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	68da      	ldr	r2, [r3, #12]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6c:	425b      	negs	r3, r3
 8002c6e:	441a      	add	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	68da      	ldr	r2, [r3, #12]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d207      	bcs.n	8002c90 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c88:	425b      	negs	r3, r3
 8002c8a:	441a      	add	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d105      	bne.n	8002ca2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d002      	beq.n	8002ca2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1c5a      	adds	r2, r3, #1
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002caa:	697b      	ldr	r3, [r7, #20]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3718      	adds	r7, #24
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d018      	beq.n	8002cf8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68da      	ldr	r2, [r3, #12]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	441a      	add	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68da      	ldr	r2, [r3, #12]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d303      	bcc.n	8002ce8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68d9      	ldr	r1, [r3, #12]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	6838      	ldr	r0, [r7, #0]
 8002cf4:	f001 fec0 	bl	8004a78 <memcpy>
	}
}
 8002cf8:	bf00      	nop
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002d08:	f001 fba0 	bl	800444c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d12:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d14:	e011      	b.n	8002d3a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d012      	beq.n	8002d44 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	3324      	adds	r3, #36	; 0x24
 8002d22:	4618      	mov	r0, r3
 8002d24:	f000 fcea 	bl	80036fc <xTaskRemoveFromEventList>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002d2e:	f000 fdc1 	bl	80038b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002d32:	7bfb      	ldrb	r3, [r7, #15]
 8002d34:	3b01      	subs	r3, #1
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	dce9      	bgt.n	8002d16 <prvUnlockQueue+0x16>
 8002d42:	e000      	b.n	8002d46 <prvUnlockQueue+0x46>
					break;
 8002d44:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	22ff      	movs	r2, #255	; 0xff
 8002d4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002d4e:	f001 fbad 	bl	80044ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002d52:	f001 fb7b 	bl	800444c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d5c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d5e:	e011      	b.n	8002d84 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d012      	beq.n	8002d8e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	3310      	adds	r3, #16
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f000 fcc5 	bl	80036fc <xTaskRemoveFromEventList>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002d78:	f000 fd9c 	bl	80038b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002d7c:	7bbb      	ldrb	r3, [r7, #14]
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	dce9      	bgt.n	8002d60 <prvUnlockQueue+0x60>
 8002d8c:	e000      	b.n	8002d90 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002d8e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	22ff      	movs	r2, #255	; 0xff
 8002d94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002d98:	f001 fb88 	bl	80044ac <vPortExitCritical>
}
 8002d9c:	bf00      	nop
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002dac:	f001 fb4e 	bl	800444c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d102      	bne.n	8002dbe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002db8:	2301      	movs	r3, #1
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	e001      	b.n	8002dc2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002dc2:	f001 fb73 	bl	80044ac <vPortExitCritical>

	return xReturn;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002dd8:	f001 fb38 	bl	800444c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d102      	bne.n	8002dee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002de8:	2301      	movs	r3, #1
 8002dea:	60fb      	str	r3, [r7, #12]
 8002dec:	e001      	b.n	8002df2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002dee:	2300      	movs	r3, #0
 8002df0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002df2:	f001 fb5b 	bl	80044ac <vPortExitCritical>

	return xReturn;
 8002df6:	68fb      	ldr	r3, [r7, #12]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	60fb      	str	r3, [r7, #12]
 8002e0e:	e014      	b.n	8002e3a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002e10:	4a0e      	ldr	r2, [pc, #56]	; (8002e4c <vQueueAddToRegistry+0x4c>)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d10b      	bne.n	8002e34 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002e1c:	490b      	ldr	r1, [pc, #44]	; (8002e4c <vQueueAddToRegistry+0x4c>)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002e26:	4a09      	ldr	r2, [pc, #36]	; (8002e4c <vQueueAddToRegistry+0x4c>)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	4413      	add	r3, r2
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002e32:	e006      	b.n	8002e42 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	3301      	adds	r3, #1
 8002e38:	60fb      	str	r3, [r7, #12]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2b07      	cmp	r3, #7
 8002e3e:	d9e7      	bls.n	8002e10 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002e40:	bf00      	nop
 8002e42:	bf00      	nop
 8002e44:	3714      	adds	r7, #20
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bc80      	pop	{r7}
 8002e4a:	4770      	bx	lr
 8002e4c:	2000075c 	.word	0x2000075c

08002e50 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002e60:	f001 faf4 	bl	800444c <vPortEnterCritical>
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e6a:	b25b      	sxtb	r3, r3
 8002e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e70:	d103      	bne.n	8002e7a <vQueueWaitForMessageRestricted+0x2a>
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e80:	b25b      	sxtb	r3, r3
 8002e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e86:	d103      	bne.n	8002e90 <vQueueWaitForMessageRestricted+0x40>
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e90:	f001 fb0c 	bl	80044ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d106      	bne.n	8002eaa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	3324      	adds	r3, #36	; 0x24
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	68b9      	ldr	r1, [r7, #8]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f000 fbfd 	bl	80036a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002eaa:	6978      	ldr	r0, [r7, #20]
 8002eac:	f7ff ff28 	bl	8002d00 <prvUnlockQueue>
	}
 8002eb0:	bf00      	nop
 8002eb2:	3718      	adds	r7, #24
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b08e      	sub	sp, #56	; 0x38
 8002ebc:	af04      	add	r7, sp, #16
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
 8002ec4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d10a      	bne.n	8002ee2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed0:	f383 8811 	msr	BASEPRI, r3
 8002ed4:	f3bf 8f6f 	isb	sy
 8002ed8:	f3bf 8f4f 	dsb	sy
 8002edc:	623b      	str	r3, [r7, #32]
}
 8002ede:	bf00      	nop
 8002ee0:	e7fe      	b.n	8002ee0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d10a      	bne.n	8002efe <xTaskCreateStatic+0x46>
	__asm volatile
 8002ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eec:	f383 8811 	msr	BASEPRI, r3
 8002ef0:	f3bf 8f6f 	isb	sy
 8002ef4:	f3bf 8f4f 	dsb	sy
 8002ef8:	61fb      	str	r3, [r7, #28]
}
 8002efa:	bf00      	nop
 8002efc:	e7fe      	b.n	8002efc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002efe:	235c      	movs	r3, #92	; 0x5c
 8002f00:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	2b5c      	cmp	r3, #92	; 0x5c
 8002f06:	d00a      	beq.n	8002f1e <xTaskCreateStatic+0x66>
	__asm volatile
 8002f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f0c:	f383 8811 	msr	BASEPRI, r3
 8002f10:	f3bf 8f6f 	isb	sy
 8002f14:	f3bf 8f4f 	dsb	sy
 8002f18:	61bb      	str	r3, [r7, #24]
}
 8002f1a:	bf00      	nop
 8002f1c:	e7fe      	b.n	8002f1c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d01e      	beq.n	8002f62 <xTaskCreateStatic+0xaa>
 8002f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d01b      	beq.n	8002f62 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f32:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f36:	2202      	movs	r2, #2
 8002f38:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	9303      	str	r3, [sp, #12]
 8002f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f42:	9302      	str	r3, [sp, #8]
 8002f44:	f107 0314 	add.w	r3, r7, #20
 8002f48:	9301      	str	r3, [sp, #4]
 8002f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4c:	9300      	str	r3, [sp, #0]
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	68b9      	ldr	r1, [r7, #8]
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f000 f850 	bl	8002ffa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002f5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f5c:	f000 f8d4 	bl	8003108 <prvAddNewTaskToReadyList>
 8002f60:	e001      	b.n	8002f66 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002f62:	2300      	movs	r3, #0
 8002f64:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002f66:	697b      	ldr	r3, [r7, #20]
	}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3728      	adds	r7, #40	; 0x28
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b08c      	sub	sp, #48	; 0x30
 8002f74:	af04      	add	r7, sp, #16
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	603b      	str	r3, [r7, #0]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f80:	88fb      	ldrh	r3, [r7, #6]
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	4618      	mov	r0, r3
 8002f86:	f001 fb61 	bl	800464c <pvPortMalloc>
 8002f8a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00e      	beq.n	8002fb0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002f92:	205c      	movs	r0, #92	; 0x5c
 8002f94:	f001 fb5a 	bl	800464c <pvPortMalloc>
 8002f98:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d003      	beq.n	8002fa8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	631a      	str	r2, [r3, #48]	; 0x30
 8002fa6:	e005      	b.n	8002fb4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002fa8:	6978      	ldr	r0, [r7, #20]
 8002faa:	f001 fc13 	bl	80047d4 <vPortFree>
 8002fae:	e001      	b.n	8002fb4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d017      	beq.n	8002fea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002fc2:	88fa      	ldrh	r2, [r7, #6]
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	9303      	str	r3, [sp, #12]
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	9302      	str	r3, [sp, #8]
 8002fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fce:	9301      	str	r3, [sp, #4]
 8002fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd2:	9300      	str	r3, [sp, #0]
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	68b9      	ldr	r1, [r7, #8]
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f000 f80e 	bl	8002ffa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002fde:	69f8      	ldr	r0, [r7, #28]
 8002fe0:	f000 f892 	bl	8003108 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	61bb      	str	r3, [r7, #24]
 8002fe8:	e002      	b.n	8002ff0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002fea:	f04f 33ff 	mov.w	r3, #4294967295
 8002fee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002ff0:	69bb      	ldr	r3, [r7, #24]
	}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3720      	adds	r7, #32
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b088      	sub	sp, #32
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	60f8      	str	r0, [r7, #12]
 8003002:	60b9      	str	r1, [r7, #8]
 8003004:	607a      	str	r2, [r7, #4]
 8003006:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	461a      	mov	r2, r3
 8003012:	21a5      	movs	r1, #165	; 0xa5
 8003014:	f001 fd3e 	bl	8004a94 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003022:	3b01      	subs	r3, #1
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	4413      	add	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	f023 0307 	bic.w	r3, r3, #7
 8003030:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	f003 0307 	and.w	r3, r3, #7
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00a      	beq.n	8003052 <prvInitialiseNewTask+0x58>
	__asm volatile
 800303c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003040:	f383 8811 	msr	BASEPRI, r3
 8003044:	f3bf 8f6f 	isb	sy
 8003048:	f3bf 8f4f 	dsb	sy
 800304c:	617b      	str	r3, [r7, #20]
}
 800304e:	bf00      	nop
 8003050:	e7fe      	b.n	8003050 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003052:	2300      	movs	r3, #0
 8003054:	61fb      	str	r3, [r7, #28]
 8003056:	e012      	b.n	800307e <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003058:	68ba      	ldr	r2, [r7, #8]
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	4413      	add	r3, r2
 800305e:	7819      	ldrb	r1, [r3, #0]
 8003060:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	4413      	add	r3, r2
 8003066:	3334      	adds	r3, #52	; 0x34
 8003068:	460a      	mov	r2, r1
 800306a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800306c:	68ba      	ldr	r2, [r7, #8]
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	4413      	add	r3, r2
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d006      	beq.n	8003086 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	3301      	adds	r3, #1
 800307c:	61fb      	str	r3, [r7, #28]
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	2b0f      	cmp	r3, #15
 8003082:	d9e9      	bls.n	8003058 <prvInitialiseNewTask+0x5e>
 8003084:	e000      	b.n	8003088 <prvInitialiseNewTask+0x8e>
		{
			break;
 8003086:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003092:	2b37      	cmp	r3, #55	; 0x37
 8003094:	d901      	bls.n	800309a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003096:	2337      	movs	r3, #55	; 0x37
 8003098:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800309a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800309e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80030a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030a4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80030a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a8:	2200      	movs	r2, #0
 80030aa:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80030ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ae:	3304      	adds	r3, #4
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff f98c 	bl	80023ce <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80030b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b8:	3318      	adds	r3, #24
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff f987 	bl	80023ce <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80030c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030c4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80030cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ce:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80030d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030d4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80030d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d8:	2200      	movs	r2, #0
 80030da:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80030dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	68f9      	ldr	r1, [r7, #12]
 80030e8:	69b8      	ldr	r0, [r7, #24]
 80030ea:	f001 f8bb 	bl	8004264 <pxPortInitialiseStack>
 80030ee:	4602      	mov	r2, r0
 80030f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80030f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d002      	beq.n	8003100 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80030fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030fe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003100:	bf00      	nop
 8003102:	3720      	adds	r7, #32
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003110:	f001 f99c 	bl	800444c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003114:	4b2d      	ldr	r3, [pc, #180]	; (80031cc <prvAddNewTaskToReadyList+0xc4>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	3301      	adds	r3, #1
 800311a:	4a2c      	ldr	r2, [pc, #176]	; (80031cc <prvAddNewTaskToReadyList+0xc4>)
 800311c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800311e:	4b2c      	ldr	r3, [pc, #176]	; (80031d0 <prvAddNewTaskToReadyList+0xc8>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d109      	bne.n	800313a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003126:	4a2a      	ldr	r2, [pc, #168]	; (80031d0 <prvAddNewTaskToReadyList+0xc8>)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800312c:	4b27      	ldr	r3, [pc, #156]	; (80031cc <prvAddNewTaskToReadyList+0xc4>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d110      	bne.n	8003156 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003134:	f000 fbe2 	bl	80038fc <prvInitialiseTaskLists>
 8003138:	e00d      	b.n	8003156 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800313a:	4b26      	ldr	r3, [pc, #152]	; (80031d4 <prvAddNewTaskToReadyList+0xcc>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d109      	bne.n	8003156 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003142:	4b23      	ldr	r3, [pc, #140]	; (80031d0 <prvAddNewTaskToReadyList+0xc8>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314c:	429a      	cmp	r2, r3
 800314e:	d802      	bhi.n	8003156 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003150:	4a1f      	ldr	r2, [pc, #124]	; (80031d0 <prvAddNewTaskToReadyList+0xc8>)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003156:	4b20      	ldr	r3, [pc, #128]	; (80031d8 <prvAddNewTaskToReadyList+0xd0>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	3301      	adds	r3, #1
 800315c:	4a1e      	ldr	r2, [pc, #120]	; (80031d8 <prvAddNewTaskToReadyList+0xd0>)
 800315e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003160:	4b1d      	ldr	r3, [pc, #116]	; (80031d8 <prvAddNewTaskToReadyList+0xd0>)
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800316c:	4b1b      	ldr	r3, [pc, #108]	; (80031dc <prvAddNewTaskToReadyList+0xd4>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	429a      	cmp	r2, r3
 8003172:	d903      	bls.n	800317c <prvAddNewTaskToReadyList+0x74>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003178:	4a18      	ldr	r2, [pc, #96]	; (80031dc <prvAddNewTaskToReadyList+0xd4>)
 800317a:	6013      	str	r3, [r2, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003180:	4613      	mov	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4413      	add	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4a15      	ldr	r2, [pc, #84]	; (80031e0 <prvAddNewTaskToReadyList+0xd8>)
 800318a:	441a      	add	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	3304      	adds	r3, #4
 8003190:	4619      	mov	r1, r3
 8003192:	4610      	mov	r0, r2
 8003194:	f7ff f927 	bl	80023e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003198:	f001 f988 	bl	80044ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800319c:	4b0d      	ldr	r3, [pc, #52]	; (80031d4 <prvAddNewTaskToReadyList+0xcc>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d00e      	beq.n	80031c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80031a4:	4b0a      	ldr	r3, [pc, #40]	; (80031d0 <prvAddNewTaskToReadyList+0xc8>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d207      	bcs.n	80031c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80031b2:	4b0c      	ldr	r3, [pc, #48]	; (80031e4 <prvAddNewTaskToReadyList+0xdc>)
 80031b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	f3bf 8f4f 	dsb	sy
 80031be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80031c2:	bf00      	nop
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	20000c70 	.word	0x20000c70
 80031d0:	2000079c 	.word	0x2000079c
 80031d4:	20000c7c 	.word	0x20000c7c
 80031d8:	20000c8c 	.word	0x20000c8c
 80031dc:	20000c78 	.word	0x20000c78
 80031e0:	200007a0 	.word	0x200007a0
 80031e4:	e000ed04 	.word	0xe000ed04

080031e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b08a      	sub	sp, #40	; 0x28
 80031ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80031ee:	2300      	movs	r3, #0
 80031f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80031f2:	2300      	movs	r3, #0
 80031f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80031f6:	463a      	mov	r2, r7
 80031f8:	1d39      	adds	r1, r7, #4
 80031fa:	f107 0308 	add.w	r3, r7, #8
 80031fe:	4618      	mov	r0, r3
 8003200:	f7ff f894 	bl	800232c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003204:	6839      	ldr	r1, [r7, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68ba      	ldr	r2, [r7, #8]
 800320a:	9202      	str	r2, [sp, #8]
 800320c:	9301      	str	r3, [sp, #4]
 800320e:	2300      	movs	r3, #0
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	2300      	movs	r3, #0
 8003214:	460a      	mov	r2, r1
 8003216:	4921      	ldr	r1, [pc, #132]	; (800329c <vTaskStartScheduler+0xb4>)
 8003218:	4821      	ldr	r0, [pc, #132]	; (80032a0 <vTaskStartScheduler+0xb8>)
 800321a:	f7ff fe4d 	bl	8002eb8 <xTaskCreateStatic>
 800321e:	4603      	mov	r3, r0
 8003220:	4a20      	ldr	r2, [pc, #128]	; (80032a4 <vTaskStartScheduler+0xbc>)
 8003222:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003224:	4b1f      	ldr	r3, [pc, #124]	; (80032a4 <vTaskStartScheduler+0xbc>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d002      	beq.n	8003232 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800322c:	2301      	movs	r3, #1
 800322e:	617b      	str	r3, [r7, #20]
 8003230:	e001      	b.n	8003236 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003232:	2300      	movs	r3, #0
 8003234:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d102      	bne.n	8003242 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800323c:	f000 fd00 	bl	8003c40 <xTimerCreateTimerTask>
 8003240:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d116      	bne.n	8003276 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800324c:	f383 8811 	msr	BASEPRI, r3
 8003250:	f3bf 8f6f 	isb	sy
 8003254:	f3bf 8f4f 	dsb	sy
 8003258:	613b      	str	r3, [r7, #16]
}
 800325a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800325c:	4b12      	ldr	r3, [pc, #72]	; (80032a8 <vTaskStartScheduler+0xc0>)
 800325e:	f04f 32ff 	mov.w	r2, #4294967295
 8003262:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003264:	4b11      	ldr	r3, [pc, #68]	; (80032ac <vTaskStartScheduler+0xc4>)
 8003266:	2201      	movs	r2, #1
 8003268:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800326a:	4b11      	ldr	r3, [pc, #68]	; (80032b0 <vTaskStartScheduler+0xc8>)
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003270:	f001 f87a 	bl	8004368 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003274:	e00e      	b.n	8003294 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800327c:	d10a      	bne.n	8003294 <vTaskStartScheduler+0xac>
	__asm volatile
 800327e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003282:	f383 8811 	msr	BASEPRI, r3
 8003286:	f3bf 8f6f 	isb	sy
 800328a:	f3bf 8f4f 	dsb	sy
 800328e:	60fb      	str	r3, [r7, #12]
}
 8003290:	bf00      	nop
 8003292:	e7fe      	b.n	8003292 <vTaskStartScheduler+0xaa>
}
 8003294:	bf00      	nop
 8003296:	3718      	adds	r7, #24
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	08004ba8 	.word	0x08004ba8
 80032a0:	080038cd 	.word	0x080038cd
 80032a4:	20000c94 	.word	0x20000c94
 80032a8:	20000c90 	.word	0x20000c90
 80032ac:	20000c7c 	.word	0x20000c7c
 80032b0:	20000c74 	.word	0x20000c74

080032b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80032b8:	4b04      	ldr	r3, [pc, #16]	; (80032cc <vTaskSuspendAll+0x18>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	3301      	adds	r3, #1
 80032be:	4a03      	ldr	r2, [pc, #12]	; (80032cc <vTaskSuspendAll+0x18>)
 80032c0:	6013      	str	r3, [r2, #0]
}
 80032c2:	bf00      	nop
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bc80      	pop	{r7}
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	20000c98 	.word	0x20000c98

080032d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80032d6:	2300      	movs	r3, #0
 80032d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80032da:	2300      	movs	r3, #0
 80032dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80032de:	4b42      	ldr	r3, [pc, #264]	; (80033e8 <xTaskResumeAll+0x118>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10a      	bne.n	80032fc <xTaskResumeAll+0x2c>
	__asm volatile
 80032e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ea:	f383 8811 	msr	BASEPRI, r3
 80032ee:	f3bf 8f6f 	isb	sy
 80032f2:	f3bf 8f4f 	dsb	sy
 80032f6:	603b      	str	r3, [r7, #0]
}
 80032f8:	bf00      	nop
 80032fa:	e7fe      	b.n	80032fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80032fc:	f001 f8a6 	bl	800444c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003300:	4b39      	ldr	r3, [pc, #228]	; (80033e8 <xTaskResumeAll+0x118>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	3b01      	subs	r3, #1
 8003306:	4a38      	ldr	r2, [pc, #224]	; (80033e8 <xTaskResumeAll+0x118>)
 8003308:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800330a:	4b37      	ldr	r3, [pc, #220]	; (80033e8 <xTaskResumeAll+0x118>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d162      	bne.n	80033d8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003312:	4b36      	ldr	r3, [pc, #216]	; (80033ec <xTaskResumeAll+0x11c>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d05e      	beq.n	80033d8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800331a:	e02f      	b.n	800337c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800331c:	4b34      	ldr	r3, [pc, #208]	; (80033f0 <xTaskResumeAll+0x120>)
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	3318      	adds	r3, #24
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff f8b7 	bl	800249c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	3304      	adds	r3, #4
 8003332:	4618      	mov	r0, r3
 8003334:	f7ff f8b2 	bl	800249c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800333c:	4b2d      	ldr	r3, [pc, #180]	; (80033f4 <xTaskResumeAll+0x124>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	429a      	cmp	r2, r3
 8003342:	d903      	bls.n	800334c <xTaskResumeAll+0x7c>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003348:	4a2a      	ldr	r2, [pc, #168]	; (80033f4 <xTaskResumeAll+0x124>)
 800334a:	6013      	str	r3, [r2, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003350:	4613      	mov	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4413      	add	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4a27      	ldr	r2, [pc, #156]	; (80033f8 <xTaskResumeAll+0x128>)
 800335a:	441a      	add	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	3304      	adds	r3, #4
 8003360:	4619      	mov	r1, r3
 8003362:	4610      	mov	r0, r2
 8003364:	f7ff f83f 	bl	80023e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800336c:	4b23      	ldr	r3, [pc, #140]	; (80033fc <xTaskResumeAll+0x12c>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003372:	429a      	cmp	r2, r3
 8003374:	d302      	bcc.n	800337c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003376:	4b22      	ldr	r3, [pc, #136]	; (8003400 <xTaskResumeAll+0x130>)
 8003378:	2201      	movs	r2, #1
 800337a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800337c:	4b1c      	ldr	r3, [pc, #112]	; (80033f0 <xTaskResumeAll+0x120>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1cb      	bne.n	800331c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800338a:	f000 fb55 	bl	8003a38 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800338e:	4b1d      	ldr	r3, [pc, #116]	; (8003404 <xTaskResumeAll+0x134>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d010      	beq.n	80033bc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800339a:	f000 f845 	bl	8003428 <xTaskIncrementTick>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d002      	beq.n	80033aa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80033a4:	4b16      	ldr	r3, [pc, #88]	; (8003400 <xTaskResumeAll+0x130>)
 80033a6:	2201      	movs	r2, #1
 80033a8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	3b01      	subs	r3, #1
 80033ae:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1f1      	bne.n	800339a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80033b6:	4b13      	ldr	r3, [pc, #76]	; (8003404 <xTaskResumeAll+0x134>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80033bc:	4b10      	ldr	r3, [pc, #64]	; (8003400 <xTaskResumeAll+0x130>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d009      	beq.n	80033d8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80033c4:	2301      	movs	r3, #1
 80033c6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80033c8:	4b0f      	ldr	r3, [pc, #60]	; (8003408 <xTaskResumeAll+0x138>)
 80033ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	f3bf 8f4f 	dsb	sy
 80033d4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80033d8:	f001 f868 	bl	80044ac <vPortExitCritical>

	return xAlreadyYielded;
 80033dc:	68bb      	ldr	r3, [r7, #8]
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	20000c98 	.word	0x20000c98
 80033ec:	20000c70 	.word	0x20000c70
 80033f0:	20000c30 	.word	0x20000c30
 80033f4:	20000c78 	.word	0x20000c78
 80033f8:	200007a0 	.word	0x200007a0
 80033fc:	2000079c 	.word	0x2000079c
 8003400:	20000c84 	.word	0x20000c84
 8003404:	20000c80 	.word	0x20000c80
 8003408:	e000ed04 	.word	0xe000ed04

0800340c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003412:	4b04      	ldr	r3, [pc, #16]	; (8003424 <xTaskGetTickCount+0x18>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003418:	687b      	ldr	r3, [r7, #4]
}
 800341a:	4618      	mov	r0, r3
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	bc80      	pop	{r7}
 8003422:	4770      	bx	lr
 8003424:	20000c74 	.word	0x20000c74

08003428 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800342e:	2300      	movs	r3, #0
 8003430:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003432:	4b51      	ldr	r3, [pc, #324]	; (8003578 <xTaskIncrementTick+0x150>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	f040 808e 	bne.w	8003558 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800343c:	4b4f      	ldr	r3, [pc, #316]	; (800357c <xTaskIncrementTick+0x154>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	3301      	adds	r3, #1
 8003442:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003444:	4a4d      	ldr	r2, [pc, #308]	; (800357c <xTaskIncrementTick+0x154>)
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d120      	bne.n	8003492 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003450:	4b4b      	ldr	r3, [pc, #300]	; (8003580 <xTaskIncrementTick+0x158>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00a      	beq.n	8003470 <xTaskIncrementTick+0x48>
	__asm volatile
 800345a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800345e:	f383 8811 	msr	BASEPRI, r3
 8003462:	f3bf 8f6f 	isb	sy
 8003466:	f3bf 8f4f 	dsb	sy
 800346a:	603b      	str	r3, [r7, #0]
}
 800346c:	bf00      	nop
 800346e:	e7fe      	b.n	800346e <xTaskIncrementTick+0x46>
 8003470:	4b43      	ldr	r3, [pc, #268]	; (8003580 <xTaskIncrementTick+0x158>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	60fb      	str	r3, [r7, #12]
 8003476:	4b43      	ldr	r3, [pc, #268]	; (8003584 <xTaskIncrementTick+0x15c>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a41      	ldr	r2, [pc, #260]	; (8003580 <xTaskIncrementTick+0x158>)
 800347c:	6013      	str	r3, [r2, #0]
 800347e:	4a41      	ldr	r2, [pc, #260]	; (8003584 <xTaskIncrementTick+0x15c>)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6013      	str	r3, [r2, #0]
 8003484:	4b40      	ldr	r3, [pc, #256]	; (8003588 <xTaskIncrementTick+0x160>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	3301      	adds	r3, #1
 800348a:	4a3f      	ldr	r2, [pc, #252]	; (8003588 <xTaskIncrementTick+0x160>)
 800348c:	6013      	str	r3, [r2, #0]
 800348e:	f000 fad3 	bl	8003a38 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003492:	4b3e      	ldr	r3, [pc, #248]	; (800358c <xTaskIncrementTick+0x164>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	429a      	cmp	r2, r3
 800349a:	d34e      	bcc.n	800353a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800349c:	4b38      	ldr	r3, [pc, #224]	; (8003580 <xTaskIncrementTick+0x158>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <xTaskIncrementTick+0x82>
 80034a6:	2301      	movs	r3, #1
 80034a8:	e000      	b.n	80034ac <xTaskIncrementTick+0x84>
 80034aa:	2300      	movs	r3, #0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d004      	beq.n	80034ba <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034b0:	4b36      	ldr	r3, [pc, #216]	; (800358c <xTaskIncrementTick+0x164>)
 80034b2:	f04f 32ff 	mov.w	r2, #4294967295
 80034b6:	601a      	str	r2, [r3, #0]
					break;
 80034b8:	e03f      	b.n	800353a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80034ba:	4b31      	ldr	r3, [pc, #196]	; (8003580 <xTaskIncrementTick+0x158>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d203      	bcs.n	80034da <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80034d2:	4a2e      	ldr	r2, [pc, #184]	; (800358c <xTaskIncrementTick+0x164>)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6013      	str	r3, [r2, #0]
						break;
 80034d8:	e02f      	b.n	800353a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	3304      	adds	r3, #4
 80034de:	4618      	mov	r0, r3
 80034e0:	f7fe ffdc 	bl	800249c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d004      	beq.n	80034f6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	3318      	adds	r3, #24
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7fe ffd3 	bl	800249c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034fa:	4b25      	ldr	r3, [pc, #148]	; (8003590 <xTaskIncrementTick+0x168>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d903      	bls.n	800350a <xTaskIncrementTick+0xe2>
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003506:	4a22      	ldr	r2, [pc, #136]	; (8003590 <xTaskIncrementTick+0x168>)
 8003508:	6013      	str	r3, [r2, #0]
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800350e:	4613      	mov	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4413      	add	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4a1f      	ldr	r2, [pc, #124]	; (8003594 <xTaskIncrementTick+0x16c>)
 8003518:	441a      	add	r2, r3
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	3304      	adds	r3, #4
 800351e:	4619      	mov	r1, r3
 8003520:	4610      	mov	r0, r2
 8003522:	f7fe ff60 	bl	80023e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800352a:	4b1b      	ldr	r3, [pc, #108]	; (8003598 <xTaskIncrementTick+0x170>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003530:	429a      	cmp	r2, r3
 8003532:	d3b3      	bcc.n	800349c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003534:	2301      	movs	r3, #1
 8003536:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003538:	e7b0      	b.n	800349c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800353a:	4b17      	ldr	r3, [pc, #92]	; (8003598 <xTaskIncrementTick+0x170>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003540:	4914      	ldr	r1, [pc, #80]	; (8003594 <xTaskIncrementTick+0x16c>)
 8003542:	4613      	mov	r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	4413      	add	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	440b      	add	r3, r1
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d907      	bls.n	8003562 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003552:	2301      	movs	r3, #1
 8003554:	617b      	str	r3, [r7, #20]
 8003556:	e004      	b.n	8003562 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003558:	4b10      	ldr	r3, [pc, #64]	; (800359c <xTaskIncrementTick+0x174>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	3301      	adds	r3, #1
 800355e:	4a0f      	ldr	r2, [pc, #60]	; (800359c <xTaskIncrementTick+0x174>)
 8003560:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003562:	4b0f      	ldr	r3, [pc, #60]	; (80035a0 <xTaskIncrementTick+0x178>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800356a:	2301      	movs	r3, #1
 800356c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800356e:	697b      	ldr	r3, [r7, #20]
}
 8003570:	4618      	mov	r0, r3
 8003572:	3718      	adds	r7, #24
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	20000c98 	.word	0x20000c98
 800357c:	20000c74 	.word	0x20000c74
 8003580:	20000c28 	.word	0x20000c28
 8003584:	20000c2c 	.word	0x20000c2c
 8003588:	20000c88 	.word	0x20000c88
 800358c:	20000c90 	.word	0x20000c90
 8003590:	20000c78 	.word	0x20000c78
 8003594:	200007a0 	.word	0x200007a0
 8003598:	2000079c 	.word	0x2000079c
 800359c:	20000c80 	.word	0x20000c80
 80035a0:	20000c84 	.word	0x20000c84

080035a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80035a4:	b480      	push	{r7}
 80035a6:	b085      	sub	sp, #20
 80035a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80035aa:	4b27      	ldr	r3, [pc, #156]	; (8003648 <vTaskSwitchContext+0xa4>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80035b2:	4b26      	ldr	r3, [pc, #152]	; (800364c <vTaskSwitchContext+0xa8>)
 80035b4:	2201      	movs	r2, #1
 80035b6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80035b8:	e041      	b.n	800363e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80035ba:	4b24      	ldr	r3, [pc, #144]	; (800364c <vTaskSwitchContext+0xa8>)
 80035bc:	2200      	movs	r2, #0
 80035be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80035c0:	4b23      	ldr	r3, [pc, #140]	; (8003650 <vTaskSwitchContext+0xac>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	60fb      	str	r3, [r7, #12]
 80035c6:	e010      	b.n	80035ea <vTaskSwitchContext+0x46>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10a      	bne.n	80035e4 <vTaskSwitchContext+0x40>
	__asm volatile
 80035ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d2:	f383 8811 	msr	BASEPRI, r3
 80035d6:	f3bf 8f6f 	isb	sy
 80035da:	f3bf 8f4f 	dsb	sy
 80035de:	607b      	str	r3, [r7, #4]
}
 80035e0:	bf00      	nop
 80035e2:	e7fe      	b.n	80035e2 <vTaskSwitchContext+0x3e>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	3b01      	subs	r3, #1
 80035e8:	60fb      	str	r3, [r7, #12]
 80035ea:	491a      	ldr	r1, [pc, #104]	; (8003654 <vTaskSwitchContext+0xb0>)
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	4613      	mov	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	4413      	add	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	440b      	add	r3, r1
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d0e4      	beq.n	80035c8 <vTaskSwitchContext+0x24>
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	4613      	mov	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4a12      	ldr	r2, [pc, #72]	; (8003654 <vTaskSwitchContext+0xb0>)
 800360a:	4413      	add	r3, r2
 800360c:	60bb      	str	r3, [r7, #8]
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	605a      	str	r2, [r3, #4]
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	3308      	adds	r3, #8
 8003620:	429a      	cmp	r2, r3
 8003622:	d104      	bne.n	800362e <vTaskSwitchContext+0x8a>
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	685a      	ldr	r2, [r3, #4]
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	605a      	str	r2, [r3, #4]
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	4a08      	ldr	r2, [pc, #32]	; (8003658 <vTaskSwitchContext+0xb4>)
 8003636:	6013      	str	r3, [r2, #0]
 8003638:	4a05      	ldr	r2, [pc, #20]	; (8003650 <vTaskSwitchContext+0xac>)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6013      	str	r3, [r2, #0]
}
 800363e:	bf00      	nop
 8003640:	3714      	adds	r7, #20
 8003642:	46bd      	mov	sp, r7
 8003644:	bc80      	pop	{r7}
 8003646:	4770      	bx	lr
 8003648:	20000c98 	.word	0x20000c98
 800364c:	20000c84 	.word	0x20000c84
 8003650:	20000c78 	.word	0x20000c78
 8003654:	200007a0 	.word	0x200007a0
 8003658:	2000079c 	.word	0x2000079c

0800365c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d10a      	bne.n	8003682 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800366c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003670:	f383 8811 	msr	BASEPRI, r3
 8003674:	f3bf 8f6f 	isb	sy
 8003678:	f3bf 8f4f 	dsb	sy
 800367c:	60fb      	str	r3, [r7, #12]
}
 800367e:	bf00      	nop
 8003680:	e7fe      	b.n	8003680 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003682:	4b07      	ldr	r3, [pc, #28]	; (80036a0 <vTaskPlaceOnEventList+0x44>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	3318      	adds	r3, #24
 8003688:	4619      	mov	r1, r3
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7fe fece 	bl	800242c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003690:	2101      	movs	r1, #1
 8003692:	6838      	ldr	r0, [r7, #0]
 8003694:	f000 fa80 	bl	8003b98 <prvAddCurrentTaskToDelayedList>
}
 8003698:	bf00      	nop
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	2000079c 	.word	0x2000079c

080036a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10a      	bne.n	80036cc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80036b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ba:	f383 8811 	msr	BASEPRI, r3
 80036be:	f3bf 8f6f 	isb	sy
 80036c2:	f3bf 8f4f 	dsb	sy
 80036c6:	617b      	str	r3, [r7, #20]
}
 80036c8:	bf00      	nop
 80036ca:	e7fe      	b.n	80036ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80036cc:	4b0a      	ldr	r3, [pc, #40]	; (80036f8 <vTaskPlaceOnEventListRestricted+0x54>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	3318      	adds	r3, #24
 80036d2:	4619      	mov	r1, r3
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f7fe fe86 	bl	80023e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d002      	beq.n	80036e6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80036e0:	f04f 33ff 	mov.w	r3, #4294967295
 80036e4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80036e6:	6879      	ldr	r1, [r7, #4]
 80036e8:	68b8      	ldr	r0, [r7, #8]
 80036ea:	f000 fa55 	bl	8003b98 <prvAddCurrentTaskToDelayedList>
	}
 80036ee:	bf00      	nop
 80036f0:	3718      	adds	r7, #24
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	2000079c 	.word	0x2000079c

080036fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b086      	sub	sp, #24
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10a      	bne.n	8003728 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003716:	f383 8811 	msr	BASEPRI, r3
 800371a:	f3bf 8f6f 	isb	sy
 800371e:	f3bf 8f4f 	dsb	sy
 8003722:	60fb      	str	r3, [r7, #12]
}
 8003724:	bf00      	nop
 8003726:	e7fe      	b.n	8003726 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	3318      	adds	r3, #24
 800372c:	4618      	mov	r0, r3
 800372e:	f7fe feb5 	bl	800249c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003732:	4b1e      	ldr	r3, [pc, #120]	; (80037ac <xTaskRemoveFromEventList+0xb0>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d11d      	bne.n	8003776 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	3304      	adds	r3, #4
 800373e:	4618      	mov	r0, r3
 8003740:	f7fe feac 	bl	800249c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003748:	4b19      	ldr	r3, [pc, #100]	; (80037b0 <xTaskRemoveFromEventList+0xb4>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	429a      	cmp	r2, r3
 800374e:	d903      	bls.n	8003758 <xTaskRemoveFromEventList+0x5c>
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003754:	4a16      	ldr	r2, [pc, #88]	; (80037b0 <xTaskRemoveFromEventList+0xb4>)
 8003756:	6013      	str	r3, [r2, #0]
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800375c:	4613      	mov	r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	4413      	add	r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	4a13      	ldr	r2, [pc, #76]	; (80037b4 <xTaskRemoveFromEventList+0xb8>)
 8003766:	441a      	add	r2, r3
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	3304      	adds	r3, #4
 800376c:	4619      	mov	r1, r3
 800376e:	4610      	mov	r0, r2
 8003770:	f7fe fe39 	bl	80023e6 <vListInsertEnd>
 8003774:	e005      	b.n	8003782 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	3318      	adds	r3, #24
 800377a:	4619      	mov	r1, r3
 800377c:	480e      	ldr	r0, [pc, #56]	; (80037b8 <xTaskRemoveFromEventList+0xbc>)
 800377e:	f7fe fe32 	bl	80023e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003786:	4b0d      	ldr	r3, [pc, #52]	; (80037bc <xTaskRemoveFromEventList+0xc0>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378c:	429a      	cmp	r2, r3
 800378e:	d905      	bls.n	800379c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003790:	2301      	movs	r3, #1
 8003792:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003794:	4b0a      	ldr	r3, [pc, #40]	; (80037c0 <xTaskRemoveFromEventList+0xc4>)
 8003796:	2201      	movs	r2, #1
 8003798:	601a      	str	r2, [r3, #0]
 800379a:	e001      	b.n	80037a0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800379c:	2300      	movs	r3, #0
 800379e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80037a0:	697b      	ldr	r3, [r7, #20]
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3718      	adds	r7, #24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	20000c98 	.word	0x20000c98
 80037b0:	20000c78 	.word	0x20000c78
 80037b4:	200007a0 	.word	0x200007a0
 80037b8:	20000c30 	.word	0x20000c30
 80037bc:	2000079c 	.word	0x2000079c
 80037c0:	20000c84 	.word	0x20000c84

080037c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80037cc:	4b06      	ldr	r3, [pc, #24]	; (80037e8 <vTaskInternalSetTimeOutState+0x24>)
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80037d4:	4b05      	ldr	r3, [pc, #20]	; (80037ec <vTaskInternalSetTimeOutState+0x28>)
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	605a      	str	r2, [r3, #4]
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bc80      	pop	{r7}
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	20000c88 	.word	0x20000c88
 80037ec:	20000c74 	.word	0x20000c74

080037f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b088      	sub	sp, #32
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d10a      	bne.n	8003816 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003804:	f383 8811 	msr	BASEPRI, r3
 8003808:	f3bf 8f6f 	isb	sy
 800380c:	f3bf 8f4f 	dsb	sy
 8003810:	613b      	str	r3, [r7, #16]
}
 8003812:	bf00      	nop
 8003814:	e7fe      	b.n	8003814 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d10a      	bne.n	8003832 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800381c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003820:	f383 8811 	msr	BASEPRI, r3
 8003824:	f3bf 8f6f 	isb	sy
 8003828:	f3bf 8f4f 	dsb	sy
 800382c:	60fb      	str	r3, [r7, #12]
}
 800382e:	bf00      	nop
 8003830:	e7fe      	b.n	8003830 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003832:	f000 fe0b 	bl	800444c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003836:	4b1d      	ldr	r3, [pc, #116]	; (80038ac <xTaskCheckForTimeOut+0xbc>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800384e:	d102      	bne.n	8003856 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003850:	2300      	movs	r3, #0
 8003852:	61fb      	str	r3, [r7, #28]
 8003854:	e023      	b.n	800389e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	4b15      	ldr	r3, [pc, #84]	; (80038b0 <xTaskCheckForTimeOut+0xc0>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	429a      	cmp	r2, r3
 8003860:	d007      	beq.n	8003872 <xTaskCheckForTimeOut+0x82>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	429a      	cmp	r2, r3
 800386a:	d302      	bcc.n	8003872 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800386c:	2301      	movs	r3, #1
 800386e:	61fb      	str	r3, [r7, #28]
 8003870:	e015      	b.n	800389e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	429a      	cmp	r2, r3
 800387a:	d20b      	bcs.n	8003894 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	1ad2      	subs	r2, r2, r3
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f7ff ff9b 	bl	80037c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800388e:	2300      	movs	r3, #0
 8003890:	61fb      	str	r3, [r7, #28]
 8003892:	e004      	b.n	800389e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	2200      	movs	r2, #0
 8003898:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800389a:	2301      	movs	r3, #1
 800389c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800389e:	f000 fe05 	bl	80044ac <vPortExitCritical>

	return xReturn;
 80038a2:	69fb      	ldr	r3, [r7, #28]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3720      	adds	r7, #32
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	20000c74 	.word	0x20000c74
 80038b0:	20000c88 	.word	0x20000c88

080038b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80038b8:	4b03      	ldr	r3, [pc, #12]	; (80038c8 <vTaskMissedYield+0x14>)
 80038ba:	2201      	movs	r2, #1
 80038bc:	601a      	str	r2, [r3, #0]
}
 80038be:	bf00      	nop
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bc80      	pop	{r7}
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	20000c84 	.word	0x20000c84

080038cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80038d4:	f000 f852 	bl	800397c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80038d8:	4b06      	ldr	r3, [pc, #24]	; (80038f4 <prvIdleTask+0x28>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d9f9      	bls.n	80038d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80038e0:	4b05      	ldr	r3, [pc, #20]	; (80038f8 <prvIdleTask+0x2c>)
 80038e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	f3bf 8f4f 	dsb	sy
 80038ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80038f0:	e7f0      	b.n	80038d4 <prvIdleTask+0x8>
 80038f2:	bf00      	nop
 80038f4:	200007a0 	.word	0x200007a0
 80038f8:	e000ed04 	.word	0xe000ed04

080038fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003902:	2300      	movs	r3, #0
 8003904:	607b      	str	r3, [r7, #4]
 8003906:	e00c      	b.n	8003922 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	4613      	mov	r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	4413      	add	r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	4a12      	ldr	r2, [pc, #72]	; (800395c <prvInitialiseTaskLists+0x60>)
 8003914:	4413      	add	r3, r2
 8003916:	4618      	mov	r0, r3
 8003918:	f7fe fd3a 	bl	8002390 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3301      	adds	r3, #1
 8003920:	607b      	str	r3, [r7, #4]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b37      	cmp	r3, #55	; 0x37
 8003926:	d9ef      	bls.n	8003908 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003928:	480d      	ldr	r0, [pc, #52]	; (8003960 <prvInitialiseTaskLists+0x64>)
 800392a:	f7fe fd31 	bl	8002390 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800392e:	480d      	ldr	r0, [pc, #52]	; (8003964 <prvInitialiseTaskLists+0x68>)
 8003930:	f7fe fd2e 	bl	8002390 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003934:	480c      	ldr	r0, [pc, #48]	; (8003968 <prvInitialiseTaskLists+0x6c>)
 8003936:	f7fe fd2b 	bl	8002390 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800393a:	480c      	ldr	r0, [pc, #48]	; (800396c <prvInitialiseTaskLists+0x70>)
 800393c:	f7fe fd28 	bl	8002390 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003940:	480b      	ldr	r0, [pc, #44]	; (8003970 <prvInitialiseTaskLists+0x74>)
 8003942:	f7fe fd25 	bl	8002390 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003946:	4b0b      	ldr	r3, [pc, #44]	; (8003974 <prvInitialiseTaskLists+0x78>)
 8003948:	4a05      	ldr	r2, [pc, #20]	; (8003960 <prvInitialiseTaskLists+0x64>)
 800394a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800394c:	4b0a      	ldr	r3, [pc, #40]	; (8003978 <prvInitialiseTaskLists+0x7c>)
 800394e:	4a05      	ldr	r2, [pc, #20]	; (8003964 <prvInitialiseTaskLists+0x68>)
 8003950:	601a      	str	r2, [r3, #0]
}
 8003952:	bf00      	nop
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	200007a0 	.word	0x200007a0
 8003960:	20000c00 	.word	0x20000c00
 8003964:	20000c14 	.word	0x20000c14
 8003968:	20000c30 	.word	0x20000c30
 800396c:	20000c44 	.word	0x20000c44
 8003970:	20000c5c 	.word	0x20000c5c
 8003974:	20000c28 	.word	0x20000c28
 8003978:	20000c2c 	.word	0x20000c2c

0800397c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003982:	e019      	b.n	80039b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003984:	f000 fd62 	bl	800444c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003988:	4b10      	ldr	r3, [pc, #64]	; (80039cc <prvCheckTasksWaitingTermination+0x50>)
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	3304      	adds	r3, #4
 8003994:	4618      	mov	r0, r3
 8003996:	f7fe fd81 	bl	800249c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800399a:	4b0d      	ldr	r3, [pc, #52]	; (80039d0 <prvCheckTasksWaitingTermination+0x54>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	3b01      	subs	r3, #1
 80039a0:	4a0b      	ldr	r2, [pc, #44]	; (80039d0 <prvCheckTasksWaitingTermination+0x54>)
 80039a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80039a4:	4b0b      	ldr	r3, [pc, #44]	; (80039d4 <prvCheckTasksWaitingTermination+0x58>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	3b01      	subs	r3, #1
 80039aa:	4a0a      	ldr	r2, [pc, #40]	; (80039d4 <prvCheckTasksWaitingTermination+0x58>)
 80039ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80039ae:	f000 fd7d 	bl	80044ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f810 	bl	80039d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80039b8:	4b06      	ldr	r3, [pc, #24]	; (80039d4 <prvCheckTasksWaitingTermination+0x58>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1e1      	bne.n	8003984 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80039c0:	bf00      	nop
 80039c2:	bf00      	nop
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	20000c44 	.word	0x20000c44
 80039d0:	20000c70 	.word	0x20000c70
 80039d4:	20000c58 	.word	0x20000c58

080039d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d108      	bne.n	80039fc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 fef0 	bl	80047d4 <vPortFree>
				vPortFree( pxTCB );
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 feed 	bl	80047d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80039fa:	e018      	b.n	8003a2e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d103      	bne.n	8003a0e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 fee4 	bl	80047d4 <vPortFree>
	}
 8003a0c:	e00f      	b.n	8003a2e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d00a      	beq.n	8003a2e <prvDeleteTCB+0x56>
	__asm volatile
 8003a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a1c:	f383 8811 	msr	BASEPRI, r3
 8003a20:	f3bf 8f6f 	isb	sy
 8003a24:	f3bf 8f4f 	dsb	sy
 8003a28:	60fb      	str	r3, [r7, #12]
}
 8003a2a:	bf00      	nop
 8003a2c:	e7fe      	b.n	8003a2c <prvDeleteTCB+0x54>
	}
 8003a2e:	bf00      	nop
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
	...

08003a38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a3e:	4b0e      	ldr	r3, [pc, #56]	; (8003a78 <prvResetNextTaskUnblockTime+0x40>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d101      	bne.n	8003a4c <prvResetNextTaskUnblockTime+0x14>
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e000      	b.n	8003a4e <prvResetNextTaskUnblockTime+0x16>
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d004      	beq.n	8003a5c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003a52:	4b0a      	ldr	r3, [pc, #40]	; (8003a7c <prvResetNextTaskUnblockTime+0x44>)
 8003a54:	f04f 32ff 	mov.w	r2, #4294967295
 8003a58:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003a5a:	e008      	b.n	8003a6e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003a5c:	4b06      	ldr	r3, [pc, #24]	; (8003a78 <prvResetNextTaskUnblockTime+0x40>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	4a04      	ldr	r2, [pc, #16]	; (8003a7c <prvResetNextTaskUnblockTime+0x44>)
 8003a6c:	6013      	str	r3, [r2, #0]
}
 8003a6e:	bf00      	nop
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bc80      	pop	{r7}
 8003a76:	4770      	bx	lr
 8003a78:	20000c28 	.word	0x20000c28
 8003a7c:	20000c90 	.word	0x20000c90

08003a80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003a86:	4b0b      	ldr	r3, [pc, #44]	; (8003ab4 <xTaskGetSchedulerState+0x34>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d102      	bne.n	8003a94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	607b      	str	r3, [r7, #4]
 8003a92:	e008      	b.n	8003aa6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a94:	4b08      	ldr	r3, [pc, #32]	; (8003ab8 <xTaskGetSchedulerState+0x38>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d102      	bne.n	8003aa2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	607b      	str	r3, [r7, #4]
 8003aa0:	e001      	b.n	8003aa6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003aa6:	687b      	ldr	r3, [r7, #4]
	}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bc80      	pop	{r7}
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	20000c7c 	.word	0x20000c7c
 8003ab8:	20000c98 	.word	0x20000c98

08003abc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d056      	beq.n	8003b80 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003ad2:	4b2e      	ldr	r3, [pc, #184]	; (8003b8c <xTaskPriorityDisinherit+0xd0>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d00a      	beq.n	8003af2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae0:	f383 8811 	msr	BASEPRI, r3
 8003ae4:	f3bf 8f6f 	isb	sy
 8003ae8:	f3bf 8f4f 	dsb	sy
 8003aec:	60fb      	str	r3, [r7, #12]
}
 8003aee:	bf00      	nop
 8003af0:	e7fe      	b.n	8003af0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10a      	bne.n	8003b10 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003afe:	f383 8811 	msr	BASEPRI, r3
 8003b02:	f3bf 8f6f 	isb	sy
 8003b06:	f3bf 8f4f 	dsb	sy
 8003b0a:	60bb      	str	r3, [r7, #8]
}
 8003b0c:	bf00      	nop
 8003b0e:	e7fe      	b.n	8003b0e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b14:	1e5a      	subs	r2, r3, #1
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d02c      	beq.n	8003b80 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d128      	bne.n	8003b80 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	3304      	adds	r3, #4
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7fe fcb2 	bl	800249c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b44:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b50:	4b0f      	ldr	r3, [pc, #60]	; (8003b90 <xTaskPriorityDisinherit+0xd4>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d903      	bls.n	8003b60 <xTaskPriorityDisinherit+0xa4>
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5c:	4a0c      	ldr	r2, [pc, #48]	; (8003b90 <xTaskPriorityDisinherit+0xd4>)
 8003b5e:	6013      	str	r3, [r2, #0]
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b64:	4613      	mov	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	4413      	add	r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	4a09      	ldr	r2, [pc, #36]	; (8003b94 <xTaskPriorityDisinherit+0xd8>)
 8003b6e:	441a      	add	r2, r3
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	3304      	adds	r3, #4
 8003b74:	4619      	mov	r1, r3
 8003b76:	4610      	mov	r0, r2
 8003b78:	f7fe fc35 	bl	80023e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003b80:	697b      	ldr	r3, [r7, #20]
	}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3718      	adds	r7, #24
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	2000079c 	.word	0x2000079c
 8003b90:	20000c78 	.word	0x20000c78
 8003b94:	200007a0 	.word	0x200007a0

08003b98 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003ba2:	4b21      	ldr	r3, [pc, #132]	; (8003c28 <prvAddCurrentTaskToDelayedList+0x90>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ba8:	4b20      	ldr	r3, [pc, #128]	; (8003c2c <prvAddCurrentTaskToDelayedList+0x94>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	3304      	adds	r3, #4
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7fe fc74 	bl	800249c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bba:	d10a      	bne.n	8003bd2 <prvAddCurrentTaskToDelayedList+0x3a>
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d007      	beq.n	8003bd2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bc2:	4b1a      	ldr	r3, [pc, #104]	; (8003c2c <prvAddCurrentTaskToDelayedList+0x94>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	3304      	adds	r3, #4
 8003bc8:	4619      	mov	r1, r3
 8003bca:	4819      	ldr	r0, [pc, #100]	; (8003c30 <prvAddCurrentTaskToDelayedList+0x98>)
 8003bcc:	f7fe fc0b 	bl	80023e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003bd0:	e026      	b.n	8003c20 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003bda:	4b14      	ldr	r3, [pc, #80]	; (8003c2c <prvAddCurrentTaskToDelayedList+0x94>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003be2:	68ba      	ldr	r2, [r7, #8]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d209      	bcs.n	8003bfe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bea:	4b12      	ldr	r3, [pc, #72]	; (8003c34 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	4b0f      	ldr	r3, [pc, #60]	; (8003c2c <prvAddCurrentTaskToDelayedList+0x94>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	3304      	adds	r3, #4
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	4610      	mov	r0, r2
 8003bf8:	f7fe fc18 	bl	800242c <vListInsert>
}
 8003bfc:	e010      	b.n	8003c20 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bfe:	4b0e      	ldr	r3, [pc, #56]	; (8003c38 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	4b0a      	ldr	r3, [pc, #40]	; (8003c2c <prvAddCurrentTaskToDelayedList+0x94>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	3304      	adds	r3, #4
 8003c08:	4619      	mov	r1, r3
 8003c0a:	4610      	mov	r0, r2
 8003c0c:	f7fe fc0e 	bl	800242c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003c10:	4b0a      	ldr	r3, [pc, #40]	; (8003c3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68ba      	ldr	r2, [r7, #8]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d202      	bcs.n	8003c20 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003c1a:	4a08      	ldr	r2, [pc, #32]	; (8003c3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	6013      	str	r3, [r2, #0]
}
 8003c20:	bf00      	nop
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	20000c74 	.word	0x20000c74
 8003c2c:	2000079c 	.word	0x2000079c
 8003c30:	20000c5c 	.word	0x20000c5c
 8003c34:	20000c2c 	.word	0x20000c2c
 8003c38:	20000c28 	.word	0x20000c28
 8003c3c:	20000c90 	.word	0x20000c90

08003c40 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b08a      	sub	sp, #40	; 0x28
 8003c44:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003c46:	2300      	movs	r3, #0
 8003c48:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003c4a:	f000 facb 	bl	80041e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003c4e:	4b1c      	ldr	r3, [pc, #112]	; (8003cc0 <xTimerCreateTimerTask+0x80>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d021      	beq.n	8003c9a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003c56:	2300      	movs	r3, #0
 8003c58:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003c5e:	1d3a      	adds	r2, r7, #4
 8003c60:	f107 0108 	add.w	r1, r7, #8
 8003c64:	f107 030c 	add.w	r3, r7, #12
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7fe fb77 	bl	800235c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003c6e:	6879      	ldr	r1, [r7, #4]
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	9202      	str	r2, [sp, #8]
 8003c76:	9301      	str	r3, [sp, #4]
 8003c78:	2302      	movs	r3, #2
 8003c7a:	9300      	str	r3, [sp, #0]
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	460a      	mov	r2, r1
 8003c80:	4910      	ldr	r1, [pc, #64]	; (8003cc4 <xTimerCreateTimerTask+0x84>)
 8003c82:	4811      	ldr	r0, [pc, #68]	; (8003cc8 <xTimerCreateTimerTask+0x88>)
 8003c84:	f7ff f918 	bl	8002eb8 <xTaskCreateStatic>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	4a10      	ldr	r2, [pc, #64]	; (8003ccc <xTimerCreateTimerTask+0x8c>)
 8003c8c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003c8e:	4b0f      	ldr	r3, [pc, #60]	; (8003ccc <xTimerCreateTimerTask+0x8c>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003c96:	2301      	movs	r3, #1
 8003c98:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d10a      	bne.n	8003cb6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca4:	f383 8811 	msr	BASEPRI, r3
 8003ca8:	f3bf 8f6f 	isb	sy
 8003cac:	f3bf 8f4f 	dsb	sy
 8003cb0:	613b      	str	r3, [r7, #16]
}
 8003cb2:	bf00      	nop
 8003cb4:	e7fe      	b.n	8003cb4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003cb6:	697b      	ldr	r3, [r7, #20]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3718      	adds	r7, #24
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	20000ccc 	.word	0x20000ccc
 8003cc4:	08004bb0 	.word	0x08004bb0
 8003cc8:	08003ded 	.word	0x08003ded
 8003ccc:	20000cd0 	.word	0x20000cd0

08003cd0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b08a      	sub	sp, #40	; 0x28
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
 8003cdc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d10a      	bne.n	8003cfe <xTimerGenericCommand+0x2e>
	__asm volatile
 8003ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cec:	f383 8811 	msr	BASEPRI, r3
 8003cf0:	f3bf 8f6f 	isb	sy
 8003cf4:	f3bf 8f4f 	dsb	sy
 8003cf8:	623b      	str	r3, [r7, #32]
}
 8003cfa:	bf00      	nop
 8003cfc:	e7fe      	b.n	8003cfc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003cfe:	4b1a      	ldr	r3, [pc, #104]	; (8003d68 <xTimerGenericCommand+0x98>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d02a      	beq.n	8003d5c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	2b05      	cmp	r3, #5
 8003d16:	dc18      	bgt.n	8003d4a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003d18:	f7ff feb2 	bl	8003a80 <xTaskGetSchedulerState>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d109      	bne.n	8003d36 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003d22:	4b11      	ldr	r3, [pc, #68]	; (8003d68 <xTimerGenericCommand+0x98>)
 8003d24:	6818      	ldr	r0, [r3, #0]
 8003d26:	f107 0110 	add.w	r1, r7, #16
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d2e:	f7fe fce1 	bl	80026f4 <xQueueGenericSend>
 8003d32:	6278      	str	r0, [r7, #36]	; 0x24
 8003d34:	e012      	b.n	8003d5c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003d36:	4b0c      	ldr	r3, [pc, #48]	; (8003d68 <xTimerGenericCommand+0x98>)
 8003d38:	6818      	ldr	r0, [r3, #0]
 8003d3a:	f107 0110 	add.w	r1, r7, #16
 8003d3e:	2300      	movs	r3, #0
 8003d40:	2200      	movs	r2, #0
 8003d42:	f7fe fcd7 	bl	80026f4 <xQueueGenericSend>
 8003d46:	6278      	str	r0, [r7, #36]	; 0x24
 8003d48:	e008      	b.n	8003d5c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003d4a:	4b07      	ldr	r3, [pc, #28]	; (8003d68 <xTimerGenericCommand+0x98>)
 8003d4c:	6818      	ldr	r0, [r3, #0]
 8003d4e:	f107 0110 	add.w	r1, r7, #16
 8003d52:	2300      	movs	r3, #0
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	f7fe fdcb 	bl	80028f0 <xQueueGenericSendFromISR>
 8003d5a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3728      	adds	r7, #40	; 0x28
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	20000ccc 	.word	0x20000ccc

08003d6c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b088      	sub	sp, #32
 8003d70:	af02      	add	r7, sp, #8
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d76:	4b1c      	ldr	r3, [pc, #112]	; (8003de8 <prvProcessExpiredTimer+0x7c>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	3304      	adds	r3, #4
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7fe fb89 	bl	800249c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	69db      	ldr	r3, [r3, #28]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d122      	bne.n	8003dd8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	699a      	ldr	r2, [r3, #24]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	18d1      	adds	r1, r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	6978      	ldr	r0, [r7, #20]
 8003da0:	f000 f8c8 	bl	8003f34 <prvInsertTimerInActiveList>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d016      	beq.n	8003dd8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003daa:	2300      	movs	r3, #0
 8003dac:	9300      	str	r3, [sp, #0]
 8003dae:	2300      	movs	r3, #0
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	2100      	movs	r1, #0
 8003db4:	6978      	ldr	r0, [r7, #20]
 8003db6:	f7ff ff8b 	bl	8003cd0 <xTimerGenericCommand>
 8003dba:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10a      	bne.n	8003dd8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8003dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc6:	f383 8811 	msr	BASEPRI, r3
 8003dca:	f3bf 8f6f 	isb	sy
 8003dce:	f3bf 8f4f 	dsb	sy
 8003dd2:	60fb      	str	r3, [r7, #12]
}
 8003dd4:	bf00      	nop
 8003dd6:	e7fe      	b.n	8003dd6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ddc:	6978      	ldr	r0, [r7, #20]
 8003dde:	4798      	blx	r3
}
 8003de0:	bf00      	nop
 8003de2:	3718      	adds	r7, #24
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	20000cc4 	.word	0x20000cc4

08003dec <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003df4:	f107 0308 	add.w	r3, r7, #8
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f000 f857 	bl	8003eac <prvGetNextExpireTime>
 8003dfe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	4619      	mov	r1, r3
 8003e04:	68f8      	ldr	r0, [r7, #12]
 8003e06:	f000 f803 	bl	8003e10 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003e0a:	f000 f8d5 	bl	8003fb8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003e0e:	e7f1      	b.n	8003df4 <prvTimerTask+0x8>

08003e10 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003e1a:	f7ff fa4b 	bl	80032b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e1e:	f107 0308 	add.w	r3, r7, #8
 8003e22:	4618      	mov	r0, r3
 8003e24:	f000 f866 	bl	8003ef4 <prvSampleTimeNow>
 8003e28:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d130      	bne.n	8003e92 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10a      	bne.n	8003e4c <prvProcessTimerOrBlockTask+0x3c>
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d806      	bhi.n	8003e4c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003e3e:	f7ff fa47 	bl	80032d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003e42:	68f9      	ldr	r1, [r7, #12]
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f7ff ff91 	bl	8003d6c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003e4a:	e024      	b.n	8003e96 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d008      	beq.n	8003e64 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003e52:	4b13      	ldr	r3, [pc, #76]	; (8003ea0 <prvProcessTimerOrBlockTask+0x90>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	bf0c      	ite	eq
 8003e5c:	2301      	moveq	r3, #1
 8003e5e:	2300      	movne	r3, #0
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003e64:	4b0f      	ldr	r3, [pc, #60]	; (8003ea4 <prvProcessTimerOrBlockTask+0x94>)
 8003e66:	6818      	ldr	r0, [r3, #0]
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	683a      	ldr	r2, [r7, #0]
 8003e70:	4619      	mov	r1, r3
 8003e72:	f7fe ffed 	bl	8002e50 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003e76:	f7ff fa2b 	bl	80032d0 <xTaskResumeAll>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d10a      	bne.n	8003e96 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003e80:	4b09      	ldr	r3, [pc, #36]	; (8003ea8 <prvProcessTimerOrBlockTask+0x98>)
 8003e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e86:	601a      	str	r2, [r3, #0]
 8003e88:	f3bf 8f4f 	dsb	sy
 8003e8c:	f3bf 8f6f 	isb	sy
}
 8003e90:	e001      	b.n	8003e96 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003e92:	f7ff fa1d 	bl	80032d0 <xTaskResumeAll>
}
 8003e96:	bf00      	nop
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	20000cc8 	.word	0x20000cc8
 8003ea4:	20000ccc 	.word	0x20000ccc
 8003ea8:	e000ed04 	.word	0xe000ed04

08003eac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003eb4:	4b0e      	ldr	r3, [pc, #56]	; (8003ef0 <prvGetNextExpireTime+0x44>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	bf0c      	ite	eq
 8003ebe:	2301      	moveq	r3, #1
 8003ec0:	2300      	movne	r3, #0
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d105      	bne.n	8003ede <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ed2:	4b07      	ldr	r3, [pc, #28]	; (8003ef0 <prvGetNextExpireTime+0x44>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	60fb      	str	r3, [r7, #12]
 8003edc:	e001      	b.n	8003ee2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3714      	adds	r7, #20
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bc80      	pop	{r7}
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	20000cc4 	.word	0x20000cc4

08003ef4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003efc:	f7ff fa86 	bl	800340c <xTaskGetTickCount>
 8003f00:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003f02:	4b0b      	ldr	r3, [pc, #44]	; (8003f30 <prvSampleTimeNow+0x3c>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d205      	bcs.n	8003f18 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003f0c:	f000 f908 	bl	8004120 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	601a      	str	r2, [r3, #0]
 8003f16:	e002      	b.n	8003f1e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003f1e:	4a04      	ldr	r2, [pc, #16]	; (8003f30 <prvSampleTimeNow+0x3c>)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003f24:	68fb      	ldr	r3, [r7, #12]
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	20000cd4 	.word	0x20000cd4

08003f34 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b086      	sub	sp, #24
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]
 8003f40:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003f42:	2300      	movs	r3, #0
 8003f44:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003f52:	68ba      	ldr	r2, [r7, #8]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d812      	bhi.n	8003f80 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	1ad2      	subs	r2, r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d302      	bcc.n	8003f6e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	617b      	str	r3, [r7, #20]
 8003f6c:	e01b      	b.n	8003fa6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003f6e:	4b10      	ldr	r3, [pc, #64]	; (8003fb0 <prvInsertTimerInActiveList+0x7c>)
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	3304      	adds	r3, #4
 8003f76:	4619      	mov	r1, r3
 8003f78:	4610      	mov	r0, r2
 8003f7a:	f7fe fa57 	bl	800242c <vListInsert>
 8003f7e:	e012      	b.n	8003fa6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d206      	bcs.n	8003f96 <prvInsertTimerInActiveList+0x62>
 8003f88:	68ba      	ldr	r2, [r7, #8]
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d302      	bcc.n	8003f96 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003f90:	2301      	movs	r3, #1
 8003f92:	617b      	str	r3, [r7, #20]
 8003f94:	e007      	b.n	8003fa6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f96:	4b07      	ldr	r3, [pc, #28]	; (8003fb4 <prvInsertTimerInActiveList+0x80>)
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	3304      	adds	r3, #4
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	4610      	mov	r0, r2
 8003fa2:	f7fe fa43 	bl	800242c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003fa6:	697b      	ldr	r3, [r7, #20]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3718      	adds	r7, #24
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	20000cc8 	.word	0x20000cc8
 8003fb4:	20000cc4 	.word	0x20000cc4

08003fb8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b08e      	sub	sp, #56	; 0x38
 8003fbc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003fbe:	e09d      	b.n	80040fc <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	da18      	bge.n	8003ff8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003fc6:	1d3b      	adds	r3, r7, #4
 8003fc8:	3304      	adds	r3, #4
 8003fca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10a      	bne.n	8003fe8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd6:	f383 8811 	msr	BASEPRI, r3
 8003fda:	f3bf 8f6f 	isb	sy
 8003fde:	f3bf 8f4f 	dsb	sy
 8003fe2:	61fb      	str	r3, [r7, #28]
}
 8003fe4:	bf00      	nop
 8003fe6:	e7fe      	b.n	8003fe6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fee:	6850      	ldr	r0, [r2, #4]
 8003ff0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ff2:	6892      	ldr	r2, [r2, #8]
 8003ff4:	4611      	mov	r1, r2
 8003ff6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	db7d      	blt.n	80040fa <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d004      	beq.n	8004014 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800400a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800400c:	3304      	adds	r3, #4
 800400e:	4618      	mov	r0, r3
 8004010:	f7fe fa44 	bl	800249c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004014:	463b      	mov	r3, r7
 8004016:	4618      	mov	r0, r3
 8004018:	f7ff ff6c 	bl	8003ef4 <prvSampleTimeNow>
 800401c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2b09      	cmp	r3, #9
 8004022:	d86b      	bhi.n	80040fc <prvProcessReceivedCommands+0x144>
 8004024:	a201      	add	r2, pc, #4	; (adr r2, 800402c <prvProcessReceivedCommands+0x74>)
 8004026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402a:	bf00      	nop
 800402c:	08004055 	.word	0x08004055
 8004030:	08004055 	.word	0x08004055
 8004034:	08004055 	.word	0x08004055
 8004038:	080040fd 	.word	0x080040fd
 800403c:	080040b1 	.word	0x080040b1
 8004040:	080040e9 	.word	0x080040e9
 8004044:	08004055 	.word	0x08004055
 8004048:	08004055 	.word	0x08004055
 800404c:	080040fd 	.word	0x080040fd
 8004050:	080040b1 	.word	0x080040b1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	18d1      	adds	r1, r2, r3
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004060:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004062:	f7ff ff67 	bl	8003f34 <prvInsertTimerInActiveList>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d047      	beq.n	80040fc <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800406c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800406e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004070:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004072:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004076:	69db      	ldr	r3, [r3, #28]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d13f      	bne.n	80040fc <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800407c:	68ba      	ldr	r2, [r7, #8]
 800407e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	441a      	add	r2, r3
 8004084:	2300      	movs	r3, #0
 8004086:	9300      	str	r3, [sp, #0]
 8004088:	2300      	movs	r3, #0
 800408a:	2100      	movs	r1, #0
 800408c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800408e:	f7ff fe1f 	bl	8003cd0 <xTimerGenericCommand>
 8004092:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004094:	6a3b      	ldr	r3, [r7, #32]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d130      	bne.n	80040fc <prvProcessReceivedCommands+0x144>
	__asm volatile
 800409a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409e:	f383 8811 	msr	BASEPRI, r3
 80040a2:	f3bf 8f6f 	isb	sy
 80040a6:	f3bf 8f4f 	dsb	sy
 80040aa:	61bb      	str	r3, [r7, #24]
}
 80040ac:	bf00      	nop
 80040ae:	e7fe      	b.n	80040ae <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80040b0:	68ba      	ldr	r2, [r7, #8]
 80040b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80040b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d10a      	bne.n	80040d4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80040be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c2:	f383 8811 	msr	BASEPRI, r3
 80040c6:	f3bf 8f6f 	isb	sy
 80040ca:	f3bf 8f4f 	dsb	sy
 80040ce:	617b      	str	r3, [r7, #20]
}
 80040d0:	bf00      	nop
 80040d2:	e7fe      	b.n	80040d2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80040d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d6:	699a      	ldr	r2, [r3, #24]
 80040d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040da:	18d1      	adds	r1, r2, r3
 80040dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040e2:	f7ff ff27 	bl	8003f34 <prvInsertTimerInActiveList>
					break;
 80040e6:	e009      	b.n	80040fc <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80040e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d104      	bne.n	80040fc <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80040f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040f4:	f000 fb6e 	bl	80047d4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80040f8:	e000      	b.n	80040fc <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80040fa:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80040fc:	4b07      	ldr	r3, [pc, #28]	; (800411c <prvProcessReceivedCommands+0x164>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	1d39      	adds	r1, r7, #4
 8004102:	2200      	movs	r2, #0
 8004104:	4618      	mov	r0, r3
 8004106:	f7fe fc8b 	bl	8002a20 <xQueueReceive>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	f47f af57 	bne.w	8003fc0 <prvProcessReceivedCommands+0x8>
	}
}
 8004112:	bf00      	nop
 8004114:	bf00      	nop
 8004116:	3730      	adds	r7, #48	; 0x30
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	20000ccc 	.word	0x20000ccc

08004120 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b088      	sub	sp, #32
 8004124:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004126:	e045      	b.n	80041b4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004128:	4b2c      	ldr	r3, [pc, #176]	; (80041dc <prvSwitchTimerLists+0xbc>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004132:	4b2a      	ldr	r3, [pc, #168]	; (80041dc <prvSwitchTimerLists+0xbc>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	3304      	adds	r3, #4
 8004140:	4618      	mov	r0, r3
 8004142:	f7fe f9ab 	bl	800249c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	69db      	ldr	r3, [r3, #28]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d12e      	bne.n	80041b4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	4413      	add	r3, r2
 800415e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004160:	68ba      	ldr	r2, [r7, #8]
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	429a      	cmp	r2, r3
 8004166:	d90e      	bls.n	8004186 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	68ba      	ldr	r2, [r7, #8]
 800416c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004174:	4b19      	ldr	r3, [pc, #100]	; (80041dc <prvSwitchTimerLists+0xbc>)
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	3304      	adds	r3, #4
 800417c:	4619      	mov	r1, r3
 800417e:	4610      	mov	r0, r2
 8004180:	f7fe f954 	bl	800242c <vListInsert>
 8004184:	e016      	b.n	80041b4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004186:	2300      	movs	r3, #0
 8004188:	9300      	str	r3, [sp, #0]
 800418a:	2300      	movs	r3, #0
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	2100      	movs	r1, #0
 8004190:	68f8      	ldr	r0, [r7, #12]
 8004192:	f7ff fd9d 	bl	8003cd0 <xTimerGenericCommand>
 8004196:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10a      	bne.n	80041b4 <prvSwitchTimerLists+0x94>
	__asm volatile
 800419e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a2:	f383 8811 	msr	BASEPRI, r3
 80041a6:	f3bf 8f6f 	isb	sy
 80041aa:	f3bf 8f4f 	dsb	sy
 80041ae:	603b      	str	r3, [r7, #0]
}
 80041b0:	bf00      	nop
 80041b2:	e7fe      	b.n	80041b2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80041b4:	4b09      	ldr	r3, [pc, #36]	; (80041dc <prvSwitchTimerLists+0xbc>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1b4      	bne.n	8004128 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80041be:	4b07      	ldr	r3, [pc, #28]	; (80041dc <prvSwitchTimerLists+0xbc>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80041c4:	4b06      	ldr	r3, [pc, #24]	; (80041e0 <prvSwitchTimerLists+0xc0>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a04      	ldr	r2, [pc, #16]	; (80041dc <prvSwitchTimerLists+0xbc>)
 80041ca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80041cc:	4a04      	ldr	r2, [pc, #16]	; (80041e0 <prvSwitchTimerLists+0xc0>)
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	6013      	str	r3, [r2, #0]
}
 80041d2:	bf00      	nop
 80041d4:	3718      	adds	r7, #24
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	20000cc4 	.word	0x20000cc4
 80041e0:	20000cc8 	.word	0x20000cc8

080041e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80041ea:	f000 f92f 	bl	800444c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80041ee:	4b15      	ldr	r3, [pc, #84]	; (8004244 <prvCheckForValidListAndQueue+0x60>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d120      	bne.n	8004238 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80041f6:	4814      	ldr	r0, [pc, #80]	; (8004248 <prvCheckForValidListAndQueue+0x64>)
 80041f8:	f7fe f8ca 	bl	8002390 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80041fc:	4813      	ldr	r0, [pc, #76]	; (800424c <prvCheckForValidListAndQueue+0x68>)
 80041fe:	f7fe f8c7 	bl	8002390 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004202:	4b13      	ldr	r3, [pc, #76]	; (8004250 <prvCheckForValidListAndQueue+0x6c>)
 8004204:	4a10      	ldr	r2, [pc, #64]	; (8004248 <prvCheckForValidListAndQueue+0x64>)
 8004206:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004208:	4b12      	ldr	r3, [pc, #72]	; (8004254 <prvCheckForValidListAndQueue+0x70>)
 800420a:	4a10      	ldr	r2, [pc, #64]	; (800424c <prvCheckForValidListAndQueue+0x68>)
 800420c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800420e:	2300      	movs	r3, #0
 8004210:	9300      	str	r3, [sp, #0]
 8004212:	4b11      	ldr	r3, [pc, #68]	; (8004258 <prvCheckForValidListAndQueue+0x74>)
 8004214:	4a11      	ldr	r2, [pc, #68]	; (800425c <prvCheckForValidListAndQueue+0x78>)
 8004216:	2110      	movs	r1, #16
 8004218:	200a      	movs	r0, #10
 800421a:	f7fe f9d1 	bl	80025c0 <xQueueGenericCreateStatic>
 800421e:	4603      	mov	r3, r0
 8004220:	4a08      	ldr	r2, [pc, #32]	; (8004244 <prvCheckForValidListAndQueue+0x60>)
 8004222:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004224:	4b07      	ldr	r3, [pc, #28]	; (8004244 <prvCheckForValidListAndQueue+0x60>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d005      	beq.n	8004238 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800422c:	4b05      	ldr	r3, [pc, #20]	; (8004244 <prvCheckForValidListAndQueue+0x60>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	490b      	ldr	r1, [pc, #44]	; (8004260 <prvCheckForValidListAndQueue+0x7c>)
 8004232:	4618      	mov	r0, r3
 8004234:	f7fe fde4 	bl	8002e00 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004238:	f000 f938 	bl	80044ac <vPortExitCritical>
}
 800423c:	bf00      	nop
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	20000ccc 	.word	0x20000ccc
 8004248:	20000c9c 	.word	0x20000c9c
 800424c:	20000cb0 	.word	0x20000cb0
 8004250:	20000cc4 	.word	0x20000cc4
 8004254:	20000cc8 	.word	0x20000cc8
 8004258:	20000d78 	.word	0x20000d78
 800425c:	20000cd8 	.word	0x20000cd8
 8004260:	08004bb8 	.word	0x08004bb8

08004264 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	3b04      	subs	r3, #4
 8004274:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800427c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	3b04      	subs	r3, #4
 8004282:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	f023 0201 	bic.w	r2, r3, #1
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	3b04      	subs	r3, #4
 8004292:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004294:	4a08      	ldr	r2, [pc, #32]	; (80042b8 <pxPortInitialiseStack+0x54>)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	3b14      	subs	r3, #20
 800429e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	3b20      	subs	r3, #32
 80042aa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80042ac:	68fb      	ldr	r3, [r7, #12]
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3714      	adds	r7, #20
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bc80      	pop	{r7}
 80042b6:	4770      	bx	lr
 80042b8:	080042bd 	.word	0x080042bd

080042bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80042c2:	2300      	movs	r3, #0
 80042c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80042c6:	4b12      	ldr	r3, [pc, #72]	; (8004310 <prvTaskExitError+0x54>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ce:	d00a      	beq.n	80042e6 <prvTaskExitError+0x2a>
	__asm volatile
 80042d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d4:	f383 8811 	msr	BASEPRI, r3
 80042d8:	f3bf 8f6f 	isb	sy
 80042dc:	f3bf 8f4f 	dsb	sy
 80042e0:	60fb      	str	r3, [r7, #12]
}
 80042e2:	bf00      	nop
 80042e4:	e7fe      	b.n	80042e4 <prvTaskExitError+0x28>
	__asm volatile
 80042e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ea:	f383 8811 	msr	BASEPRI, r3
 80042ee:	f3bf 8f6f 	isb	sy
 80042f2:	f3bf 8f4f 	dsb	sy
 80042f6:	60bb      	str	r3, [r7, #8]
}
 80042f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80042fa:	bf00      	nop
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d0fc      	beq.n	80042fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004302:	bf00      	nop
 8004304:	bf00      	nop
 8004306:	3714      	adds	r7, #20
 8004308:	46bd      	mov	sp, r7
 800430a:	bc80      	pop	{r7}
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	2000001c 	.word	0x2000001c
	...

08004320 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004320:	4b07      	ldr	r3, [pc, #28]	; (8004340 <pxCurrentTCBConst2>)
 8004322:	6819      	ldr	r1, [r3, #0]
 8004324:	6808      	ldr	r0, [r1, #0]
 8004326:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800432a:	f380 8809 	msr	PSP, r0
 800432e:	f3bf 8f6f 	isb	sy
 8004332:	f04f 0000 	mov.w	r0, #0
 8004336:	f380 8811 	msr	BASEPRI, r0
 800433a:	f04e 0e0d 	orr.w	lr, lr, #13
 800433e:	4770      	bx	lr

08004340 <pxCurrentTCBConst2>:
 8004340:	2000079c 	.word	0x2000079c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004344:	bf00      	nop
 8004346:	bf00      	nop

08004348 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004348:	4806      	ldr	r0, [pc, #24]	; (8004364 <prvPortStartFirstTask+0x1c>)
 800434a:	6800      	ldr	r0, [r0, #0]
 800434c:	6800      	ldr	r0, [r0, #0]
 800434e:	f380 8808 	msr	MSP, r0
 8004352:	b662      	cpsie	i
 8004354:	b661      	cpsie	f
 8004356:	f3bf 8f4f 	dsb	sy
 800435a:	f3bf 8f6f 	isb	sy
 800435e:	df00      	svc	0
 8004360:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004362:	bf00      	nop
 8004364:	e000ed08 	.word	0xe000ed08

08004368 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800436e:	4b32      	ldr	r3, [pc, #200]	; (8004438 <xPortStartScheduler+0xd0>)
 8004370:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	b2db      	uxtb	r3, r3
 8004378:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	22ff      	movs	r2, #255	; 0xff
 800437e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	b2db      	uxtb	r3, r3
 8004386:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004388:	78fb      	ldrb	r3, [r7, #3]
 800438a:	b2db      	uxtb	r3, r3
 800438c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004390:	b2da      	uxtb	r2, r3
 8004392:	4b2a      	ldr	r3, [pc, #168]	; (800443c <xPortStartScheduler+0xd4>)
 8004394:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004396:	4b2a      	ldr	r3, [pc, #168]	; (8004440 <xPortStartScheduler+0xd8>)
 8004398:	2207      	movs	r2, #7
 800439a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800439c:	e009      	b.n	80043b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800439e:	4b28      	ldr	r3, [pc, #160]	; (8004440 <xPortStartScheduler+0xd8>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	3b01      	subs	r3, #1
 80043a4:	4a26      	ldr	r2, [pc, #152]	; (8004440 <xPortStartScheduler+0xd8>)
 80043a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80043a8:	78fb      	ldrb	r3, [r7, #3]
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	005b      	lsls	r3, r3, #1
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043b2:	78fb      	ldrb	r3, [r7, #3]
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ba:	2b80      	cmp	r3, #128	; 0x80
 80043bc:	d0ef      	beq.n	800439e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80043be:	4b20      	ldr	r3, [pc, #128]	; (8004440 <xPortStartScheduler+0xd8>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f1c3 0307 	rsb	r3, r3, #7
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	d00a      	beq.n	80043e0 <xPortStartScheduler+0x78>
	__asm volatile
 80043ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ce:	f383 8811 	msr	BASEPRI, r3
 80043d2:	f3bf 8f6f 	isb	sy
 80043d6:	f3bf 8f4f 	dsb	sy
 80043da:	60bb      	str	r3, [r7, #8]
}
 80043dc:	bf00      	nop
 80043de:	e7fe      	b.n	80043de <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80043e0:	4b17      	ldr	r3, [pc, #92]	; (8004440 <xPortStartScheduler+0xd8>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	021b      	lsls	r3, r3, #8
 80043e6:	4a16      	ldr	r2, [pc, #88]	; (8004440 <xPortStartScheduler+0xd8>)
 80043e8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80043ea:	4b15      	ldr	r3, [pc, #84]	; (8004440 <xPortStartScheduler+0xd8>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043f2:	4a13      	ldr	r2, [pc, #76]	; (8004440 <xPortStartScheduler+0xd8>)
 80043f4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80043fe:	4b11      	ldr	r3, [pc, #68]	; (8004444 <xPortStartScheduler+0xdc>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a10      	ldr	r2, [pc, #64]	; (8004444 <xPortStartScheduler+0xdc>)
 8004404:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004408:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800440a:	4b0e      	ldr	r3, [pc, #56]	; (8004444 <xPortStartScheduler+0xdc>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a0d      	ldr	r2, [pc, #52]	; (8004444 <xPortStartScheduler+0xdc>)
 8004410:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004414:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004416:	f000 f8b9 	bl	800458c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800441a:	4b0b      	ldr	r3, [pc, #44]	; (8004448 <xPortStartScheduler+0xe0>)
 800441c:	2200      	movs	r2, #0
 800441e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004420:	f7ff ff92 	bl	8004348 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004424:	f7ff f8be 	bl	80035a4 <vTaskSwitchContext>
	prvTaskExitError();
 8004428:	f7ff ff48 	bl	80042bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3710      	adds	r7, #16
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	e000e400 	.word	0xe000e400
 800443c:	20000dc8 	.word	0x20000dc8
 8004440:	20000dcc 	.word	0x20000dcc
 8004444:	e000ed20 	.word	0xe000ed20
 8004448:	2000001c 	.word	0x2000001c

0800444c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
	__asm volatile
 8004452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004456:	f383 8811 	msr	BASEPRI, r3
 800445a:	f3bf 8f6f 	isb	sy
 800445e:	f3bf 8f4f 	dsb	sy
 8004462:	607b      	str	r3, [r7, #4]
}
 8004464:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004466:	4b0f      	ldr	r3, [pc, #60]	; (80044a4 <vPortEnterCritical+0x58>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	3301      	adds	r3, #1
 800446c:	4a0d      	ldr	r2, [pc, #52]	; (80044a4 <vPortEnterCritical+0x58>)
 800446e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004470:	4b0c      	ldr	r3, [pc, #48]	; (80044a4 <vPortEnterCritical+0x58>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2b01      	cmp	r3, #1
 8004476:	d10f      	bne.n	8004498 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004478:	4b0b      	ldr	r3, [pc, #44]	; (80044a8 <vPortEnterCritical+0x5c>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00a      	beq.n	8004498 <vPortEnterCritical+0x4c>
	__asm volatile
 8004482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004486:	f383 8811 	msr	BASEPRI, r3
 800448a:	f3bf 8f6f 	isb	sy
 800448e:	f3bf 8f4f 	dsb	sy
 8004492:	603b      	str	r3, [r7, #0]
}
 8004494:	bf00      	nop
 8004496:	e7fe      	b.n	8004496 <vPortEnterCritical+0x4a>
	}
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	bc80      	pop	{r7}
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	2000001c 	.word	0x2000001c
 80044a8:	e000ed04 	.word	0xe000ed04

080044ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80044b2:	4b11      	ldr	r3, [pc, #68]	; (80044f8 <vPortExitCritical+0x4c>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10a      	bne.n	80044d0 <vPortExitCritical+0x24>
	__asm volatile
 80044ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044be:	f383 8811 	msr	BASEPRI, r3
 80044c2:	f3bf 8f6f 	isb	sy
 80044c6:	f3bf 8f4f 	dsb	sy
 80044ca:	607b      	str	r3, [r7, #4]
}
 80044cc:	bf00      	nop
 80044ce:	e7fe      	b.n	80044ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80044d0:	4b09      	ldr	r3, [pc, #36]	; (80044f8 <vPortExitCritical+0x4c>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	3b01      	subs	r3, #1
 80044d6:	4a08      	ldr	r2, [pc, #32]	; (80044f8 <vPortExitCritical+0x4c>)
 80044d8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80044da:	4b07      	ldr	r3, [pc, #28]	; (80044f8 <vPortExitCritical+0x4c>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d105      	bne.n	80044ee <vPortExitCritical+0x42>
 80044e2:	2300      	movs	r3, #0
 80044e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	f383 8811 	msr	BASEPRI, r3
}
 80044ec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80044ee:	bf00      	nop
 80044f0:	370c      	adds	r7, #12
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bc80      	pop	{r7}
 80044f6:	4770      	bx	lr
 80044f8:	2000001c 	.word	0x2000001c
 80044fc:	00000000 	.word	0x00000000

08004500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004500:	f3ef 8009 	mrs	r0, PSP
 8004504:	f3bf 8f6f 	isb	sy
 8004508:	4b0d      	ldr	r3, [pc, #52]	; (8004540 <pxCurrentTCBConst>)
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004510:	6010      	str	r0, [r2, #0]
 8004512:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004516:	f04f 0050 	mov.w	r0, #80	; 0x50
 800451a:	f380 8811 	msr	BASEPRI, r0
 800451e:	f7ff f841 	bl	80035a4 <vTaskSwitchContext>
 8004522:	f04f 0000 	mov.w	r0, #0
 8004526:	f380 8811 	msr	BASEPRI, r0
 800452a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800452e:	6819      	ldr	r1, [r3, #0]
 8004530:	6808      	ldr	r0, [r1, #0]
 8004532:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004536:	f380 8809 	msr	PSP, r0
 800453a:	f3bf 8f6f 	isb	sy
 800453e:	4770      	bx	lr

08004540 <pxCurrentTCBConst>:
 8004540:	2000079c 	.word	0x2000079c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004544:	bf00      	nop
 8004546:	bf00      	nop

08004548 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
	__asm volatile
 800454e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004552:	f383 8811 	msr	BASEPRI, r3
 8004556:	f3bf 8f6f 	isb	sy
 800455a:	f3bf 8f4f 	dsb	sy
 800455e:	607b      	str	r3, [r7, #4]
}
 8004560:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004562:	f7fe ff61 	bl	8003428 <xTaskIncrementTick>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d003      	beq.n	8004574 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800456c:	4b06      	ldr	r3, [pc, #24]	; (8004588 <xPortSysTickHandler+0x40>)
 800456e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004572:	601a      	str	r2, [r3, #0]
 8004574:	2300      	movs	r3, #0
 8004576:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	f383 8811 	msr	BASEPRI, r3
}
 800457e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004580:	bf00      	nop
 8004582:	3708      	adds	r7, #8
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	e000ed04 	.word	0xe000ed04

0800458c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800458c:	b480      	push	{r7}
 800458e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004590:	4b0a      	ldr	r3, [pc, #40]	; (80045bc <vPortSetupTimerInterrupt+0x30>)
 8004592:	2200      	movs	r2, #0
 8004594:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004596:	4b0a      	ldr	r3, [pc, #40]	; (80045c0 <vPortSetupTimerInterrupt+0x34>)
 8004598:	2200      	movs	r2, #0
 800459a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800459c:	4b09      	ldr	r3, [pc, #36]	; (80045c4 <vPortSetupTimerInterrupt+0x38>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a09      	ldr	r2, [pc, #36]	; (80045c8 <vPortSetupTimerInterrupt+0x3c>)
 80045a2:	fba2 2303 	umull	r2, r3, r2, r3
 80045a6:	099b      	lsrs	r3, r3, #6
 80045a8:	4a08      	ldr	r2, [pc, #32]	; (80045cc <vPortSetupTimerInterrupt+0x40>)
 80045aa:	3b01      	subs	r3, #1
 80045ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80045ae:	4b03      	ldr	r3, [pc, #12]	; (80045bc <vPortSetupTimerInterrupt+0x30>)
 80045b0:	2207      	movs	r2, #7
 80045b2:	601a      	str	r2, [r3, #0]
}
 80045b4:	bf00      	nop
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bc80      	pop	{r7}
 80045ba:	4770      	bx	lr
 80045bc:	e000e010 	.word	0xe000e010
 80045c0:	e000e018 	.word	0xe000e018
 80045c4:	20000010 	.word	0x20000010
 80045c8:	10624dd3 	.word	0x10624dd3
 80045cc:	e000e014 	.word	0xe000e014

080045d0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80045d6:	f3ef 8305 	mrs	r3, IPSR
 80045da:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2b0f      	cmp	r3, #15
 80045e0:	d914      	bls.n	800460c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80045e2:	4a16      	ldr	r2, [pc, #88]	; (800463c <vPortValidateInterruptPriority+0x6c>)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	4413      	add	r3, r2
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80045ec:	4b14      	ldr	r3, [pc, #80]	; (8004640 <vPortValidateInterruptPriority+0x70>)
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	7afa      	ldrb	r2, [r7, #11]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d20a      	bcs.n	800460c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80045f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fa:	f383 8811 	msr	BASEPRI, r3
 80045fe:	f3bf 8f6f 	isb	sy
 8004602:	f3bf 8f4f 	dsb	sy
 8004606:	607b      	str	r3, [r7, #4]
}
 8004608:	bf00      	nop
 800460a:	e7fe      	b.n	800460a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800460c:	4b0d      	ldr	r3, [pc, #52]	; (8004644 <vPortValidateInterruptPriority+0x74>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004614:	4b0c      	ldr	r3, [pc, #48]	; (8004648 <vPortValidateInterruptPriority+0x78>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	429a      	cmp	r2, r3
 800461a:	d90a      	bls.n	8004632 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800461c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004620:	f383 8811 	msr	BASEPRI, r3
 8004624:	f3bf 8f6f 	isb	sy
 8004628:	f3bf 8f4f 	dsb	sy
 800462c:	603b      	str	r3, [r7, #0]
}
 800462e:	bf00      	nop
 8004630:	e7fe      	b.n	8004630 <vPortValidateInterruptPriority+0x60>
	}
 8004632:	bf00      	nop
 8004634:	3714      	adds	r7, #20
 8004636:	46bd      	mov	sp, r7
 8004638:	bc80      	pop	{r7}
 800463a:	4770      	bx	lr
 800463c:	e000e3f0 	.word	0xe000e3f0
 8004640:	20000dc8 	.word	0x20000dc8
 8004644:	e000ed0c 	.word	0xe000ed0c
 8004648:	20000dcc 	.word	0x20000dcc

0800464c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b08a      	sub	sp, #40	; 0x28
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004654:	2300      	movs	r3, #0
 8004656:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004658:	f7fe fe2c 	bl	80032b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800465c:	4b58      	ldr	r3, [pc, #352]	; (80047c0 <pvPortMalloc+0x174>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d101      	bne.n	8004668 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004664:	f000 f910 	bl	8004888 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004668:	4b56      	ldr	r3, [pc, #344]	; (80047c4 <pvPortMalloc+0x178>)
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4013      	ands	r3, r2
 8004670:	2b00      	cmp	r3, #0
 8004672:	f040 808e 	bne.w	8004792 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d01d      	beq.n	80046b8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800467c:	2208      	movs	r2, #8
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4413      	add	r3, r2
 8004682:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f003 0307 	and.w	r3, r3, #7
 800468a:	2b00      	cmp	r3, #0
 800468c:	d014      	beq.n	80046b8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f023 0307 	bic.w	r3, r3, #7
 8004694:	3308      	adds	r3, #8
 8004696:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f003 0307 	and.w	r3, r3, #7
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00a      	beq.n	80046b8 <pvPortMalloc+0x6c>
	__asm volatile
 80046a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a6:	f383 8811 	msr	BASEPRI, r3
 80046aa:	f3bf 8f6f 	isb	sy
 80046ae:	f3bf 8f4f 	dsb	sy
 80046b2:	617b      	str	r3, [r7, #20]
}
 80046b4:	bf00      	nop
 80046b6:	e7fe      	b.n	80046b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d069      	beq.n	8004792 <pvPortMalloc+0x146>
 80046be:	4b42      	ldr	r3, [pc, #264]	; (80047c8 <pvPortMalloc+0x17c>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d864      	bhi.n	8004792 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80046c8:	4b40      	ldr	r3, [pc, #256]	; (80047cc <pvPortMalloc+0x180>)
 80046ca:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80046cc:	4b3f      	ldr	r3, [pc, #252]	; (80047cc <pvPortMalloc+0x180>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046d2:	e004      	b.n	80046de <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80046d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80046d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d903      	bls.n	80046f0 <pvPortMalloc+0xa4>
 80046e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1f1      	bne.n	80046d4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80046f0:	4b33      	ldr	r3, [pc, #204]	; (80047c0 <pvPortMalloc+0x174>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d04b      	beq.n	8004792 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80046fa:	6a3b      	ldr	r3, [r7, #32]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2208      	movs	r2, #8
 8004700:	4413      	add	r3, r2
 8004702:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	6a3b      	ldr	r3, [r7, #32]
 800470a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800470c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470e:	685a      	ldr	r2, [r3, #4]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	1ad2      	subs	r2, r2, r3
 8004714:	2308      	movs	r3, #8
 8004716:	005b      	lsls	r3, r3, #1
 8004718:	429a      	cmp	r2, r3
 800471a:	d91f      	bls.n	800475c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800471c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4413      	add	r3, r2
 8004722:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	f003 0307 	and.w	r3, r3, #7
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00a      	beq.n	8004744 <pvPortMalloc+0xf8>
	__asm volatile
 800472e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004732:	f383 8811 	msr	BASEPRI, r3
 8004736:	f3bf 8f6f 	isb	sy
 800473a:	f3bf 8f4f 	dsb	sy
 800473e:	613b      	str	r3, [r7, #16]
}
 8004740:	bf00      	nop
 8004742:	e7fe      	b.n	8004742 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004746:	685a      	ldr	r2, [r3, #4]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	1ad2      	subs	r2, r2, r3
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004756:	69b8      	ldr	r0, [r7, #24]
 8004758:	f000 f8f8 	bl	800494c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800475c:	4b1a      	ldr	r3, [pc, #104]	; (80047c8 <pvPortMalloc+0x17c>)
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	4a18      	ldr	r2, [pc, #96]	; (80047c8 <pvPortMalloc+0x17c>)
 8004768:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800476a:	4b17      	ldr	r3, [pc, #92]	; (80047c8 <pvPortMalloc+0x17c>)
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	4b18      	ldr	r3, [pc, #96]	; (80047d0 <pvPortMalloc+0x184>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	429a      	cmp	r2, r3
 8004774:	d203      	bcs.n	800477e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004776:	4b14      	ldr	r3, [pc, #80]	; (80047c8 <pvPortMalloc+0x17c>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a15      	ldr	r2, [pc, #84]	; (80047d0 <pvPortMalloc+0x184>)
 800477c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800477e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004780:	685a      	ldr	r2, [r3, #4]
 8004782:	4b10      	ldr	r3, [pc, #64]	; (80047c4 <pvPortMalloc+0x178>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	431a      	orrs	r2, r3
 8004788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478e:	2200      	movs	r2, #0
 8004790:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004792:	f7fe fd9d 	bl	80032d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	f003 0307 	and.w	r3, r3, #7
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00a      	beq.n	80047b6 <pvPortMalloc+0x16a>
	__asm volatile
 80047a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a4:	f383 8811 	msr	BASEPRI, r3
 80047a8:	f3bf 8f6f 	isb	sy
 80047ac:	f3bf 8f4f 	dsb	sy
 80047b0:	60fb      	str	r3, [r7, #12]
}
 80047b2:	bf00      	nop
 80047b4:	e7fe      	b.n	80047b4 <pvPortMalloc+0x168>
	return pvReturn;
 80047b6:	69fb      	ldr	r3, [r7, #28]
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3728      	adds	r7, #40	; 0x28
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	200019d8 	.word	0x200019d8
 80047c4:	200019e4 	.word	0x200019e4
 80047c8:	200019dc 	.word	0x200019dc
 80047cc:	200019d0 	.word	0x200019d0
 80047d0:	200019e0 	.word	0x200019e0

080047d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b086      	sub	sp, #24
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d048      	beq.n	8004878 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80047e6:	2308      	movs	r3, #8
 80047e8:	425b      	negs	r3, r3
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	4413      	add	r3, r2
 80047ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	685a      	ldr	r2, [r3, #4]
 80047f8:	4b21      	ldr	r3, [pc, #132]	; (8004880 <vPortFree+0xac>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4013      	ands	r3, r2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10a      	bne.n	8004818 <vPortFree+0x44>
	__asm volatile
 8004802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004806:	f383 8811 	msr	BASEPRI, r3
 800480a:	f3bf 8f6f 	isb	sy
 800480e:	f3bf 8f4f 	dsb	sy
 8004812:	60fb      	str	r3, [r7, #12]
}
 8004814:	bf00      	nop
 8004816:	e7fe      	b.n	8004816 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00a      	beq.n	8004836 <vPortFree+0x62>
	__asm volatile
 8004820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004824:	f383 8811 	msr	BASEPRI, r3
 8004828:	f3bf 8f6f 	isb	sy
 800482c:	f3bf 8f4f 	dsb	sy
 8004830:	60bb      	str	r3, [r7, #8]
}
 8004832:	bf00      	nop
 8004834:	e7fe      	b.n	8004834 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	4b11      	ldr	r3, [pc, #68]	; (8004880 <vPortFree+0xac>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4013      	ands	r3, r2
 8004840:	2b00      	cmp	r3, #0
 8004842:	d019      	beq.n	8004878 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d115      	bne.n	8004878 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	4b0b      	ldr	r3, [pc, #44]	; (8004880 <vPortFree+0xac>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	43db      	mvns	r3, r3
 8004856:	401a      	ands	r2, r3
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800485c:	f7fe fd2a 	bl	80032b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	4b07      	ldr	r3, [pc, #28]	; (8004884 <vPortFree+0xb0>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4413      	add	r3, r2
 800486a:	4a06      	ldr	r2, [pc, #24]	; (8004884 <vPortFree+0xb0>)
 800486c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800486e:	6938      	ldr	r0, [r7, #16]
 8004870:	f000 f86c 	bl	800494c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004874:	f7fe fd2c 	bl	80032d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004878:	bf00      	nop
 800487a:	3718      	adds	r7, #24
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	200019e4 	.word	0x200019e4
 8004884:	200019dc 	.word	0x200019dc

08004888 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800488e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004892:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004894:	4b27      	ldr	r3, [pc, #156]	; (8004934 <prvHeapInit+0xac>)
 8004896:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f003 0307 	and.w	r3, r3, #7
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00c      	beq.n	80048bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	3307      	adds	r3, #7
 80048a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f023 0307 	bic.w	r3, r3, #7
 80048ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	4a1f      	ldr	r2, [pc, #124]	; (8004934 <prvHeapInit+0xac>)
 80048b8:	4413      	add	r3, r2
 80048ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80048c0:	4a1d      	ldr	r2, [pc, #116]	; (8004938 <prvHeapInit+0xb0>)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80048c6:	4b1c      	ldr	r3, [pc, #112]	; (8004938 <prvHeapInit+0xb0>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	68ba      	ldr	r2, [r7, #8]
 80048d0:	4413      	add	r3, r2
 80048d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80048d4:	2208      	movs	r2, #8
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	1a9b      	subs	r3, r3, r2
 80048da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f023 0307 	bic.w	r3, r3, #7
 80048e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	4a15      	ldr	r2, [pc, #84]	; (800493c <prvHeapInit+0xb4>)
 80048e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80048ea:	4b14      	ldr	r3, [pc, #80]	; (800493c <prvHeapInit+0xb4>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2200      	movs	r2, #0
 80048f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80048f2:	4b12      	ldr	r3, [pc, #72]	; (800493c <prvHeapInit+0xb4>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2200      	movs	r2, #0
 80048f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	1ad2      	subs	r2, r2, r3
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004908:	4b0c      	ldr	r3, [pc, #48]	; (800493c <prvHeapInit+0xb4>)
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	4a0a      	ldr	r2, [pc, #40]	; (8004940 <prvHeapInit+0xb8>)
 8004916:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	4a09      	ldr	r2, [pc, #36]	; (8004944 <prvHeapInit+0xbc>)
 800491e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004920:	4b09      	ldr	r3, [pc, #36]	; (8004948 <prvHeapInit+0xc0>)
 8004922:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004926:	601a      	str	r2, [r3, #0]
}
 8004928:	bf00      	nop
 800492a:	3714      	adds	r7, #20
 800492c:	46bd      	mov	sp, r7
 800492e:	bc80      	pop	{r7}
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	20000dd0 	.word	0x20000dd0
 8004938:	200019d0 	.word	0x200019d0
 800493c:	200019d8 	.word	0x200019d8
 8004940:	200019e0 	.word	0x200019e0
 8004944:	200019dc 	.word	0x200019dc
 8004948:	200019e4 	.word	0x200019e4

0800494c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004954:	4b27      	ldr	r3, [pc, #156]	; (80049f4 <prvInsertBlockIntoFreeList+0xa8>)
 8004956:	60fb      	str	r3, [r7, #12]
 8004958:	e002      	b.n	8004960 <prvInsertBlockIntoFreeList+0x14>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	60fb      	str	r3, [r7, #12]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	429a      	cmp	r2, r3
 8004968:	d8f7      	bhi.n	800495a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	68ba      	ldr	r2, [r7, #8]
 8004974:	4413      	add	r3, r2
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	429a      	cmp	r2, r3
 800497a:	d108      	bne.n	800498e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	685a      	ldr	r2, [r3, #4]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	441a      	add	r2, r3
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	441a      	add	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d118      	bne.n	80049d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	4b14      	ldr	r3, [pc, #80]	; (80049f8 <prvInsertBlockIntoFreeList+0xac>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d00d      	beq.n	80049ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685a      	ldr	r2, [r3, #4]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	441a      	add	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	601a      	str	r2, [r3, #0]
 80049c8:	e008      	b.n	80049dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80049ca:	4b0b      	ldr	r3, [pc, #44]	; (80049f8 <prvInsertBlockIntoFreeList+0xac>)
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	601a      	str	r2, [r3, #0]
 80049d2:	e003      	b.n	80049dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d002      	beq.n	80049ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049ea:	bf00      	nop
 80049ec:	3714      	adds	r7, #20
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bc80      	pop	{r7}
 80049f2:	4770      	bx	lr
 80049f4:	200019d0 	.word	0x200019d0
 80049f8:	200019d8 	.word	0x200019d8

080049fc <__libc_init_array>:
 80049fc:	b570      	push	{r4, r5, r6, lr}
 80049fe:	2600      	movs	r6, #0
 8004a00:	4d0c      	ldr	r5, [pc, #48]	; (8004a34 <__libc_init_array+0x38>)
 8004a02:	4c0d      	ldr	r4, [pc, #52]	; (8004a38 <__libc_init_array+0x3c>)
 8004a04:	1b64      	subs	r4, r4, r5
 8004a06:	10a4      	asrs	r4, r4, #2
 8004a08:	42a6      	cmp	r6, r4
 8004a0a:	d109      	bne.n	8004a20 <__libc_init_array+0x24>
 8004a0c:	f000 f88c 	bl	8004b28 <_init>
 8004a10:	2600      	movs	r6, #0
 8004a12:	4d0a      	ldr	r5, [pc, #40]	; (8004a3c <__libc_init_array+0x40>)
 8004a14:	4c0a      	ldr	r4, [pc, #40]	; (8004a40 <__libc_init_array+0x44>)
 8004a16:	1b64      	subs	r4, r4, r5
 8004a18:	10a4      	asrs	r4, r4, #2
 8004a1a:	42a6      	cmp	r6, r4
 8004a1c:	d105      	bne.n	8004a2a <__libc_init_array+0x2e>
 8004a1e:	bd70      	pop	{r4, r5, r6, pc}
 8004a20:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a24:	4798      	blx	r3
 8004a26:	3601      	adds	r6, #1
 8004a28:	e7ee      	b.n	8004a08 <__libc_init_array+0xc>
 8004a2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a2e:	4798      	blx	r3
 8004a30:	3601      	adds	r6, #1
 8004a32:	e7f2      	b.n	8004a1a <__libc_init_array+0x1e>
 8004a34:	08004c24 	.word	0x08004c24
 8004a38:	08004c24 	.word	0x08004c24
 8004a3c:	08004c24 	.word	0x08004c24
 8004a40:	08004c28 	.word	0x08004c28

08004a44 <__itoa>:
 8004a44:	1e93      	subs	r3, r2, #2
 8004a46:	2b22      	cmp	r3, #34	; 0x22
 8004a48:	b510      	push	{r4, lr}
 8004a4a:	460c      	mov	r4, r1
 8004a4c:	d904      	bls.n	8004a58 <__itoa+0x14>
 8004a4e:	2300      	movs	r3, #0
 8004a50:	461c      	mov	r4, r3
 8004a52:	700b      	strb	r3, [r1, #0]
 8004a54:	4620      	mov	r0, r4
 8004a56:	bd10      	pop	{r4, pc}
 8004a58:	2a0a      	cmp	r2, #10
 8004a5a:	d109      	bne.n	8004a70 <__itoa+0x2c>
 8004a5c:	2800      	cmp	r0, #0
 8004a5e:	da07      	bge.n	8004a70 <__itoa+0x2c>
 8004a60:	232d      	movs	r3, #45	; 0x2d
 8004a62:	700b      	strb	r3, [r1, #0]
 8004a64:	2101      	movs	r1, #1
 8004a66:	4240      	negs	r0, r0
 8004a68:	4421      	add	r1, r4
 8004a6a:	f000 f81b 	bl	8004aa4 <__utoa>
 8004a6e:	e7f1      	b.n	8004a54 <__itoa+0x10>
 8004a70:	2100      	movs	r1, #0
 8004a72:	e7f9      	b.n	8004a68 <__itoa+0x24>

08004a74 <itoa>:
 8004a74:	f7ff bfe6 	b.w	8004a44 <__itoa>

08004a78 <memcpy>:
 8004a78:	440a      	add	r2, r1
 8004a7a:	4291      	cmp	r1, r2
 8004a7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a80:	d100      	bne.n	8004a84 <memcpy+0xc>
 8004a82:	4770      	bx	lr
 8004a84:	b510      	push	{r4, lr}
 8004a86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a8a:	4291      	cmp	r1, r2
 8004a8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a90:	d1f9      	bne.n	8004a86 <memcpy+0xe>
 8004a92:	bd10      	pop	{r4, pc}

08004a94 <memset>:
 8004a94:	4603      	mov	r3, r0
 8004a96:	4402      	add	r2, r0
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d100      	bne.n	8004a9e <memset+0xa>
 8004a9c:	4770      	bx	lr
 8004a9e:	f803 1b01 	strb.w	r1, [r3], #1
 8004aa2:	e7f9      	b.n	8004a98 <memset+0x4>

08004aa4 <__utoa>:
 8004aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004aa6:	b08b      	sub	sp, #44	; 0x2c
 8004aa8:	4605      	mov	r5, r0
 8004aaa:	460b      	mov	r3, r1
 8004aac:	466e      	mov	r6, sp
 8004aae:	4c1d      	ldr	r4, [pc, #116]	; (8004b24 <__utoa+0x80>)
 8004ab0:	f104 0c20 	add.w	ip, r4, #32
 8004ab4:	4637      	mov	r7, r6
 8004ab6:	6820      	ldr	r0, [r4, #0]
 8004ab8:	6861      	ldr	r1, [r4, #4]
 8004aba:	3408      	adds	r4, #8
 8004abc:	c703      	stmia	r7!, {r0, r1}
 8004abe:	4564      	cmp	r4, ip
 8004ac0:	463e      	mov	r6, r7
 8004ac2:	d1f7      	bne.n	8004ab4 <__utoa+0x10>
 8004ac4:	7921      	ldrb	r1, [r4, #4]
 8004ac6:	6820      	ldr	r0, [r4, #0]
 8004ac8:	7139      	strb	r1, [r7, #4]
 8004aca:	1e91      	subs	r1, r2, #2
 8004acc:	2922      	cmp	r1, #34	; 0x22
 8004ace:	6038      	str	r0, [r7, #0]
 8004ad0:	f04f 0100 	mov.w	r1, #0
 8004ad4:	d904      	bls.n	8004ae0 <__utoa+0x3c>
 8004ad6:	7019      	strb	r1, [r3, #0]
 8004ad8:	460b      	mov	r3, r1
 8004ada:	4618      	mov	r0, r3
 8004adc:	b00b      	add	sp, #44	; 0x2c
 8004ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ae0:	1e58      	subs	r0, r3, #1
 8004ae2:	4684      	mov	ip, r0
 8004ae4:	fbb5 f7f2 	udiv	r7, r5, r2
 8004ae8:	fb02 5617 	mls	r6, r2, r7, r5
 8004aec:	3628      	adds	r6, #40	; 0x28
 8004aee:	446e      	add	r6, sp
 8004af0:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8004af4:	460c      	mov	r4, r1
 8004af6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8004afa:	462e      	mov	r6, r5
 8004afc:	42b2      	cmp	r2, r6
 8004afe:	463d      	mov	r5, r7
 8004b00:	f101 0101 	add.w	r1, r1, #1
 8004b04:	d9ee      	bls.n	8004ae4 <__utoa+0x40>
 8004b06:	2200      	movs	r2, #0
 8004b08:	545a      	strb	r2, [r3, r1]
 8004b0a:	1919      	adds	r1, r3, r4
 8004b0c:	1aa5      	subs	r5, r4, r2
 8004b0e:	42aa      	cmp	r2, r5
 8004b10:	dae3      	bge.n	8004ada <__utoa+0x36>
 8004b12:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8004b16:	780e      	ldrb	r6, [r1, #0]
 8004b18:	3201      	adds	r2, #1
 8004b1a:	7006      	strb	r6, [r0, #0]
 8004b1c:	f801 5901 	strb.w	r5, [r1], #-1
 8004b20:	e7f4      	b.n	8004b0c <__utoa+0x68>
 8004b22:	bf00      	nop
 8004b24:	08004bfc 	.word	0x08004bfc

08004b28 <_init>:
 8004b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b2a:	bf00      	nop
 8004b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b2e:	bc08      	pop	{r3}
 8004b30:	469e      	mov	lr, r3
 8004b32:	4770      	bx	lr

08004b34 <_fini>:
 8004b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b36:	bf00      	nop
 8004b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b3a:	bc08      	pop	{r3}
 8004b3c:	469e      	mov	lr, r3
 8004b3e:	4770      	bx	lr
