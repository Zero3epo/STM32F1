
pon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c38  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08004d48  08004d48  00014d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e0c  08004e0c  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08004e0c  08004e0c  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e0c  08004e0c  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e0c  08004e0c  00014e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e10  08004e10  00014e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08004e14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019c8  20000020  08004e34  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200019e8  08004e34  000219e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c3f  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000293a  00000000  00000000  00030c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f00  00000000  00000000  000335c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e10  00000000  00000000  000344c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003271  00000000  00000000  000352d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c1d  00000000  00000000  00038549  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c477  00000000  00000000  00049166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d55dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d78  00000000  00000000  000d5630  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000020 	.word	0x20000020
 800012c:	00000000 	.word	0x00000000
 8000130:	08004d30 	.word	0x08004d30

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000024 	.word	0x20000024
 800014c:	08004d30 	.word	0x08004d30

08000150 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
 8000156:	4603      	mov	r3, r0
 8000158:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 800015a:	4a38      	ldr	r2, [pc, #224]	; (800023c <HD44780_Init+0xec>)
 800015c:	79fb      	ldrb	r3, [r7, #7]
 800015e:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000160:	4b37      	ldr	r3, [pc, #220]	; (8000240 <HD44780_Init+0xf0>)
 8000162:	2208      	movs	r2, #8
 8000164:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000166:	4b37      	ldr	r3, [pc, #220]	; (8000244 <HD44780_Init+0xf4>)
 8000168:	2200      	movs	r2, #0
 800016a:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 800016c:	4b33      	ldr	r3, [pc, #204]	; (800023c <HD44780_Init+0xec>)
 800016e:	781b      	ldrb	r3, [r3, #0]
 8000170:	2b01      	cmp	r3, #1
 8000172:	d907      	bls.n	8000184 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000174:	4b33      	ldr	r3, [pc, #204]	; (8000244 <HD44780_Init+0xf4>)
 8000176:	781b      	ldrb	r3, [r3, #0]
 8000178:	f043 0308 	orr.w	r3, r3, #8
 800017c:	b2da      	uxtb	r2, r3
 800017e:	4b31      	ldr	r3, [pc, #196]	; (8000244 <HD44780_Init+0xf4>)
 8000180:	701a      	strb	r2, [r3, #0]
 8000182:	e006      	b.n	8000192 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000184:	4b2f      	ldr	r3, [pc, #188]	; (8000244 <HD44780_Init+0xf4>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	f043 0304 	orr.w	r3, r3, #4
 800018c:	b2da      	uxtb	r2, r3
 800018e:	4b2d      	ldr	r3, [pc, #180]	; (8000244 <HD44780_Init+0xf4>)
 8000190:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000192:	f000 fa0b 	bl	80005ac <DelayInit>
  HAL_Delay(50);
 8000196:	2032      	movs	r0, #50	; 0x32
 8000198:	f000 fdb0 	bl	8000cfc <HAL_Delay>

  ExpanderWrite(dpBacklight);
 800019c:	4b28      	ldr	r3, [pc, #160]	; (8000240 <HD44780_Init+0xf0>)
 800019e:	781b      	ldrb	r3, [r3, #0]
 80001a0:	4618      	mov	r0, r3
 80001a2:	f000 f9c9 	bl	8000538 <ExpanderWrite>
  HAL_Delay(1000);
 80001a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001aa:	f000 fda7 	bl	8000cfc <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80001ae:	2030      	movs	r0, #48	; 0x30
 80001b0:	f000 f9b1 	bl	8000516 <Write4Bits>
  DelayUS(4500);
 80001b4:	f241 1094 	movw	r0, #4500	; 0x1194
 80001b8:	f000 fa20 	bl	80005fc <DelayUS>

  Write4Bits(0x03 << 4);
 80001bc:	2030      	movs	r0, #48	; 0x30
 80001be:	f000 f9aa 	bl	8000516 <Write4Bits>
  DelayUS(4500);
 80001c2:	f241 1094 	movw	r0, #4500	; 0x1194
 80001c6:	f000 fa19 	bl	80005fc <DelayUS>

  Write4Bits(0x03 << 4);
 80001ca:	2030      	movs	r0, #48	; 0x30
 80001cc:	f000 f9a3 	bl	8000516 <Write4Bits>
  DelayUS(4500);
 80001d0:	f241 1094 	movw	r0, #4500	; 0x1194
 80001d4:	f000 fa12 	bl	80005fc <DelayUS>

  Write4Bits(0x02 << 4);
 80001d8:	2020      	movs	r0, #32
 80001da:	f000 f99c 	bl	8000516 <Write4Bits>
  DelayUS(100);
 80001de:	2064      	movs	r0, #100	; 0x64
 80001e0:	f000 fa0c 	bl	80005fc <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 80001e4:	4b17      	ldr	r3, [pc, #92]	; (8000244 <HD44780_Init+0xf4>)
 80001e6:	781b      	ldrb	r3, [r3, #0]
 80001e8:	f043 0320 	orr.w	r3, r3, #32
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	4618      	mov	r0, r3
 80001f0:	f000 f954 	bl	800049c <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80001f4:	4b14      	ldr	r3, [pc, #80]	; (8000248 <HD44780_Init+0xf8>)
 80001f6:	2204      	movs	r2, #4
 80001f8:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80001fa:	f000 f88b 	bl	8000314 <HD44780_Display>
  HD44780_Clear();
 80001fe:	f000 f82b 	bl	8000258 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000202:	4b12      	ldr	r3, [pc, #72]	; (800024c <HD44780_Init+0xfc>)
 8000204:	2202      	movs	r2, #2
 8000206:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000208:	4b10      	ldr	r3, [pc, #64]	; (800024c <HD44780_Init+0xfc>)
 800020a:	781b      	ldrb	r3, [r3, #0]
 800020c:	f043 0304 	orr.w	r3, r3, #4
 8000210:	b2db      	uxtb	r3, r3
 8000212:	4618      	mov	r0, r3
 8000214:	f000 f942 	bl	800049c <SendCommand>
  DelayUS(4500);
 8000218:	f241 1094 	movw	r0, #4500	; 0x1194
 800021c:	f000 f9ee 	bl	80005fc <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000220:	490b      	ldr	r1, [pc, #44]	; (8000250 <HD44780_Init+0x100>)
 8000222:	2000      	movs	r0, #0
 8000224:	f000 f8e4 	bl	80003f0 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000228:	490a      	ldr	r1, [pc, #40]	; (8000254 <HD44780_Init+0x104>)
 800022a:	2001      	movs	r0, #1
 800022c:	f000 f8e0 	bl	80003f0 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000230:	f000 f81d 	bl	800026e <HD44780_Home>
}
 8000234:	bf00      	nop
 8000236:	3708      	adds	r7, #8
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}
 800023c:	2000003f 	.word	0x2000003f
 8000240:	20000040 	.word	0x20000040
 8000244:	2000003c 	.word	0x2000003c
 8000248:	2000003d 	.word	0x2000003d
 800024c:	2000003e 	.word	0x2000003e
 8000250:	20000000 	.word	0x20000000
 8000254:	20000008 	.word	0x20000008

08000258 <HD44780_Clear>:

void HD44780_Clear()
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 800025c:	2001      	movs	r0, #1
 800025e:	f000 f91d 	bl	800049c <SendCommand>
  DelayUS(2000);
 8000262:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000266:	f000 f9c9 	bl	80005fc <DelayUS>
}
 800026a:	bf00      	nop
 800026c:	bd80      	pop	{r7, pc}

0800026e <HD44780_Home>:

void HD44780_Home()
{
 800026e:	b580      	push	{r7, lr}
 8000270:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000272:	2002      	movs	r0, #2
 8000274:	f000 f912 	bl	800049c <SendCommand>
  DelayUS(2000);
 8000278:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800027c:	f000 f9be 	bl	80005fc <DelayUS>
}
 8000280:	bf00      	nop
 8000282:	bd80      	pop	{r7, pc}

08000284 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000284:	b590      	push	{r4, r7, lr}
 8000286:	b087      	sub	sp, #28
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	460a      	mov	r2, r1
 800028e:	71fb      	strb	r3, [r7, #7]
 8000290:	4613      	mov	r3, r2
 8000292:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000294:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <HD44780_SetCursor+0x5c>)
 8000296:	f107 0408 	add.w	r4, r7, #8
 800029a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800029c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80002a0:	4b10      	ldr	r3, [pc, #64]	; (80002e4 <HD44780_SetCursor+0x60>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	79ba      	ldrb	r2, [r7, #6]
 80002a6:	429a      	cmp	r2, r3
 80002a8:	d303      	bcc.n	80002b2 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80002aa:	4b0e      	ldr	r3, [pc, #56]	; (80002e4 <HD44780_SetCursor+0x60>)
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	3b01      	subs	r3, #1
 80002b0:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80002b2:	79bb      	ldrb	r3, [r7, #6]
 80002b4:	009b      	lsls	r3, r3, #2
 80002b6:	3318      	adds	r3, #24
 80002b8:	443b      	add	r3, r7
 80002ba:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80002be:	b2da      	uxtb	r2, r3
 80002c0:	79fb      	ldrb	r3, [r7, #7]
 80002c2:	4413      	add	r3, r2
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	b25b      	sxtb	r3, r3
 80002c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80002cc:	b25b      	sxtb	r3, r3
 80002ce:	b2db      	uxtb	r3, r3
 80002d0:	4618      	mov	r0, r3
 80002d2:	f000 f8e3 	bl	800049c <SendCommand>
}
 80002d6:	bf00      	nop
 80002d8:	371c      	adds	r7, #28
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd90      	pop	{r4, r7, pc}
 80002de:	bf00      	nop
 80002e0:	08004d48 	.word	0x08004d48
 80002e4:	2000003f 	.word	0x2000003f

080002e8 <HD44780_NoDisplay>:

void HD44780_NoDisplay()
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_DISPLAYON;
 80002ec:	4b08      	ldr	r3, [pc, #32]	; (8000310 <HD44780_NoDisplay+0x28>)
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	f023 0304 	bic.w	r3, r3, #4
 80002f4:	b2da      	uxtb	r2, r3
 80002f6:	4b06      	ldr	r3, [pc, #24]	; (8000310 <HD44780_NoDisplay+0x28>)
 80002f8:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80002fa:	4b05      	ldr	r3, [pc, #20]	; (8000310 <HD44780_NoDisplay+0x28>)
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	f043 0308 	orr.w	r3, r3, #8
 8000302:	b2db      	uxtb	r3, r3
 8000304:	4618      	mov	r0, r3
 8000306:	f000 f8c9 	bl	800049c <SendCommand>
}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	2000003d 	.word	0x2000003d

08000314 <HD44780_Display>:

void HD44780_Display()
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000318:	4b08      	ldr	r3, [pc, #32]	; (800033c <HD44780_Display+0x28>)
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	f043 0304 	orr.w	r3, r3, #4
 8000320:	b2da      	uxtb	r2, r3
 8000322:	4b06      	ldr	r3, [pc, #24]	; (800033c <HD44780_Display+0x28>)
 8000324:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000326:	4b05      	ldr	r3, [pc, #20]	; (800033c <HD44780_Display+0x28>)
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	f043 0308 	orr.w	r3, r3, #8
 800032e:	b2db      	uxtb	r3, r3
 8000330:	4618      	mov	r0, r3
 8000332:	f000 f8b3 	bl	800049c <SendCommand>
}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	2000003d 	.word	0x2000003d

08000340 <HD44780_NoCursor>:

void HD44780_NoCursor()
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_CURSORON;
 8000344:	4b08      	ldr	r3, [pc, #32]	; (8000368 <HD44780_NoCursor+0x28>)
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	f023 0302 	bic.w	r3, r3, #2
 800034c:	b2da      	uxtb	r2, r3
 800034e:	4b06      	ldr	r3, [pc, #24]	; (8000368 <HD44780_NoCursor+0x28>)
 8000350:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000352:	4b05      	ldr	r3, [pc, #20]	; (8000368 <HD44780_NoCursor+0x28>)
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	f043 0308 	orr.w	r3, r3, #8
 800035a:	b2db      	uxtb	r3, r3
 800035c:	4618      	mov	r0, r3
 800035e:	f000 f89d 	bl	800049c <SendCommand>
}
 8000362:	bf00      	nop
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	2000003d 	.word	0x2000003d

0800036c <HD44780_Cursor>:

void HD44780_Cursor()
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
  dpControl |= LCD_CURSORON;
 8000370:	4b08      	ldr	r3, [pc, #32]	; (8000394 <HD44780_Cursor+0x28>)
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	f043 0302 	orr.w	r3, r3, #2
 8000378:	b2da      	uxtb	r2, r3
 800037a:	4b06      	ldr	r3, [pc, #24]	; (8000394 <HD44780_Cursor+0x28>)
 800037c:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800037e:	4b05      	ldr	r3, [pc, #20]	; (8000394 <HD44780_Cursor+0x28>)
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	f043 0308 	orr.w	r3, r3, #8
 8000386:	b2db      	uxtb	r3, r3
 8000388:	4618      	mov	r0, r3
 800038a:	f000 f887 	bl	800049c <SendCommand>
}
 800038e:	bf00      	nop
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	2000003d 	.word	0x2000003d

08000398 <HD44780_NoBlink>:

void HD44780_NoBlink()
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_BLINKON;
 800039c:	4b08      	ldr	r3, [pc, #32]	; (80003c0 <HD44780_NoBlink+0x28>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	f023 0301 	bic.w	r3, r3, #1
 80003a4:	b2da      	uxtb	r2, r3
 80003a6:	4b06      	ldr	r3, [pc, #24]	; (80003c0 <HD44780_NoBlink+0x28>)
 80003a8:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80003aa:	4b05      	ldr	r3, [pc, #20]	; (80003c0 <HD44780_NoBlink+0x28>)
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	f043 0308 	orr.w	r3, r3, #8
 80003b2:	b2db      	uxtb	r3, r3
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 f871 	bl	800049c <SendCommand>
}
 80003ba:	bf00      	nop
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	2000003d 	.word	0x2000003d

080003c4 <HD44780_Blink>:

void HD44780_Blink()
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
  dpControl |= LCD_BLINKON;
 80003c8:	4b08      	ldr	r3, [pc, #32]	; (80003ec <HD44780_Blink+0x28>)
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	f043 0301 	orr.w	r3, r3, #1
 80003d0:	b2da      	uxtb	r2, r3
 80003d2:	4b06      	ldr	r3, [pc, #24]	; (80003ec <HD44780_Blink+0x28>)
 80003d4:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80003d6:	4b05      	ldr	r3, [pc, #20]	; (80003ec <HD44780_Blink+0x28>)
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	f043 0308 	orr.w	r3, r3, #8
 80003de:	b2db      	uxtb	r3, r3
 80003e0:	4618      	mov	r0, r3
 80003e2:	f000 f85b 	bl	800049c <SendCommand>
}
 80003e6:	bf00      	nop
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	2000003d 	.word	0x2000003d

080003f0 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b084      	sub	sp, #16
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	4603      	mov	r3, r0
 80003f8:	6039      	str	r1, [r7, #0]
 80003fa:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	f003 0307 	and.w	r3, r3, #7
 8000402:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000404:	79fb      	ldrb	r3, [r7, #7]
 8000406:	00db      	lsls	r3, r3, #3
 8000408:	b25b      	sxtb	r3, r3
 800040a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800040e:	b25b      	sxtb	r3, r3
 8000410:	b2db      	uxtb	r3, r3
 8000412:	4618      	mov	r0, r3
 8000414:	f000 f842 	bl	800049c <SendCommand>
  for (int i=0; i<8; i++)
 8000418:	2300      	movs	r3, #0
 800041a:	60fb      	str	r3, [r7, #12]
 800041c:	e009      	b.n	8000432 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	683a      	ldr	r2, [r7, #0]
 8000422:	4413      	add	r3, r2
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	4618      	mov	r0, r3
 8000428:	f000 f846 	bl	80004b8 <SendChar>
  for (int i=0; i<8; i++)
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	3301      	adds	r3, #1
 8000430:	60fb      	str	r3, [r7, #12]
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	2b07      	cmp	r3, #7
 8000436:	ddf2      	ble.n	800041e <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000438:	bf00      	nop
 800043a:	bf00      	nop
 800043c:	3710      	adds	r7, #16
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}

08000442 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000442:	b580      	push	{r7, lr}
 8000444:	b082      	sub	sp, #8
 8000446:	af00      	add	r7, sp, #0
 8000448:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800044a:	e006      	b.n	800045a <HD44780_PrintStr+0x18>
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	1c5a      	adds	r2, r3, #1
 8000450:	607a      	str	r2, [r7, #4]
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	4618      	mov	r0, r3
 8000456:	f000 f82f 	bl	80004b8 <SendChar>
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	2b00      	cmp	r3, #0
 8000460:	d1f4      	bne.n	800044c <HD44780_PrintStr+0xa>
}
 8000462:	bf00      	nop
 8000464:	bf00      	nop
 8000466:	3708      	adds	r7, #8
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}

0800046c <HD44780_NoBacklight>:
  if(new_val) HD44780_Backlight();
  else HD44780_NoBacklight();
}

void HD44780_NoBacklight(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
  dpBacklight=LCD_NOBACKLIGHT;
 8000470:	4b03      	ldr	r3, [pc, #12]	; (8000480 <HD44780_NoBacklight+0x14>)
 8000472:	2200      	movs	r2, #0
 8000474:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 8000476:	2000      	movs	r0, #0
 8000478:	f000 f85e 	bl	8000538 <ExpanderWrite>
}
 800047c:	bf00      	nop
 800047e:	bd80      	pop	{r7, pc}
 8000480:	20000040 	.word	0x20000040

08000484 <HD44780_Backlight>:

void HD44780_Backlight(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  dpBacklight=LCD_BACKLIGHT;
 8000488:	4b03      	ldr	r3, [pc, #12]	; (8000498 <HD44780_Backlight+0x14>)
 800048a:	2208      	movs	r2, #8
 800048c:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 800048e:	2000      	movs	r0, #0
 8000490:	f000 f852 	bl	8000538 <ExpanderWrite>
}
 8000494:	bf00      	nop
 8000496:	bd80      	pop	{r7, pc}
 8000498:	20000040 	.word	0x20000040

0800049c <SendCommand>:

static void SendCommand(uint8_t cmd)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	4603      	mov	r3, r0
 80004a4:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80004a6:	79fb      	ldrb	r3, [r7, #7]
 80004a8:	2100      	movs	r1, #0
 80004aa:	4618      	mov	r0, r3
 80004ac:	f000 f812 	bl	80004d4 <Send>
}
 80004b0:	bf00      	nop
 80004b2:	3708      	adds	r7, #8
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <SendChar>:

static void SendChar(uint8_t ch)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80004c2:	79fb      	ldrb	r3, [r7, #7]
 80004c4:	2101      	movs	r1, #1
 80004c6:	4618      	mov	r0, r3
 80004c8:	f000 f804 	bl	80004d4 <Send>
}
 80004cc:	bf00      	nop
 80004ce:	3708      	adds	r7, #8
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}

080004d4 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	460a      	mov	r2, r1
 80004de:	71fb      	strb	r3, [r7, #7]
 80004e0:	4613      	mov	r3, r2
 80004e2:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80004e4:	79fb      	ldrb	r3, [r7, #7]
 80004e6:	f023 030f 	bic.w	r3, r3, #15
 80004ea:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80004ec:	79fb      	ldrb	r3, [r7, #7]
 80004ee:	011b      	lsls	r3, r3, #4
 80004f0:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80004f2:	7bfa      	ldrb	r2, [r7, #15]
 80004f4:	79bb      	ldrb	r3, [r7, #6]
 80004f6:	4313      	orrs	r3, r2
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	4618      	mov	r0, r3
 80004fc:	f000 f80b 	bl	8000516 <Write4Bits>
  Write4Bits((lownib)|mode);
 8000500:	7bba      	ldrb	r2, [r7, #14]
 8000502:	79bb      	ldrb	r3, [r7, #6]
 8000504:	4313      	orrs	r3, r2
 8000506:	b2db      	uxtb	r3, r3
 8000508:	4618      	mov	r0, r3
 800050a:	f000 f804 	bl	8000516 <Write4Bits>
}
 800050e:	bf00      	nop
 8000510:	3710      	adds	r7, #16
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}

08000516 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000516:	b580      	push	{r7, lr}
 8000518:	b082      	sub	sp, #8
 800051a:	af00      	add	r7, sp, #0
 800051c:	4603      	mov	r3, r0
 800051e:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000520:	79fb      	ldrb	r3, [r7, #7]
 8000522:	4618      	mov	r0, r3
 8000524:	f000 f808 	bl	8000538 <ExpanderWrite>
  PulseEnable(value);
 8000528:	79fb      	ldrb	r3, [r7, #7]
 800052a:	4618      	mov	r0, r3
 800052c:	f000 f820 	bl	8000570 <PulseEnable>
}
 8000530:	bf00      	nop
 8000532:	3708      	adds	r7, #8
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}

08000538 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b086      	sub	sp, #24
 800053c:	af02      	add	r7, sp, #8
 800053e:	4603      	mov	r3, r0
 8000540:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000542:	4b09      	ldr	r3, [pc, #36]	; (8000568 <ExpanderWrite+0x30>)
 8000544:	781a      	ldrb	r2, [r3, #0]
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	4313      	orrs	r3, r2
 800054a:	b2db      	uxtb	r3, r3
 800054c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800054e:	f107 020f 	add.w	r2, r7, #15
 8000552:	230a      	movs	r3, #10
 8000554:	9300      	str	r3, [sp, #0]
 8000556:	2301      	movs	r3, #1
 8000558:	2170      	movs	r1, #112	; 0x70
 800055a:	4804      	ldr	r0, [pc, #16]	; (800056c <ExpanderWrite+0x34>)
 800055c:	f000 ffce 	bl	80014fc <HAL_I2C_Master_Transmit>
}
 8000560:	bf00      	nop
 8000562:	3710      	adds	r7, #16
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	20000040 	.word	0x20000040
 800056c:	20000044 	.word	0x20000044

08000570 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	f043 0304 	orr.w	r3, r3, #4
 8000580:	b2db      	uxtb	r3, r3
 8000582:	4618      	mov	r0, r3
 8000584:	f7ff ffd8 	bl	8000538 <ExpanderWrite>
  DelayUS(20);
 8000588:	2014      	movs	r0, #20
 800058a:	f000 f837 	bl	80005fc <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	f023 0304 	bic.w	r3, r3, #4
 8000594:	b2db      	uxtb	r3, r3
 8000596:	4618      	mov	r0, r3
 8000598:	f7ff ffce 	bl	8000538 <ExpanderWrite>
  DelayUS(20);
 800059c:	2014      	movs	r0, #20
 800059e:	f000 f82d 	bl	80005fc <DelayUS>
}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
	...

080005ac <DelayInit>:

static void DelayInit(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80005b0:	4b10      	ldr	r3, [pc, #64]	; (80005f4 <DelayInit+0x48>)
 80005b2:	68db      	ldr	r3, [r3, #12]
 80005b4:	4a0f      	ldr	r2, [pc, #60]	; (80005f4 <DelayInit+0x48>)
 80005b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80005ba:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80005bc:	4b0d      	ldr	r3, [pc, #52]	; (80005f4 <DelayInit+0x48>)
 80005be:	68db      	ldr	r3, [r3, #12]
 80005c0:	4a0c      	ldr	r2, [pc, #48]	; (80005f4 <DelayInit+0x48>)
 80005c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005c6:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80005c8:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <DelayInit+0x4c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a0a      	ldr	r2, [pc, #40]	; (80005f8 <DelayInit+0x4c>)
 80005ce:	f023 0301 	bic.w	r3, r3, #1
 80005d2:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80005d4:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <DelayInit+0x4c>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a07      	ldr	r2, [pc, #28]	; (80005f8 <DelayInit+0x4c>)
 80005da:	f043 0301 	orr.w	r3, r3, #1
 80005de:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80005e0:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <DelayInit+0x4c>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80005e6:	bf00      	nop
  __ASM volatile ("NOP");
 80005e8:	bf00      	nop
  __ASM volatile ("NOP");
 80005ea:	bf00      	nop
}
 80005ec:	bf00      	nop
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bc80      	pop	{r7}
 80005f2:	4770      	bx	lr
 80005f4:	e000edf0 	.word	0xe000edf0
 80005f8:	e0001000 	.word	0xe0001000

080005fc <DelayUS>:

static void DelayUS(uint32_t us) {
 80005fc:	b480      	push	{r7}
 80005fe:	b087      	sub	sp, #28
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000604:	4b0d      	ldr	r3, [pc, #52]	; (800063c <DelayUS+0x40>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a0d      	ldr	r2, [pc, #52]	; (8000640 <DelayUS+0x44>)
 800060a:	fba2 2303 	umull	r2, r3, r2, r3
 800060e:	0c9a      	lsrs	r2, r3, #18
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	fb02 f303 	mul.w	r3, r2, r3
 8000616:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000618:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <DelayUS+0x48>)
 800061a:	685b      	ldr	r3, [r3, #4]
 800061c:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <DelayUS+0x48>)
 8000620:	685a      	ldr	r2, [r3, #4]
 8000622:	693b      	ldr	r3, [r7, #16]
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	697a      	ldr	r2, [r7, #20]
 800062c:	429a      	cmp	r2, r3
 800062e:	d8f6      	bhi.n	800061e <DelayUS+0x22>
}
 8000630:	bf00      	nop
 8000632:	bf00      	nop
 8000634:	371c      	adds	r7, #28
 8000636:	46bd      	mov	sp, r7
 8000638:	bc80      	pop	{r7}
 800063a:	4770      	bx	lr
 800063c:	20000010 	.word	0x20000010
 8000640:	431bde83 	.word	0x431bde83
 8000644:	e0001000 	.word	0xe0001000

08000648 <utf8_to_cp866>:


// Таблица перекодировки русских букв из UTF-8 в CP866
static uint8_t utf8_to_cp866(const char **str) {
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
    uint8_t result = (*str)[0];
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	73fb      	strb	r3, [r7, #15]

    // Базовые ASCII символы (0x00-0x7F)
    if(result < 0x80) {
 8000658:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800065c:	2b00      	cmp	r3, #0
 800065e:	db06      	blt.n	800066e <utf8_to_cp866+0x26>
        (*str)++;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	1c5a      	adds	r2, r3, #1
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	601a      	str	r2, [r3, #0]
        return result;
 800066a:	7bfb      	ldrb	r3, [r7, #15]
 800066c:	e06a      	b.n	8000744 <utf8_to_cp866+0xfc>
    }

    // Русские буквы в UTF-8 (начало с 0xD0 или 0xD1)
    if((*str)[0] == 0xD0) {
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2bd0      	cmp	r3, #208	; 0xd0
 8000676:	d118      	bne.n	80006aa <utf8_to_cp866+0x62>
        // Буквы А-Я (кроме Ё)
        if((*str)[1] >= 0x90 && (*str)[1] <= 0xBF) {
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	3301      	adds	r3, #1
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b8f      	cmp	r3, #143	; 0x8f
 8000682:	d959      	bls.n	8000738 <utf8_to_cp866+0xf0>
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	3301      	adds	r3, #1
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2bbf      	cmp	r3, #191	; 0xbf
 800068e:	d853      	bhi.n	8000738 <utf8_to_cp866+0xf0>
            result = (*str)[1] - 0x10;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	3301      	adds	r3, #1
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	3b10      	subs	r3, #16
 800069a:	73fb      	strb	r3, [r7, #15]
            (*str) += 2;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	1c9a      	adds	r2, r3, #2
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	601a      	str	r2, [r3, #0]
            return result;
 80006a6:	7bfb      	ldrb	r3, [r7, #15]
 80006a8:	e04c      	b.n	8000744 <utf8_to_cp866+0xfc>
        }
    } else if((*str)[0] == 0xD1) {
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2bd1      	cmp	r3, #209	; 0xd1
 80006b2:	d141      	bne.n	8000738 <utf8_to_cp866+0xf0>
        // Буквы а-п
        if((*str)[1] >= 0x80 && (*str)[1] <= 0x8F) {
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	3301      	adds	r3, #1
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	b25b      	sxtb	r3, r3
 80006be:	2b00      	cmp	r3, #0
 80006c0:	da12      	bge.n	80006e8 <utf8_to_cp866+0xa0>
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	3301      	adds	r3, #1
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	2b8f      	cmp	r3, #143	; 0x8f
 80006cc:	d80c      	bhi.n	80006e8 <utf8_to_cp866+0xa0>
            result = (*str)[1] + 0x60;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	3301      	adds	r3, #1
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	3360      	adds	r3, #96	; 0x60
 80006d8:	73fb      	strb	r3, [r7, #15]
            (*str) += 2;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	1c9a      	adds	r2, r3, #2
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	601a      	str	r2, [r3, #0]
            return result;
 80006e4:	7bfb      	ldrb	r3, [r7, #15]
 80006e6:	e02d      	b.n	8000744 <utf8_to_cp866+0xfc>
        }
        // Буква ё
        else if((*str)[1] == 0x91) {
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	3301      	adds	r3, #1
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b91      	cmp	r3, #145	; 0x91
 80006f2:	d108      	bne.n	8000706 <utf8_to_cp866+0xbe>
            result = 0xF0;
 80006f4:	23f0      	movs	r3, #240	; 0xf0
 80006f6:	73fb      	strb	r3, [r7, #15]
            (*str) += 2;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	1c9a      	adds	r2, r3, #2
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	601a      	str	r2, [r3, #0]
            return result;
 8000702:	7bfb      	ldrb	r3, [r7, #15]
 8000704:	e01e      	b.n	8000744 <utf8_to_cp866+0xfc>
        }
        // Буквы р-я
        else if((*str)[1] >= 0x92 && (*str)[1] <= 0x9F) {
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	3301      	adds	r3, #1
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	2b91      	cmp	r3, #145	; 0x91
 8000710:	d912      	bls.n	8000738 <utf8_to_cp866+0xf0>
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	3301      	adds	r3, #1
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b9f      	cmp	r3, #159	; 0x9f
 800071c:	d80c      	bhi.n	8000738 <utf8_to_cp866+0xf0>
            result = (*str)[1] + 0x60;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	3301      	adds	r3, #1
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	3360      	adds	r3, #96	; 0x60
 8000728:	73fb      	strb	r3, [r7, #15]
            (*str) += 2;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	1c9a      	adds	r2, r3, #2
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	601a      	str	r2, [r3, #0]
            return result;
 8000734:	7bfb      	ldrb	r3, [r7, #15]
 8000736:	e005      	b.n	8000744 <utf8_to_cp866+0xfc>
        }
    }

    // Если символ не распознан как русская буква, пропускаем его
    (*str)++;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	1c5a      	adds	r2, r3, #1
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	601a      	str	r2, [r3, #0]
    return '?'; // или можно вернуть 0x20 (пробел)
 8000742:	233f      	movs	r3, #63	; 0x3f
}
 8000744:	4618      	mov	r0, r3
 8000746:	3714      	adds	r7, #20
 8000748:	46bd      	mov	sp, r7
 800074a:	bc80      	pop	{r7}
 800074c:	4770      	bx	lr

0800074e <HD44780_PrintRus>:

void HD44780_PrintRus(const char *str) {
 800074e:	b580      	push	{r7, lr}
 8000750:	b084      	sub	sp, #16
 8000752:	af00      	add	r7, sp, #0
 8000754:	6078      	str	r0, [r7, #4]
    const char *p = str;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	60bb      	str	r3, [r7, #8]
    while(*p) {
 800075a:	e018      	b.n	800078e <HD44780_PrintRus+0x40>
        uint8_t ch = utf8_to_cp866(&p);
 800075c:	f107 0308 	add.w	r3, r7, #8
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff ff71 	bl	8000648 <utf8_to_cp866>
 8000766:	4603      	mov	r3, r0
 8000768:	73fb      	strb	r3, [r7, #15]
        if(ch == 0xF0) { // Ё
 800076a:	7bfb      	ldrb	r3, [r7, #15]
 800076c:	2bf0      	cmp	r3, #240	; 0xf0
 800076e:	d103      	bne.n	8000778 <HD44780_PrintRus+0x2a>
            SendChar(0); // Первый кастомный символ
 8000770:	2000      	movs	r0, #0
 8000772:	f7ff fea1 	bl	80004b8 <SendChar>
 8000776:	e00a      	b.n	800078e <HD44780_PrintRus+0x40>
        } else if(ch == 0xF1) { // ё
 8000778:	7bfb      	ldrb	r3, [r7, #15]
 800077a:	2bf1      	cmp	r3, #241	; 0xf1
 800077c:	d103      	bne.n	8000786 <HD44780_PrintRus+0x38>
            SendChar(1); // Второй кастомный символ
 800077e:	2001      	movs	r0, #1
 8000780:	f7ff fe9a 	bl	80004b8 <SendChar>
 8000784:	e003      	b.n	800078e <HD44780_PrintRus+0x40>
        } else {
            SendChar(ch);
 8000786:	7bfb      	ldrb	r3, [r7, #15]
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff fe95 	bl	80004b8 <SendChar>
    while(*p) {
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d1e2      	bne.n	800075c <HD44780_PrintRus+0xe>
        }
    }
}
 8000796:	bf00      	nop
 8000798:	bf00      	nop
 800079a:	3710      	adds	r7, #16
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a4:	f000 fa48 	bl	8000c38 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a8:	f000 f878 	bl	800089c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ac:	f000 f902 	bl	80009b4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007b0:	f000 f8b0 	bl	8000914 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
   HD44780_Init(2);
 80007b4:	2002      	movs	r0, #2
 80007b6:	f7ff fccb 	bl	8000150 <HD44780_Init>
   HD44780_Clear();
 80007ba:	f7ff fd4d 	bl	8000258 <HD44780_Clear>
   HD44780_SetCursor(0,0);
 80007be:	2100      	movs	r1, #0
 80007c0:	2000      	movs	r0, #0
 80007c2:	f7ff fd5f 	bl	8000284 <HD44780_SetCursor>
   HD44780_PrintRus("привет");
 80007c6:	482e      	ldr	r0, [pc, #184]	; (8000880 <main+0xe0>)
 80007c8:	f7ff ffc1 	bl	800074e <HD44780_PrintRus>
   HD44780_SetCursor(10,1);
 80007cc:	2101      	movs	r1, #1
 80007ce:	200a      	movs	r0, #10
 80007d0:	f7ff fd58 	bl	8000284 <HD44780_SetCursor>
   HD44780_PrintRus("мир");
 80007d4:	482b      	ldr	r0, [pc, #172]	; (8000884 <main+0xe4>)
 80007d6:	f7ff ffba 	bl	800074e <HD44780_PrintRus>
   HAL_Delay(2000);
 80007da:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007de:	f000 fa8d 	bl	8000cfc <HAL_Delay>

   HD44780_Clear();
 80007e2:	f7ff fd39 	bl	8000258 <HD44780_Clear>
   HD44780_SetCursor(0,0);
 80007e6:	2100      	movs	r1, #0
 80007e8:	2000      	movs	r0, #0
 80007ea:	f7ff fd4b 	bl	8000284 <HD44780_SetCursor>
   HD44780_PrintStr("HELLO");
 80007ee:	4826      	ldr	r0, [pc, #152]	; (8000888 <main+0xe8>)
 80007f0:	f7ff fe27 	bl	8000442 <HD44780_PrintStr>
   HAL_Delay(2000);
 80007f4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007f8:	f000 fa80 	bl	8000cfc <HAL_Delay>
   HD44780_NoBacklight();
 80007fc:	f7ff fe36 	bl	800046c <HD44780_NoBacklight>
   HAL_Delay(2000);
 8000800:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000804:	f000 fa7a 	bl	8000cfc <HAL_Delay>
   HD44780_Backlight();
 8000808:	f7ff fe3c 	bl	8000484 <HD44780_Backlight>

   HAL_Delay(2000);
 800080c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000810:	f000 fa74 	bl	8000cfc <HAL_Delay>
   HD44780_Cursor();
 8000814:	f7ff fdaa 	bl	800036c <HD44780_Cursor>
   HAL_Delay(2000);
 8000818:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800081c:	f000 fa6e 	bl	8000cfc <HAL_Delay>
   HD44780_Blink();
 8000820:	f7ff fdd0 	bl	80003c4 <HD44780_Blink>
   HAL_Delay(5000);
 8000824:	f241 3088 	movw	r0, #5000	; 0x1388
 8000828:	f000 fa68 	bl	8000cfc <HAL_Delay>
   HD44780_NoBlink();
 800082c:	f7ff fdb4 	bl	8000398 <HD44780_NoBlink>
   HAL_Delay(2000);
 8000830:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000834:	f000 fa62 	bl	8000cfc <HAL_Delay>
   HD44780_NoCursor();
 8000838:	f7ff fd82 	bl	8000340 <HD44780_NoCursor>
   HAL_Delay(2000);
 800083c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000840:	f000 fa5c 	bl	8000cfc <HAL_Delay>

   HD44780_NoDisplay();
 8000844:	f7ff fd50 	bl	80002e8 <HD44780_NoDisplay>
   HAL_Delay(2000);
 8000848:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800084c:	f000 fa56 	bl	8000cfc <HAL_Delay>
   HD44780_Display();
 8000850:	f7ff fd60 	bl	8000314 <HD44780_Display>

   HD44780_Clear();
 8000854:	f7ff fd00 	bl	8000258 <HD44780_Clear>
   HD44780_SetCursor(0,0);
 8000858:	2100      	movs	r1, #0
 800085a:	2000      	movs	r0, #0
 800085c:	f7ff fd12 	bl	8000284 <HD44780_SetCursor>
   HD44780_PrintStr("Learning STM32 with LCD is fun :-)");
 8000860:	480a      	ldr	r0, [pc, #40]	; (800088c <main+0xec>)
 8000862:	f7ff fdee 	bl	8000442 <HD44780_PrintStr>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000866:	f001 fd55 	bl	8002314 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800086a:	4a09      	ldr	r2, [pc, #36]	; (8000890 <main+0xf0>)
 800086c:	2100      	movs	r1, #0
 800086e:	4809      	ldr	r0, [pc, #36]	; (8000894 <main+0xf4>)
 8000870:	f001 fdb6 	bl	80023e0 <osThreadNew>
 8000874:	4603      	mov	r3, r0
 8000876:	4a08      	ldr	r2, [pc, #32]	; (8000898 <main+0xf8>)
 8000878:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800087a:	f001 fd7d 	bl	8002378 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800087e:	e7fe      	b.n	800087e <main+0xde>
 8000880:	08004d64 	.word	0x08004d64
 8000884:	08004d74 	.word	0x08004d74
 8000888:	08004d7c 	.word	0x08004d7c
 800088c:	08004d84 	.word	0x08004d84
 8000890:	08004dd0 	.word	0x08004dd0
 8000894:	08000a51 	.word	0x08000a51
 8000898:	20000098 	.word	0x20000098

0800089c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b090      	sub	sp, #64	; 0x40
 80008a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a2:	f107 0318 	add.w	r3, r7, #24
 80008a6:	2228      	movs	r2, #40	; 0x28
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f004 fa38 	bl	8004d20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
 80008bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008be:	2302      	movs	r3, #2
 80008c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c2:	2301      	movs	r3, #1
 80008c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008c6:	2310      	movs	r3, #16
 80008c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008ca:	2300      	movs	r3, #0
 80008cc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ce:	f107 0318 	add.w	r3, r7, #24
 80008d2:	4618      	mov	r0, r3
 80008d4:	f001 f918 	bl	8001b08 <HAL_RCC_OscConfig>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80008de:	f000 f8df 	bl	8000aa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e2:	230f      	movs	r3, #15
 80008e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008e6:	2300      	movs	r3, #0
 80008e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	2100      	movs	r1, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f001 fb86 	bl	800200c <HAL_RCC_ClockConfig>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000906:	f000 f8cb 	bl	8000aa0 <Error_Handler>
  }
}
 800090a:	bf00      	nop
 800090c:	3740      	adds	r7, #64	; 0x40
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
	...

08000914 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */
	  __HAL_RCC_AFIO_CLK_ENABLE();
 800091a:	4b21      	ldr	r3, [pc, #132]	; (80009a0 <MX_I2C1_Init+0x8c>)
 800091c:	699b      	ldr	r3, [r3, #24]
 800091e:	4a20      	ldr	r2, [pc, #128]	; (80009a0 <MX_I2C1_Init+0x8c>)
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	6193      	str	r3, [r2, #24]
 8000926:	4b1e      	ldr	r3, [pc, #120]	; (80009a0 <MX_I2C1_Init+0x8c>)
 8000928:	699b      	ldr	r3, [r3, #24]
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	683b      	ldr	r3, [r7, #0]
	  __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000932:	4b1c      	ldr	r3, [pc, #112]	; (80009a4 <MX_I2C1_Init+0x90>)
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	f043 0302 	orr.w	r3, r3, #2
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	4a16      	ldr	r2, [pc, #88]	; (80009a4 <MX_I2C1_Init+0x90>)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6053      	str	r3, [r2, #4]
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800094e:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <MX_I2C1_Init+0x94>)
 8000950:	4a16      	ldr	r2, [pc, #88]	; (80009ac <MX_I2C1_Init+0x98>)
 8000952:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000954:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <MX_I2C1_Init+0x94>)
 8000956:	4a16      	ldr	r2, [pc, #88]	; (80009b0 <MX_I2C1_Init+0x9c>)
 8000958:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800095a:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <MX_I2C1_Init+0x94>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_I2C1_Init+0x94>)
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <MX_I2C1_Init+0x94>)
 8000968:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800096c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <MX_I2C1_Init+0x94>)
 8000970:	2200      	movs	r2, #0
 8000972:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_I2C1_Init+0x94>)
 8000976:	2200      	movs	r2, #0
 8000978:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <MX_I2C1_Init+0x94>)
 800097c:	2200      	movs	r2, #0
 800097e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000980:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_I2C1_Init+0x94>)
 8000982:	2200      	movs	r2, #0
 8000984:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000986:	4808      	ldr	r0, [pc, #32]	; (80009a8 <MX_I2C1_Init+0x94>)
 8000988:	f000 fc74 	bl	8001274 <HAL_I2C_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_I2C1_Init+0x82>
  {
    Error_Handler();
 8000992:	f000 f885 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40021000 	.word	0x40021000
 80009a4:	40010000 	.word	0x40010000
 80009a8:	20000044 	.word	0x20000044
 80009ac:	40005400 	.word	0x40005400
 80009b0:	000186a0 	.word	0x000186a0

080009b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ba:	f107 0308 	add.w	r3, r7, #8
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c8:	4b1e      	ldr	r3, [pc, #120]	; (8000a44 <MX_GPIO_Init+0x90>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	4a1d      	ldr	r2, [pc, #116]	; (8000a44 <MX_GPIO_Init+0x90>)
 80009ce:	f043 0310 	orr.w	r3, r3, #16
 80009d2:	6193      	str	r3, [r2, #24]
 80009d4:	4b1b      	ldr	r3, [pc, #108]	; (8000a44 <MX_GPIO_Init+0x90>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	f003 0310 	and.w	r3, r3, #16
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e0:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <MX_GPIO_Init+0x90>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	4a17      	ldr	r2, [pc, #92]	; (8000a44 <MX_GPIO_Init+0x90>)
 80009e6:	f043 0308 	orr.w	r3, r3, #8
 80009ea:	6193      	str	r3, [r2, #24]
 80009ec:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <MX_GPIO_Init+0x90>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	f003 0308 	and.w	r3, r3, #8
 80009f4:	603b      	str	r3, [r7, #0]
 80009f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80009f8:	2201      	movs	r2, #1
 80009fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009fe:	4812      	ldr	r0, [pc, #72]	; (8000a48 <MX_GPIO_Init+0x94>)
 8000a00:	f000 fc1f 	bl	8001242 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a08:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a12:	2302      	movs	r3, #2
 8000a14:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a16:	f107 0308 	add.w	r3, r7, #8
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	480a      	ldr	r0, [pc, #40]	; (8000a48 <MX_GPIO_Init+0x94>)
 8000a1e:	f000 fa75 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_8|GPIO_PIN_9;
 8000a22:	f44f 4386 	mov.w	r3, #17152	; 0x4300
 8000a26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a30:	f107 0308 	add.w	r3, r7, #8
 8000a34:	4619      	mov	r1, r3
 8000a36:	4805      	ldr	r0, [pc, #20]	; (8000a4c <MX_GPIO_Init+0x98>)
 8000a38:	f000 fa68 	bl	8000f0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a3c:	bf00      	nop
 8000a3e:	3718      	adds	r7, #24
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40021000 	.word	0x40021000
 8000a48:	40011000 	.word	0x40011000
 8000a4c:	40010c00 	.word	0x40010c00

08000a50 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t previous_button_state = GPIO_PIN_SET;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
	for(;;)
	  {
		uint8_t current_button_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 8000a5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a60:	480d      	ldr	r0, [pc, #52]	; (8000a98 <StartDefaultTask+0x48>)
 8000a62:	f000 fbd7 	bl	8001214 <HAL_GPIO_ReadPin>
 8000a66:	4603      	mov	r3, r0
 8000a68:	73bb      	strb	r3, [r7, #14]

		        // Если кнопка нажата (LOW), включаем светодиод
		        if(current_button_state == GPIO_PIN_RESET)
 8000a6a:	7bbb      	ldrb	r3, [r7, #14]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d106      	bne.n	8000a7e <StartDefaultTask+0x2e>
		        {
		            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); // Включить светодиод
 8000a70:	2200      	movs	r2, #0
 8000a72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a76:	4809      	ldr	r0, [pc, #36]	; (8000a9c <StartDefaultTask+0x4c>)
 8000a78:	f000 fbe3 	bl	8001242 <HAL_GPIO_WritePin>
 8000a7c:	e005      	b.n	8000a8a <StartDefaultTask+0x3a>
		        }
		        else
		        {
		            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // Выключить светодиод
 8000a7e:	2201      	movs	r2, #1
 8000a80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a84:	4805      	ldr	r0, [pc, #20]	; (8000a9c <StartDefaultTask+0x4c>)
 8000a86:	f000 fbdc 	bl	8001242 <HAL_GPIO_WritePin>
		        }

		        previous_button_state = current_button_state;
 8000a8a:	7bbb      	ldrb	r3, [r7, #14]
 8000a8c:	73fb      	strb	r3, [r7, #15]
		        osDelay(10); // Опрос каждые 10 мс
 8000a8e:	200a      	movs	r0, #10
 8000a90:	f001 fd50 	bl	8002534 <osDelay>
	  {
 8000a94:	e7e2      	b.n	8000a5c <StartDefaultTask+0xc>
 8000a96:	bf00      	nop
 8000a98:	40010c00 	.word	0x40010c00
 8000a9c:	40011000 	.word	0x40011000

08000aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa4:	b672      	cpsid	i
}
 8000aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <Error_Handler+0x8>
	...

08000aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ab2:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <HAL_MspInit+0x4c>)
 8000ab4:	699b      	ldr	r3, [r3, #24]
 8000ab6:	4a10      	ldr	r2, [pc, #64]	; (8000af8 <HAL_MspInit+0x4c>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	6193      	str	r3, [r2, #24]
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <HAL_MspInit+0x4c>)
 8000ac0:	699b      	ldr	r3, [r3, #24]
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aca:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <HAL_MspInit+0x4c>)
 8000acc:	69db      	ldr	r3, [r3, #28]
 8000ace:	4a0a      	ldr	r2, [pc, #40]	; (8000af8 <HAL_MspInit+0x4c>)
 8000ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad4:	61d3      	str	r3, [r2, #28]
 8000ad6:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <HAL_MspInit+0x4c>)
 8000ad8:	69db      	ldr	r3, [r3, #28]
 8000ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	210f      	movs	r1, #15
 8000ae6:	f06f 0001 	mvn.w	r0, #1
 8000aea:	f000 f9e6 	bl	8000eba <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40021000 	.word	0x40021000

08000afc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08a      	sub	sp, #40	; 0x28
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a1d      	ldr	r2, [pc, #116]	; (8000b8c <HAL_I2C_MspInit+0x90>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d132      	bne.n	8000b82 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1c:	4b1c      	ldr	r3, [pc, #112]	; (8000b90 <HAL_I2C_MspInit+0x94>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	4a1b      	ldr	r2, [pc, #108]	; (8000b90 <HAL_I2C_MspInit+0x94>)
 8000b22:	f043 0308 	orr.w	r3, r3, #8
 8000b26:	6193      	str	r3, [r2, #24]
 8000b28:	4b19      	ldr	r3, [pc, #100]	; (8000b90 <HAL_I2C_MspInit+0x94>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	f003 0308 	and.w	r3, r3, #8
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b34:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b3a:	2312      	movs	r3, #18
 8000b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	4619      	mov	r1, r3
 8000b48:	4812      	ldr	r0, [pc, #72]	; (8000b94 <HAL_I2C_MspInit+0x98>)
 8000b4a:	f000 f9df 	bl	8000f0c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000b4e:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <HAL_I2C_MspInit+0x9c>)
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
 8000b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b56:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8000b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5e:	f043 0302 	orr.w	r3, r3, #2
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24
 8000b64:	4a0c      	ldr	r2, [pc, #48]	; (8000b98 <HAL_I2C_MspInit+0x9c>)
 8000b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b68:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_I2C_MspInit+0x94>)
 8000b6c:	69db      	ldr	r3, [r3, #28]
 8000b6e:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <HAL_I2C_MspInit+0x94>)
 8000b70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b74:	61d3      	str	r3, [r2, #28]
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_I2C_MspInit+0x94>)
 8000b78:	69db      	ldr	r3, [r3, #28]
 8000b7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b82:	bf00      	nop
 8000b84:	3728      	adds	r7, #40	; 0x28
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40005400 	.word	0x40005400
 8000b90:	40021000 	.word	0x40021000
 8000b94:	40010c00 	.word	0x40010c00
 8000b98:	40010000 	.word	0x40010000

08000b9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <NMI_Handler+0x4>

08000ba2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba6:	e7fe      	b.n	8000ba6 <HardFault_Handler+0x4>

08000ba8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <MemManage_Handler+0x4>

08000bae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bb2:	e7fe      	b.n	8000bb2 <BusFault_Handler+0x4>

08000bb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <UsageFault_Handler+0x4>

08000bba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bc80      	pop	{r7}
 8000bc4:	4770      	bx	lr

08000bc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bca:	f000 f87b 	bl	8000cc4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000bce:	f003 f8bd 	bl	8003d4c <xTaskGetSchedulerState>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d001      	beq.n	8000bdc <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000bd8:	f003 fe16 	bl	8004808 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bc80      	pop	{r7}
 8000bea:	4770      	bx	lr

08000bec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bec:	480c      	ldr	r0, [pc, #48]	; (8000c20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bee:	490d      	ldr	r1, [pc, #52]	; (8000c24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bf0:	4a0d      	ldr	r2, [pc, #52]	; (8000c28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf4:	e002      	b.n	8000bfc <LoopCopyDataInit>

08000bf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bfa:	3304      	adds	r3, #4

08000bfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c00:	d3f9      	bcc.n	8000bf6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c02:	4a0a      	ldr	r2, [pc, #40]	; (8000c2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c04:	4c0a      	ldr	r4, [pc, #40]	; (8000c30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c08:	e001      	b.n	8000c0e <LoopFillZerobss>

08000c0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c0c:	3204      	adds	r2, #4

08000c0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c10:	d3fb      	bcc.n	8000c0a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c12:	f7ff ffe5 	bl	8000be0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c16:	f004 f851 	bl	8004cbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c1a:	f7ff fdc1 	bl	80007a0 <main>
  bx lr
 8000c1e:	4770      	bx	lr
  ldr r0, =_sdata
 8000c20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c24:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000c28:	08004e14 	.word	0x08004e14
  ldr r2, =_sbss
 8000c2c:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000c30:	200019e8 	.word	0x200019e8

08000c34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c34:	e7fe      	b.n	8000c34 <ADC1_2_IRQHandler>
	...

08000c38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c3c:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <HAL_Init+0x28>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a07      	ldr	r2, [pc, #28]	; (8000c60 <HAL_Init+0x28>)
 8000c42:	f043 0310 	orr.w	r3, r3, #16
 8000c46:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c48:	2003      	movs	r0, #3
 8000c4a:	f000 f92b 	bl	8000ea4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c4e:	200f      	movs	r0, #15
 8000c50:	f000 f808 	bl	8000c64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c54:	f7ff ff2a 	bl	8000aac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40022000 	.word	0x40022000

08000c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c6c:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <HAL_InitTick+0x54>)
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <HAL_InitTick+0x58>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	4619      	mov	r1, r3
 8000c76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 f935 	bl	8000ef2 <HAL_SYSTICK_Config>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e00e      	b.n	8000cb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2b0f      	cmp	r3, #15
 8000c96:	d80a      	bhi.n	8000cae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	6879      	ldr	r1, [r7, #4]
 8000c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca0:	f000 f90b 	bl	8000eba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ca4:	4a06      	ldr	r2, [pc, #24]	; (8000cc0 <HAL_InitTick+0x5c>)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000caa:	2300      	movs	r3, #0
 8000cac:	e000      	b.n	8000cb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000010 	.word	0x20000010
 8000cbc:	20000018 	.word	0x20000018
 8000cc0:	20000014 	.word	0x20000014

08000cc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc8:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <HAL_IncTick+0x1c>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <HAL_IncTick+0x20>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	4a03      	ldr	r2, [pc, #12]	; (8000ce4 <HAL_IncTick+0x20>)
 8000cd6:	6013      	str	r3, [r2, #0]
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr
 8000ce0:	20000018 	.word	0x20000018
 8000ce4:	2000009c 	.word	0x2000009c

08000ce8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  return uwTick;
 8000cec:	4b02      	ldr	r3, [pc, #8]	; (8000cf8 <HAL_GetTick+0x10>)
 8000cee:	681b      	ldr	r3, [r3, #0]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr
 8000cf8:	2000009c 	.word	0x2000009c

08000cfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d04:	f7ff fff0 	bl	8000ce8 <HAL_GetTick>
 8000d08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d14:	d005      	beq.n	8000d22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d16:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <HAL_Delay+0x44>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	4413      	add	r3, r2
 8000d20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d22:	bf00      	nop
 8000d24:	f7ff ffe0 	bl	8000ce8 <HAL_GetTick>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	68fa      	ldr	r2, [r7, #12]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d8f7      	bhi.n	8000d24 <HAL_Delay+0x28>
  {
  }
}
 8000d34:	bf00      	nop
 8000d36:	bf00      	nop
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000018 	.word	0x20000018

08000d44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d54:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <__NVIC_SetPriorityGrouping+0x44>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d5a:	68ba      	ldr	r2, [r7, #8]
 8000d5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d60:	4013      	ands	r3, r2
 8000d62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d76:	4a04      	ldr	r2, [pc, #16]	; (8000d88 <__NVIC_SetPriorityGrouping+0x44>)
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	60d3      	str	r3, [r2, #12]
}
 8000d7c:	bf00      	nop
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bc80      	pop	{r7}
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d90:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <__NVIC_GetPriorityGrouping+0x18>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	0a1b      	lsrs	r3, r3, #8
 8000d96:	f003 0307 	and.w	r3, r3, #7
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bc80      	pop	{r7}
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	6039      	str	r1, [r7, #0]
 8000db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	db0a      	blt.n	8000dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	490c      	ldr	r1, [pc, #48]	; (8000df4 <__NVIC_SetPriority+0x4c>)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	0112      	lsls	r2, r2, #4
 8000dc8:	b2d2      	uxtb	r2, r2
 8000dca:	440b      	add	r3, r1
 8000dcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd0:	e00a      	b.n	8000de8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	4908      	ldr	r1, [pc, #32]	; (8000df8 <__NVIC_SetPriority+0x50>)
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	f003 030f 	and.w	r3, r3, #15
 8000dde:	3b04      	subs	r3, #4
 8000de0:	0112      	lsls	r2, r2, #4
 8000de2:	b2d2      	uxtb	r2, r2
 8000de4:	440b      	add	r3, r1
 8000de6:	761a      	strb	r2, [r3, #24]
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bc80      	pop	{r7}
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000e100 	.word	0xe000e100
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b089      	sub	sp, #36	; 0x24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	f1c3 0307 	rsb	r3, r3, #7
 8000e16:	2b04      	cmp	r3, #4
 8000e18:	bf28      	it	cs
 8000e1a:	2304      	movcs	r3, #4
 8000e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	3304      	adds	r3, #4
 8000e22:	2b06      	cmp	r3, #6
 8000e24:	d902      	bls.n	8000e2c <NVIC_EncodePriority+0x30>
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3b03      	subs	r3, #3
 8000e2a:	e000      	b.n	8000e2e <NVIC_EncodePriority+0x32>
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e30:	f04f 32ff 	mov.w	r2, #4294967295
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43da      	mvns	r2, r3
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	401a      	ands	r2, r3
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e44:	f04f 31ff 	mov.w	r1, #4294967295
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4e:	43d9      	mvns	r1, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e54:	4313      	orrs	r3, r2
         );
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3724      	adds	r7, #36	; 0x24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bc80      	pop	{r7}
 8000e5e:	4770      	bx	lr

08000e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e70:	d301      	bcc.n	8000e76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e72:	2301      	movs	r3, #1
 8000e74:	e00f      	b.n	8000e96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e76:	4a0a      	ldr	r2, [pc, #40]	; (8000ea0 <SysTick_Config+0x40>)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e7e:	210f      	movs	r1, #15
 8000e80:	f04f 30ff 	mov.w	r0, #4294967295
 8000e84:	f7ff ff90 	bl	8000da8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e88:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <SysTick_Config+0x40>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e8e:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <SysTick_Config+0x40>)
 8000e90:	2207      	movs	r2, #7
 8000e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	e000e010 	.word	0xe000e010

08000ea4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f7ff ff49 	bl	8000d44 <__NVIC_SetPriorityGrouping>
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b086      	sub	sp, #24
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	60b9      	str	r1, [r7, #8]
 8000ec4:	607a      	str	r2, [r7, #4]
 8000ec6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ecc:	f7ff ff5e 	bl	8000d8c <__NVIC_GetPriorityGrouping>
 8000ed0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	68b9      	ldr	r1, [r7, #8]
 8000ed6:	6978      	ldr	r0, [r7, #20]
 8000ed8:	f7ff ff90 	bl	8000dfc <NVIC_EncodePriority>
 8000edc:	4602      	mov	r2, r0
 8000ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee2:	4611      	mov	r1, r2
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff ff5f 	bl	8000da8 <__NVIC_SetPriority>
}
 8000eea:	bf00      	nop
 8000eec:	3718      	adds	r7, #24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b082      	sub	sp, #8
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f7ff ffb0 	bl	8000e60 <SysTick_Config>
 8000f00:	4603      	mov	r3, r0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
	...

08000f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b08b      	sub	sp, #44	; 0x2c
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f16:	2300      	movs	r3, #0
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f1e:	e169      	b.n	80011f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f20:	2201      	movs	r2, #1
 8000f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	69fa      	ldr	r2, [r7, #28]
 8000f30:	4013      	ands	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	f040 8158 	bne.w	80011ee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	4a9a      	ldr	r2, [pc, #616]	; (80011ac <HAL_GPIO_Init+0x2a0>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d05e      	beq.n	8001006 <HAL_GPIO_Init+0xfa>
 8000f48:	4a98      	ldr	r2, [pc, #608]	; (80011ac <HAL_GPIO_Init+0x2a0>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d875      	bhi.n	800103a <HAL_GPIO_Init+0x12e>
 8000f4e:	4a98      	ldr	r2, [pc, #608]	; (80011b0 <HAL_GPIO_Init+0x2a4>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d058      	beq.n	8001006 <HAL_GPIO_Init+0xfa>
 8000f54:	4a96      	ldr	r2, [pc, #600]	; (80011b0 <HAL_GPIO_Init+0x2a4>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d86f      	bhi.n	800103a <HAL_GPIO_Init+0x12e>
 8000f5a:	4a96      	ldr	r2, [pc, #600]	; (80011b4 <HAL_GPIO_Init+0x2a8>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d052      	beq.n	8001006 <HAL_GPIO_Init+0xfa>
 8000f60:	4a94      	ldr	r2, [pc, #592]	; (80011b4 <HAL_GPIO_Init+0x2a8>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d869      	bhi.n	800103a <HAL_GPIO_Init+0x12e>
 8000f66:	4a94      	ldr	r2, [pc, #592]	; (80011b8 <HAL_GPIO_Init+0x2ac>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d04c      	beq.n	8001006 <HAL_GPIO_Init+0xfa>
 8000f6c:	4a92      	ldr	r2, [pc, #584]	; (80011b8 <HAL_GPIO_Init+0x2ac>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d863      	bhi.n	800103a <HAL_GPIO_Init+0x12e>
 8000f72:	4a92      	ldr	r2, [pc, #584]	; (80011bc <HAL_GPIO_Init+0x2b0>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d046      	beq.n	8001006 <HAL_GPIO_Init+0xfa>
 8000f78:	4a90      	ldr	r2, [pc, #576]	; (80011bc <HAL_GPIO_Init+0x2b0>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d85d      	bhi.n	800103a <HAL_GPIO_Init+0x12e>
 8000f7e:	2b12      	cmp	r3, #18
 8000f80:	d82a      	bhi.n	8000fd8 <HAL_GPIO_Init+0xcc>
 8000f82:	2b12      	cmp	r3, #18
 8000f84:	d859      	bhi.n	800103a <HAL_GPIO_Init+0x12e>
 8000f86:	a201      	add	r2, pc, #4	; (adr r2, 8000f8c <HAL_GPIO_Init+0x80>)
 8000f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f8c:	08001007 	.word	0x08001007
 8000f90:	08000fe1 	.word	0x08000fe1
 8000f94:	08000ff3 	.word	0x08000ff3
 8000f98:	08001035 	.word	0x08001035
 8000f9c:	0800103b 	.word	0x0800103b
 8000fa0:	0800103b 	.word	0x0800103b
 8000fa4:	0800103b 	.word	0x0800103b
 8000fa8:	0800103b 	.word	0x0800103b
 8000fac:	0800103b 	.word	0x0800103b
 8000fb0:	0800103b 	.word	0x0800103b
 8000fb4:	0800103b 	.word	0x0800103b
 8000fb8:	0800103b 	.word	0x0800103b
 8000fbc:	0800103b 	.word	0x0800103b
 8000fc0:	0800103b 	.word	0x0800103b
 8000fc4:	0800103b 	.word	0x0800103b
 8000fc8:	0800103b 	.word	0x0800103b
 8000fcc:	0800103b 	.word	0x0800103b
 8000fd0:	08000fe9 	.word	0x08000fe9
 8000fd4:	08000ffd 	.word	0x08000ffd
 8000fd8:	4a79      	ldr	r2, [pc, #484]	; (80011c0 <HAL_GPIO_Init+0x2b4>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d013      	beq.n	8001006 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000fde:	e02c      	b.n	800103a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	623b      	str	r3, [r7, #32]
          break;
 8000fe6:	e029      	b.n	800103c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	3304      	adds	r3, #4
 8000fee:	623b      	str	r3, [r7, #32]
          break;
 8000ff0:	e024      	b.n	800103c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	68db      	ldr	r3, [r3, #12]
 8000ff6:	3308      	adds	r3, #8
 8000ff8:	623b      	str	r3, [r7, #32]
          break;
 8000ffa:	e01f      	b.n	800103c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	330c      	adds	r3, #12
 8001002:	623b      	str	r3, [r7, #32]
          break;
 8001004:	e01a      	b.n	800103c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d102      	bne.n	8001014 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800100e:	2304      	movs	r3, #4
 8001010:	623b      	str	r3, [r7, #32]
          break;
 8001012:	e013      	b.n	800103c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d105      	bne.n	8001028 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800101c:	2308      	movs	r3, #8
 800101e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	69fa      	ldr	r2, [r7, #28]
 8001024:	611a      	str	r2, [r3, #16]
          break;
 8001026:	e009      	b.n	800103c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001028:	2308      	movs	r3, #8
 800102a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	69fa      	ldr	r2, [r7, #28]
 8001030:	615a      	str	r2, [r3, #20]
          break;
 8001032:	e003      	b.n	800103c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001034:	2300      	movs	r3, #0
 8001036:	623b      	str	r3, [r7, #32]
          break;
 8001038:	e000      	b.n	800103c <HAL_GPIO_Init+0x130>
          break;
 800103a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	2bff      	cmp	r3, #255	; 0xff
 8001040:	d801      	bhi.n	8001046 <HAL_GPIO_Init+0x13a>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	e001      	b.n	800104a <HAL_GPIO_Init+0x13e>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	3304      	adds	r3, #4
 800104a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	2bff      	cmp	r3, #255	; 0xff
 8001050:	d802      	bhi.n	8001058 <HAL_GPIO_Init+0x14c>
 8001052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	e002      	b.n	800105e <HAL_GPIO_Init+0x152>
 8001058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105a:	3b08      	subs	r3, #8
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	210f      	movs	r1, #15
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	fa01 f303 	lsl.w	r3, r1, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	401a      	ands	r2, r3
 8001070:	6a39      	ldr	r1, [r7, #32]
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	fa01 f303 	lsl.w	r3, r1, r3
 8001078:	431a      	orrs	r2, r3
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001086:	2b00      	cmp	r3, #0
 8001088:	f000 80b1 	beq.w	80011ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800108c:	4b4d      	ldr	r3, [pc, #308]	; (80011c4 <HAL_GPIO_Init+0x2b8>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	4a4c      	ldr	r2, [pc, #304]	; (80011c4 <HAL_GPIO_Init+0x2b8>)
 8001092:	f043 0301 	orr.w	r3, r3, #1
 8001096:	6193      	str	r3, [r2, #24]
 8001098:	4b4a      	ldr	r3, [pc, #296]	; (80011c4 <HAL_GPIO_Init+0x2b8>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010a4:	4a48      	ldr	r2, [pc, #288]	; (80011c8 <HAL_GPIO_Init+0x2bc>)
 80010a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a8:	089b      	lsrs	r3, r3, #2
 80010aa:	3302      	adds	r3, #2
 80010ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b4:	f003 0303 	and.w	r3, r3, #3
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	220f      	movs	r2, #15
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	68fa      	ldr	r2, [r7, #12]
 80010c4:	4013      	ands	r3, r2
 80010c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4a40      	ldr	r2, [pc, #256]	; (80011cc <HAL_GPIO_Init+0x2c0>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d013      	beq.n	80010f8 <HAL_GPIO_Init+0x1ec>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4a3f      	ldr	r2, [pc, #252]	; (80011d0 <HAL_GPIO_Init+0x2c4>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d00d      	beq.n	80010f4 <HAL_GPIO_Init+0x1e8>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4a3e      	ldr	r2, [pc, #248]	; (80011d4 <HAL_GPIO_Init+0x2c8>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d007      	beq.n	80010f0 <HAL_GPIO_Init+0x1e4>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4a3d      	ldr	r2, [pc, #244]	; (80011d8 <HAL_GPIO_Init+0x2cc>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d101      	bne.n	80010ec <HAL_GPIO_Init+0x1e0>
 80010e8:	2303      	movs	r3, #3
 80010ea:	e006      	b.n	80010fa <HAL_GPIO_Init+0x1ee>
 80010ec:	2304      	movs	r3, #4
 80010ee:	e004      	b.n	80010fa <HAL_GPIO_Init+0x1ee>
 80010f0:	2302      	movs	r3, #2
 80010f2:	e002      	b.n	80010fa <HAL_GPIO_Init+0x1ee>
 80010f4:	2301      	movs	r3, #1
 80010f6:	e000      	b.n	80010fa <HAL_GPIO_Init+0x1ee>
 80010f8:	2300      	movs	r3, #0
 80010fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010fc:	f002 0203 	and.w	r2, r2, #3
 8001100:	0092      	lsls	r2, r2, #2
 8001102:	4093      	lsls	r3, r2
 8001104:	68fa      	ldr	r2, [r7, #12]
 8001106:	4313      	orrs	r3, r2
 8001108:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800110a:	492f      	ldr	r1, [pc, #188]	; (80011c8 <HAL_GPIO_Init+0x2bc>)
 800110c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110e:	089b      	lsrs	r3, r3, #2
 8001110:	3302      	adds	r3, #2
 8001112:	68fa      	ldr	r2, [r7, #12]
 8001114:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d006      	beq.n	8001132 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001124:	4b2d      	ldr	r3, [pc, #180]	; (80011dc <HAL_GPIO_Init+0x2d0>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	492c      	ldr	r1, [pc, #176]	; (80011dc <HAL_GPIO_Init+0x2d0>)
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	4313      	orrs	r3, r2
 800112e:	600b      	str	r3, [r1, #0]
 8001130:	e006      	b.n	8001140 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001132:	4b2a      	ldr	r3, [pc, #168]	; (80011dc <HAL_GPIO_Init+0x2d0>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	43db      	mvns	r3, r3
 800113a:	4928      	ldr	r1, [pc, #160]	; (80011dc <HAL_GPIO_Init+0x2d0>)
 800113c:	4013      	ands	r3, r2
 800113e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d006      	beq.n	800115a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800114c:	4b23      	ldr	r3, [pc, #140]	; (80011dc <HAL_GPIO_Init+0x2d0>)
 800114e:	685a      	ldr	r2, [r3, #4]
 8001150:	4922      	ldr	r1, [pc, #136]	; (80011dc <HAL_GPIO_Init+0x2d0>)
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	4313      	orrs	r3, r2
 8001156:	604b      	str	r3, [r1, #4]
 8001158:	e006      	b.n	8001168 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800115a:	4b20      	ldr	r3, [pc, #128]	; (80011dc <HAL_GPIO_Init+0x2d0>)
 800115c:	685a      	ldr	r2, [r3, #4]
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	43db      	mvns	r3, r3
 8001162:	491e      	ldr	r1, [pc, #120]	; (80011dc <HAL_GPIO_Init+0x2d0>)
 8001164:	4013      	ands	r3, r2
 8001166:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d006      	beq.n	8001182 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001174:	4b19      	ldr	r3, [pc, #100]	; (80011dc <HAL_GPIO_Init+0x2d0>)
 8001176:	689a      	ldr	r2, [r3, #8]
 8001178:	4918      	ldr	r1, [pc, #96]	; (80011dc <HAL_GPIO_Init+0x2d0>)
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	4313      	orrs	r3, r2
 800117e:	608b      	str	r3, [r1, #8]
 8001180:	e006      	b.n	8001190 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001182:	4b16      	ldr	r3, [pc, #88]	; (80011dc <HAL_GPIO_Init+0x2d0>)
 8001184:	689a      	ldr	r2, [r3, #8]
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	43db      	mvns	r3, r3
 800118a:	4914      	ldr	r1, [pc, #80]	; (80011dc <HAL_GPIO_Init+0x2d0>)
 800118c:	4013      	ands	r3, r2
 800118e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d021      	beq.n	80011e0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800119c:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <HAL_GPIO_Init+0x2d0>)
 800119e:	68da      	ldr	r2, [r3, #12]
 80011a0:	490e      	ldr	r1, [pc, #56]	; (80011dc <HAL_GPIO_Init+0x2d0>)
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	60cb      	str	r3, [r1, #12]
 80011a8:	e021      	b.n	80011ee <HAL_GPIO_Init+0x2e2>
 80011aa:	bf00      	nop
 80011ac:	10320000 	.word	0x10320000
 80011b0:	10310000 	.word	0x10310000
 80011b4:	10220000 	.word	0x10220000
 80011b8:	10210000 	.word	0x10210000
 80011bc:	10120000 	.word	0x10120000
 80011c0:	10110000 	.word	0x10110000
 80011c4:	40021000 	.word	0x40021000
 80011c8:	40010000 	.word	0x40010000
 80011cc:	40010800 	.word	0x40010800
 80011d0:	40010c00 	.word	0x40010c00
 80011d4:	40011000 	.word	0x40011000
 80011d8:	40011400 	.word	0x40011400
 80011dc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011e0:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <HAL_GPIO_Init+0x304>)
 80011e2:	68da      	ldr	r2, [r3, #12]
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	43db      	mvns	r3, r3
 80011e8:	4909      	ldr	r1, [pc, #36]	; (8001210 <HAL_GPIO_Init+0x304>)
 80011ea:	4013      	ands	r3, r2
 80011ec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80011ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f0:	3301      	adds	r3, #1
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fa:	fa22 f303 	lsr.w	r3, r2, r3
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f47f ae8e 	bne.w	8000f20 <HAL_GPIO_Init+0x14>
  }
}
 8001204:	bf00      	nop
 8001206:	bf00      	nop
 8001208:	372c      	adds	r7, #44	; 0x2c
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr
 8001210:	40010400 	.word	0x40010400

08001214 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	460b      	mov	r3, r1
 800121e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	689a      	ldr	r2, [r3, #8]
 8001224:	887b      	ldrh	r3, [r7, #2]
 8001226:	4013      	ands	r3, r2
 8001228:	2b00      	cmp	r3, #0
 800122a:	d002      	beq.n	8001232 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800122c:	2301      	movs	r3, #1
 800122e:	73fb      	strb	r3, [r7, #15]
 8001230:	e001      	b.n	8001236 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001232:	2300      	movs	r3, #0
 8001234:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001236:	7bfb      	ldrb	r3, [r7, #15]
}
 8001238:	4618      	mov	r0, r3
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr

08001242 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001242:	b480      	push	{r7}
 8001244:	b083      	sub	sp, #12
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
 800124a:	460b      	mov	r3, r1
 800124c:	807b      	strh	r3, [r7, #2]
 800124e:	4613      	mov	r3, r2
 8001250:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001252:	787b      	ldrb	r3, [r7, #1]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d003      	beq.n	8001260 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001258:	887a      	ldrh	r2, [r7, #2]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800125e:	e003      	b.n	8001268 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001260:	887b      	ldrh	r3, [r7, #2]
 8001262:	041a      	lsls	r2, r3, #16
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	611a      	str	r2, [r3, #16]
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr
	...

08001274 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d101      	bne.n	8001286 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e12b      	b.n	80014de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b00      	cmp	r3, #0
 8001290:	d106      	bne.n	80012a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f7ff fc2e 	bl	8000afc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2224      	movs	r2, #36	; 0x24
 80012a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f022 0201 	bic.w	r2, r2, #1
 80012b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80012d8:	f000 ffea 	bl	80022b0 <HAL_RCC_GetPCLK1Freq>
 80012dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	4a81      	ldr	r2, [pc, #516]	; (80014e8 <HAL_I2C_Init+0x274>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d807      	bhi.n	80012f8 <HAL_I2C_Init+0x84>
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4a80      	ldr	r2, [pc, #512]	; (80014ec <HAL_I2C_Init+0x278>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	bf94      	ite	ls
 80012f0:	2301      	movls	r3, #1
 80012f2:	2300      	movhi	r3, #0
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	e006      	b.n	8001306 <HAL_I2C_Init+0x92>
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4a7d      	ldr	r2, [pc, #500]	; (80014f0 <HAL_I2C_Init+0x27c>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	bf94      	ite	ls
 8001300:	2301      	movls	r3, #1
 8001302:	2300      	movhi	r3, #0
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e0e7      	b.n	80014de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	4a78      	ldr	r2, [pc, #480]	; (80014f4 <HAL_I2C_Init+0x280>)
 8001312:	fba2 2303 	umull	r2, r3, r2, r3
 8001316:	0c9b      	lsrs	r3, r3, #18
 8001318:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	68ba      	ldr	r2, [r7, #8]
 800132a:	430a      	orrs	r2, r1
 800132c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	6a1b      	ldr	r3, [r3, #32]
 8001334:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	4a6a      	ldr	r2, [pc, #424]	; (80014e8 <HAL_I2C_Init+0x274>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d802      	bhi.n	8001348 <HAL_I2C_Init+0xd4>
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	3301      	adds	r3, #1
 8001346:	e009      	b.n	800135c <HAL_I2C_Init+0xe8>
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800134e:	fb02 f303 	mul.w	r3, r2, r3
 8001352:	4a69      	ldr	r2, [pc, #420]	; (80014f8 <HAL_I2C_Init+0x284>)
 8001354:	fba2 2303 	umull	r2, r3, r2, r3
 8001358:	099b      	lsrs	r3, r3, #6
 800135a:	3301      	adds	r3, #1
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	6812      	ldr	r2, [r2, #0]
 8001360:	430b      	orrs	r3, r1
 8001362:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	69db      	ldr	r3, [r3, #28]
 800136a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800136e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	495c      	ldr	r1, [pc, #368]	; (80014e8 <HAL_I2C_Init+0x274>)
 8001378:	428b      	cmp	r3, r1
 800137a:	d819      	bhi.n	80013b0 <HAL_I2C_Init+0x13c>
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	1e59      	subs	r1, r3, #1
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	fbb1 f3f3 	udiv	r3, r1, r3
 800138a:	1c59      	adds	r1, r3, #1
 800138c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001390:	400b      	ands	r3, r1
 8001392:	2b00      	cmp	r3, #0
 8001394:	d00a      	beq.n	80013ac <HAL_I2C_Init+0x138>
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	1e59      	subs	r1, r3, #1
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80013a4:	3301      	adds	r3, #1
 80013a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013aa:	e051      	b.n	8001450 <HAL_I2C_Init+0x1dc>
 80013ac:	2304      	movs	r3, #4
 80013ae:	e04f      	b.n	8001450 <HAL_I2C_Init+0x1dc>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d111      	bne.n	80013dc <HAL_I2C_Init+0x168>
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	1e58      	subs	r0, r3, #1
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6859      	ldr	r1, [r3, #4]
 80013c0:	460b      	mov	r3, r1
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	440b      	add	r3, r1
 80013c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80013ca:	3301      	adds	r3, #1
 80013cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	bf0c      	ite	eq
 80013d4:	2301      	moveq	r3, #1
 80013d6:	2300      	movne	r3, #0
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	e012      	b.n	8001402 <HAL_I2C_Init+0x18e>
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	1e58      	subs	r0, r3, #1
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6859      	ldr	r1, [r3, #4]
 80013e4:	460b      	mov	r3, r1
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	440b      	add	r3, r1
 80013ea:	0099      	lsls	r1, r3, #2
 80013ec:	440b      	add	r3, r1
 80013ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80013f2:	3301      	adds	r3, #1
 80013f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	bf0c      	ite	eq
 80013fc:	2301      	moveq	r3, #1
 80013fe:	2300      	movne	r3, #0
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <HAL_I2C_Init+0x196>
 8001406:	2301      	movs	r3, #1
 8001408:	e022      	b.n	8001450 <HAL_I2C_Init+0x1dc>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d10e      	bne.n	8001430 <HAL_I2C_Init+0x1bc>
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	1e58      	subs	r0, r3, #1
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6859      	ldr	r1, [r3, #4]
 800141a:	460b      	mov	r3, r1
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	440b      	add	r3, r1
 8001420:	fbb0 f3f3 	udiv	r3, r0, r3
 8001424:	3301      	adds	r3, #1
 8001426:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800142a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800142e:	e00f      	b.n	8001450 <HAL_I2C_Init+0x1dc>
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	1e58      	subs	r0, r3, #1
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6859      	ldr	r1, [r3, #4]
 8001438:	460b      	mov	r3, r1
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	440b      	add	r3, r1
 800143e:	0099      	lsls	r1, r3, #2
 8001440:	440b      	add	r3, r1
 8001442:	fbb0 f3f3 	udiv	r3, r0, r3
 8001446:	3301      	adds	r3, #1
 8001448:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800144c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001450:	6879      	ldr	r1, [r7, #4]
 8001452:	6809      	ldr	r1, [r1, #0]
 8001454:	4313      	orrs	r3, r2
 8001456:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	69da      	ldr	r2, [r3, #28]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6a1b      	ldr	r3, [r3, #32]
 800146a:	431a      	orrs	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	430a      	orrs	r2, r1
 8001472:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800147e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	6911      	ldr	r1, [r2, #16]
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	68d2      	ldr	r2, [r2, #12]
 800148a:	4311      	orrs	r1, r2
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	6812      	ldr	r2, [r2, #0]
 8001490:	430b      	orrs	r3, r1
 8001492:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	695a      	ldr	r2, [r3, #20]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	431a      	orrs	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	430a      	orrs	r2, r1
 80014ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f042 0201 	orr.w	r2, r2, #1
 80014be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2220      	movs	r2, #32
 80014ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	000186a0 	.word	0x000186a0
 80014ec:	001e847f 	.word	0x001e847f
 80014f0:	003d08ff 	.word	0x003d08ff
 80014f4:	431bde83 	.word	0x431bde83
 80014f8:	10624dd3 	.word	0x10624dd3

080014fc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b088      	sub	sp, #32
 8001500:	af02      	add	r7, sp, #8
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	607a      	str	r2, [r7, #4]
 8001506:	461a      	mov	r2, r3
 8001508:	460b      	mov	r3, r1
 800150a:	817b      	strh	r3, [r7, #10]
 800150c:	4613      	mov	r3, r2
 800150e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001510:	f7ff fbea 	bl	8000ce8 <HAL_GetTick>
 8001514:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b20      	cmp	r3, #32
 8001520:	f040 80e0 	bne.w	80016e4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	2319      	movs	r3, #25
 800152a:	2201      	movs	r2, #1
 800152c:	4970      	ldr	r1, [pc, #448]	; (80016f0 <HAL_I2C_Master_Transmit+0x1f4>)
 800152e:	68f8      	ldr	r0, [r7, #12]
 8001530:	f000 f964 	bl	80017fc <I2C_WaitOnFlagUntilTimeout>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800153a:	2302      	movs	r3, #2
 800153c:	e0d3      	b.n	80016e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001544:	2b01      	cmp	r3, #1
 8001546:	d101      	bne.n	800154c <HAL_I2C_Master_Transmit+0x50>
 8001548:	2302      	movs	r3, #2
 800154a:	e0cc      	b.n	80016e6 <HAL_I2C_Master_Transmit+0x1ea>
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2201      	movs	r2, #1
 8001550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	2b01      	cmp	r3, #1
 8001560:	d007      	beq.n	8001572 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f042 0201 	orr.w	r2, r2, #1
 8001570:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001580:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2221      	movs	r2, #33	; 0x21
 8001586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2210      	movs	r2, #16
 800158e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2200      	movs	r2, #0
 8001596:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	893a      	ldrh	r2, [r7, #8]
 80015a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	4a50      	ldr	r2, [pc, #320]	; (80016f4 <HAL_I2C_Master_Transmit+0x1f8>)
 80015b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80015b4:	8979      	ldrh	r1, [r7, #10]
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	6a3a      	ldr	r2, [r7, #32]
 80015ba:	68f8      	ldr	r0, [r7, #12]
 80015bc:	f000 f89c 	bl	80016f8 <I2C_MasterRequestWrite>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e08d      	b.n	80016e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015ca:	2300      	movs	r3, #0
 80015cc:	613b      	str	r3, [r7, #16]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	695b      	ldr	r3, [r3, #20]
 80015d4:	613b      	str	r3, [r7, #16]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	613b      	str	r3, [r7, #16]
 80015de:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80015e0:	e066      	b.n	80016b0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	6a39      	ldr	r1, [r7, #32]
 80015e6:	68f8      	ldr	r0, [r7, #12]
 80015e8:	f000 f9de 	bl	80019a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d00d      	beq.n	800160e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	2b04      	cmp	r3, #4
 80015f8:	d107      	bne.n	800160a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001608:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e06b      	b.n	80016e6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001612:	781a      	ldrb	r2, [r3, #0]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161e:	1c5a      	adds	r2, r3, #1
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001628:	b29b      	uxth	r3, r3
 800162a:	3b01      	subs	r3, #1
 800162c:	b29a      	uxth	r2, r3
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001636:	3b01      	subs	r3, #1
 8001638:	b29a      	uxth	r2, r3
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	695b      	ldr	r3, [r3, #20]
 8001644:	f003 0304 	and.w	r3, r3, #4
 8001648:	2b04      	cmp	r3, #4
 800164a:	d11b      	bne.n	8001684 <HAL_I2C_Master_Transmit+0x188>
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001650:	2b00      	cmp	r3, #0
 8001652:	d017      	beq.n	8001684 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001658:	781a      	ldrb	r2, [r3, #0]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001664:	1c5a      	adds	r2, r3, #1
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800166e:	b29b      	uxth	r3, r3
 8001670:	3b01      	subs	r3, #1
 8001672:	b29a      	uxth	r2, r3
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800167c:	3b01      	subs	r3, #1
 800167e:	b29a      	uxth	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001684:	697a      	ldr	r2, [r7, #20]
 8001686:	6a39      	ldr	r1, [r7, #32]
 8001688:	68f8      	ldr	r0, [r7, #12]
 800168a:	f000 f9ce 	bl	8001a2a <I2C_WaitOnBTFFlagUntilTimeout>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d00d      	beq.n	80016b0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001698:	2b04      	cmp	r3, #4
 800169a:	d107      	bne.n	80016ac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016aa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e01a      	b.n	80016e6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d194      	bne.n	80015e2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2220      	movs	r2, #32
 80016cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2200      	movs	r2, #0
 80016d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80016e0:	2300      	movs	r3, #0
 80016e2:	e000      	b.n	80016e6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80016e4:	2302      	movs	r3, #2
  }
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3718      	adds	r7, #24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	00100002 	.word	0x00100002
 80016f4:	ffff0000 	.word	0xffff0000

080016f8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b088      	sub	sp, #32
 80016fc:	af02      	add	r7, sp, #8
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	607a      	str	r2, [r7, #4]
 8001702:	603b      	str	r3, [r7, #0]
 8001704:	460b      	mov	r3, r1
 8001706:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	2b08      	cmp	r3, #8
 8001712:	d006      	beq.n	8001722 <I2C_MasterRequestWrite+0x2a>
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d003      	beq.n	8001722 <I2C_MasterRequestWrite+0x2a>
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001720:	d108      	bne.n	8001734 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	e00b      	b.n	800174c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001738:	2b12      	cmp	r3, #18
 800173a:	d107      	bne.n	800174c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800174a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001758:	68f8      	ldr	r0, [r7, #12]
 800175a:	f000 f84f 	bl	80017fc <I2C_WaitOnFlagUntilTimeout>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d00d      	beq.n	8001780 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800176e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001772:	d103      	bne.n	800177c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f44f 7200 	mov.w	r2, #512	; 0x200
 800177a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e035      	b.n	80017ec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	691b      	ldr	r3, [r3, #16]
 8001784:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001788:	d108      	bne.n	800179c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800178a:	897b      	ldrh	r3, [r7, #10]
 800178c:	b2db      	uxtb	r3, r3
 800178e:	461a      	mov	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001798:	611a      	str	r2, [r3, #16]
 800179a:	e01b      	b.n	80017d4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800179c:	897b      	ldrh	r3, [r7, #10]
 800179e:	11db      	asrs	r3, r3, #7
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	f003 0306 	and.w	r3, r3, #6
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	f063 030f 	orn	r3, r3, #15
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	490e      	ldr	r1, [pc, #56]	; (80017f4 <I2C_MasterRequestWrite+0xfc>)
 80017ba:	68f8      	ldr	r0, [r7, #12]
 80017bc:	f000 f875 	bl	80018aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e010      	b.n	80017ec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80017ca:	897b      	ldrh	r3, [r7, #10]
 80017cc:	b2da      	uxtb	r2, r3
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	4907      	ldr	r1, [pc, #28]	; (80017f8 <I2C_MasterRequestWrite+0x100>)
 80017da:	68f8      	ldr	r0, [r7, #12]
 80017dc:	f000 f865 	bl	80018aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e000      	b.n	80017ec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3718      	adds	r7, #24
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	00010008 	.word	0x00010008
 80017f8:	00010002 	.word	0x00010002

080017fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	603b      	str	r3, [r7, #0]
 8001808:	4613      	mov	r3, r2
 800180a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800180c:	e025      	b.n	800185a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001814:	d021      	beq.n	800185a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001816:	f7ff fa67 	bl	8000ce8 <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	429a      	cmp	r2, r3
 8001824:	d302      	bcc.n	800182c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d116      	bne.n	800185a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2200      	movs	r2, #0
 8001830:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2220      	movs	r2, #32
 8001836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2200      	movs	r2, #0
 800183e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	f043 0220 	orr.w	r2, r3, #32
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2200      	movs	r2, #0
 8001852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e023      	b.n	80018a2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	0c1b      	lsrs	r3, r3, #16
 800185e:	b2db      	uxtb	r3, r3
 8001860:	2b01      	cmp	r3, #1
 8001862:	d10d      	bne.n	8001880 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	695b      	ldr	r3, [r3, #20]
 800186a:	43da      	mvns	r2, r3
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	4013      	ands	r3, r2
 8001870:	b29b      	uxth	r3, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	bf0c      	ite	eq
 8001876:	2301      	moveq	r3, #1
 8001878:	2300      	movne	r3, #0
 800187a:	b2db      	uxtb	r3, r3
 800187c:	461a      	mov	r2, r3
 800187e:	e00c      	b.n	800189a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	43da      	mvns	r2, r3
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	4013      	ands	r3, r2
 800188c:	b29b      	uxth	r3, r3
 800188e:	2b00      	cmp	r3, #0
 8001890:	bf0c      	ite	eq
 8001892:	2301      	moveq	r3, #1
 8001894:	2300      	movne	r3, #0
 8001896:	b2db      	uxtb	r3, r3
 8001898:	461a      	mov	r2, r3
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	429a      	cmp	r2, r3
 800189e:	d0b6      	beq.n	800180e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b084      	sub	sp, #16
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	60f8      	str	r0, [r7, #12]
 80018b2:	60b9      	str	r1, [r7, #8]
 80018b4:	607a      	str	r2, [r7, #4]
 80018b6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80018b8:	e051      	b.n	800195e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	695b      	ldr	r3, [r3, #20]
 80018c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018c8:	d123      	bne.n	8001912 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018d8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80018e2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2200      	movs	r2, #0
 80018e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2220      	movs	r2, #32
 80018ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	f043 0204 	orr.w	r2, r3, #4
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e046      	b.n	80019a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001918:	d021      	beq.n	800195e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800191a:	f7ff f9e5 	bl	8000ce8 <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	429a      	cmp	r2, r3
 8001928:	d302      	bcc.n	8001930 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d116      	bne.n	800195e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2200      	movs	r2, #0
 8001934:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2220      	movs	r2, #32
 800193a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2200      	movs	r2, #0
 8001942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	f043 0220 	orr.w	r2, r3, #32
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e020      	b.n	80019a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	0c1b      	lsrs	r3, r3, #16
 8001962:	b2db      	uxtb	r3, r3
 8001964:	2b01      	cmp	r3, #1
 8001966:	d10c      	bne.n	8001982 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	695b      	ldr	r3, [r3, #20]
 800196e:	43da      	mvns	r2, r3
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	4013      	ands	r3, r2
 8001974:	b29b      	uxth	r3, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	bf14      	ite	ne
 800197a:	2301      	movne	r3, #1
 800197c:	2300      	moveq	r3, #0
 800197e:	b2db      	uxtb	r3, r3
 8001980:	e00b      	b.n	800199a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	43da      	mvns	r2, r3
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	4013      	ands	r3, r2
 800198e:	b29b      	uxth	r3, r3
 8001990:	2b00      	cmp	r3, #0
 8001992:	bf14      	ite	ne
 8001994:	2301      	movne	r3, #1
 8001996:	2300      	moveq	r3, #0
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b00      	cmp	r3, #0
 800199c:	d18d      	bne.n	80018ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800199e:	2300      	movs	r3, #0
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019b4:	e02d      	b.n	8001a12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80019b6:	68f8      	ldr	r0, [r7, #12]
 80019b8:	f000 f878 	bl	8001aac <I2C_IsAcknowledgeFailed>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e02d      	b.n	8001a22 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019cc:	d021      	beq.n	8001a12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019ce:	f7ff f98b 	bl	8000ce8 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	68ba      	ldr	r2, [r7, #8]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d302      	bcc.n	80019e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d116      	bne.n	8001a12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2200      	movs	r2, #0
 80019e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2220      	movs	r2, #32
 80019ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	f043 0220 	orr.w	r2, r3, #32
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e007      	b.n	8001a22 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	695b      	ldr	r3, [r3, #20]
 8001a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a1c:	2b80      	cmp	r3, #128	; 0x80
 8001a1e:	d1ca      	bne.n	80019b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b084      	sub	sp, #16
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	60f8      	str	r0, [r7, #12]
 8001a32:	60b9      	str	r1, [r7, #8]
 8001a34:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001a36:	e02d      	b.n	8001a94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001a38:	68f8      	ldr	r0, [r7, #12]
 8001a3a:	f000 f837 	bl	8001aac <I2C_IsAcknowledgeFailed>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e02d      	b.n	8001aa4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a4e:	d021      	beq.n	8001a94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a50:	f7ff f94a 	bl	8000ce8 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d302      	bcc.n	8001a66 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d116      	bne.n	8001a94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2220      	movs	r2, #32
 8001a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a80:	f043 0220 	orr.w	r2, r3, #32
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e007      	b.n	8001aa4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	f003 0304 	and.w	r3, r3, #4
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	d1ca      	bne.n	8001a38 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001abe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ac2:	d11b      	bne.n	8001afc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001acc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2220      	movs	r2, #32
 8001ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae8:	f043 0204 	orr.w	r2, r3, #4
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e000      	b.n	8001afe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bc80      	pop	{r7}
 8001b06:	4770      	bx	lr

08001b08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e272      	b.n	8002000 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f000 8087 	beq.w	8001c36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b28:	4b92      	ldr	r3, [pc, #584]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f003 030c 	and.w	r3, r3, #12
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d00c      	beq.n	8001b4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b34:	4b8f      	ldr	r3, [pc, #572]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f003 030c 	and.w	r3, r3, #12
 8001b3c:	2b08      	cmp	r3, #8
 8001b3e:	d112      	bne.n	8001b66 <HAL_RCC_OscConfig+0x5e>
 8001b40:	4b8c      	ldr	r3, [pc, #560]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b4c:	d10b      	bne.n	8001b66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b4e:	4b89      	ldr	r3, [pc, #548]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d06c      	beq.n	8001c34 <HAL_RCC_OscConfig+0x12c>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d168      	bne.n	8001c34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e24c      	b.n	8002000 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b6e:	d106      	bne.n	8001b7e <HAL_RCC_OscConfig+0x76>
 8001b70:	4b80      	ldr	r3, [pc, #512]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a7f      	ldr	r2, [pc, #508]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001b76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b7a:	6013      	str	r3, [r2, #0]
 8001b7c:	e02e      	b.n	8001bdc <HAL_RCC_OscConfig+0xd4>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d10c      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x98>
 8001b86:	4b7b      	ldr	r3, [pc, #492]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a7a      	ldr	r2, [pc, #488]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b90:	6013      	str	r3, [r2, #0]
 8001b92:	4b78      	ldr	r3, [pc, #480]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a77      	ldr	r2, [pc, #476]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001b98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b9c:	6013      	str	r3, [r2, #0]
 8001b9e:	e01d      	b.n	8001bdc <HAL_RCC_OscConfig+0xd4>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ba8:	d10c      	bne.n	8001bc4 <HAL_RCC_OscConfig+0xbc>
 8001baa:	4b72      	ldr	r3, [pc, #456]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a71      	ldr	r2, [pc, #452]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bb4:	6013      	str	r3, [r2, #0]
 8001bb6:	4b6f      	ldr	r3, [pc, #444]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a6e      	ldr	r2, [pc, #440]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bc0:	6013      	str	r3, [r2, #0]
 8001bc2:	e00b      	b.n	8001bdc <HAL_RCC_OscConfig+0xd4>
 8001bc4:	4b6b      	ldr	r3, [pc, #428]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a6a      	ldr	r2, [pc, #424]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001bca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bce:	6013      	str	r3, [r2, #0]
 8001bd0:	4b68      	ldr	r3, [pc, #416]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a67      	ldr	r2, [pc, #412]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001bd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d013      	beq.n	8001c0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be4:	f7ff f880 	bl	8000ce8 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bec:	f7ff f87c 	bl	8000ce8 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b64      	cmp	r3, #100	; 0x64
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e200      	b.n	8002000 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bfe:	4b5d      	ldr	r3, [pc, #372]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0f0      	beq.n	8001bec <HAL_RCC_OscConfig+0xe4>
 8001c0a:	e014      	b.n	8001c36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0c:	f7ff f86c 	bl	8000ce8 <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c14:	f7ff f868 	bl	8000ce8 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b64      	cmp	r3, #100	; 0x64
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e1ec      	b.n	8002000 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c26:	4b53      	ldr	r3, [pc, #332]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1f0      	bne.n	8001c14 <HAL_RCC_OscConfig+0x10c>
 8001c32:	e000      	b.n	8001c36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d063      	beq.n	8001d0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c42:	4b4c      	ldr	r3, [pc, #304]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f003 030c 	and.w	r3, r3, #12
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d00b      	beq.n	8001c66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c4e:	4b49      	ldr	r3, [pc, #292]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f003 030c 	and.w	r3, r3, #12
 8001c56:	2b08      	cmp	r3, #8
 8001c58:	d11c      	bne.n	8001c94 <HAL_RCC_OscConfig+0x18c>
 8001c5a:	4b46      	ldr	r3, [pc, #280]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d116      	bne.n	8001c94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c66:	4b43      	ldr	r3, [pc, #268]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d005      	beq.n	8001c7e <HAL_RCC_OscConfig+0x176>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d001      	beq.n	8001c7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e1c0      	b.n	8002000 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c7e:	4b3d      	ldr	r3, [pc, #244]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	4939      	ldr	r1, [pc, #228]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c92:	e03a      	b.n	8001d0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d020      	beq.n	8001cde <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c9c:	4b36      	ldr	r3, [pc, #216]	; (8001d78 <HAL_RCC_OscConfig+0x270>)
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca2:	f7ff f821 	bl	8000ce8 <HAL_GetTick>
 8001ca6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001caa:	f7ff f81d 	bl	8000ce8 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e1a1      	b.n	8002000 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cbc:	4b2d      	ldr	r3, [pc, #180]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d0f0      	beq.n	8001caa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc8:	4b2a      	ldr	r3, [pc, #168]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	695b      	ldr	r3, [r3, #20]
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	4927      	ldr	r1, [pc, #156]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	600b      	str	r3, [r1, #0]
 8001cdc:	e015      	b.n	8001d0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cde:	4b26      	ldr	r3, [pc, #152]	; (8001d78 <HAL_RCC_OscConfig+0x270>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce4:	f7ff f800 	bl	8000ce8 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cec:	f7fe fffc 	bl	8000ce8 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e180      	b.n	8002000 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cfe:	4b1d      	ldr	r3, [pc, #116]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f0      	bne.n	8001cec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0308 	and.w	r3, r3, #8
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d03a      	beq.n	8001d8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d019      	beq.n	8001d52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d1e:	4b17      	ldr	r3, [pc, #92]	; (8001d7c <HAL_RCC_OscConfig+0x274>)
 8001d20:	2201      	movs	r2, #1
 8001d22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d24:	f7fe ffe0 	bl	8000ce8 <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d2c:	f7fe ffdc 	bl	8000ce8 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e160      	b.n	8002000 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d3e:	4b0d      	ldr	r3, [pc, #52]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d0f0      	beq.n	8001d2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d4a:	2001      	movs	r0, #1
 8001d4c:	f000 fac4 	bl	80022d8 <RCC_Delay>
 8001d50:	e01c      	b.n	8001d8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d52:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <HAL_RCC_OscConfig+0x274>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d58:	f7fe ffc6 	bl	8000ce8 <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d5e:	e00f      	b.n	8001d80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d60:	f7fe ffc2 	bl	8000ce8 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d908      	bls.n	8001d80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e146      	b.n	8002000 <HAL_RCC_OscConfig+0x4f8>
 8001d72:	bf00      	nop
 8001d74:	40021000 	.word	0x40021000
 8001d78:	42420000 	.word	0x42420000
 8001d7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d80:	4b92      	ldr	r3, [pc, #584]	; (8001fcc <HAL_RCC_OscConfig+0x4c4>)
 8001d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1e9      	bne.n	8001d60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0304 	and.w	r3, r3, #4
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f000 80a6 	beq.w	8001ee6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d9e:	4b8b      	ldr	r3, [pc, #556]	; (8001fcc <HAL_RCC_OscConfig+0x4c4>)
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d10d      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001daa:	4b88      	ldr	r3, [pc, #544]	; (8001fcc <HAL_RCC_OscConfig+0x4c4>)
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	4a87      	ldr	r2, [pc, #540]	; (8001fcc <HAL_RCC_OscConfig+0x4c4>)
 8001db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db4:	61d3      	str	r3, [r2, #28]
 8001db6:	4b85      	ldr	r3, [pc, #532]	; (8001fcc <HAL_RCC_OscConfig+0x4c4>)
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dbe:	60bb      	str	r3, [r7, #8]
 8001dc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc6:	4b82      	ldr	r3, [pc, #520]	; (8001fd0 <HAL_RCC_OscConfig+0x4c8>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d118      	bne.n	8001e04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dd2:	4b7f      	ldr	r3, [pc, #508]	; (8001fd0 <HAL_RCC_OscConfig+0x4c8>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a7e      	ldr	r2, [pc, #504]	; (8001fd0 <HAL_RCC_OscConfig+0x4c8>)
 8001dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ddc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dde:	f7fe ff83 	bl	8000ce8 <HAL_GetTick>
 8001de2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de4:	e008      	b.n	8001df8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001de6:	f7fe ff7f 	bl	8000ce8 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b64      	cmp	r3, #100	; 0x64
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e103      	b.n	8002000 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df8:	4b75      	ldr	r3, [pc, #468]	; (8001fd0 <HAL_RCC_OscConfig+0x4c8>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0f0      	beq.n	8001de6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d106      	bne.n	8001e1a <HAL_RCC_OscConfig+0x312>
 8001e0c:	4b6f      	ldr	r3, [pc, #444]	; (8001fcc <HAL_RCC_OscConfig+0x4c4>)
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	4a6e      	ldr	r2, [pc, #440]	; (8001fcc <HAL_RCC_OscConfig+0x4c4>)
 8001e12:	f043 0301 	orr.w	r3, r3, #1
 8001e16:	6213      	str	r3, [r2, #32]
 8001e18:	e02d      	b.n	8001e76 <HAL_RCC_OscConfig+0x36e>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d10c      	bne.n	8001e3c <HAL_RCC_OscConfig+0x334>
 8001e22:	4b6a      	ldr	r3, [pc, #424]	; (8001fcc <HAL_RCC_OscConfig+0x4c4>)
 8001e24:	6a1b      	ldr	r3, [r3, #32]
 8001e26:	4a69      	ldr	r2, [pc, #420]	; (8001fcc <HAL_RCC_OscConfig+0x4c4>)
 8001e28:	f023 0301 	bic.w	r3, r3, #1
 8001e2c:	6213      	str	r3, [r2, #32]
 8001e2e:	4b67      	ldr	r3, [pc, #412]	; (8001fcc <HAL_RCC_OscConfig+0x4c4>)
 8001e30:	6a1b      	ldr	r3, [r3, #32]
 8001e32:	4a66      	ldr	r2, [pc, #408]	; (8001fcc <HAL_RCC_OscConfig+0x4c4>)
 8001e34:	f023 0304 	bic.w	r3, r3, #4
 8001e38:	6213      	str	r3, [r2, #32]
 8001e3a:	e01c      	b.n	8001e76 <HAL_RCC_OscConfig+0x36e>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	2b05      	cmp	r3, #5
 8001e42:	d10c      	bne.n	8001e5e <HAL_RCC_OscConfig+0x356>
 8001e44:	4b61      	ldr	r3, [pc, #388]	; (8001fcc <HAL_RCC_OscConfig+0x4c4>)
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	4a60      	ldr	r2, [pc, #384]	; (8001fcc <HAL_RCC_OscConfig+0x4c4>)
 8001e4a:	f043 0304 	orr.w	r3, r3, #4
 8001e4e:	6213      	str	r3, [r2, #32]
 8001e50:	4b5e      	ldr	r3, [pc, #376]	; (8001fcc <HAL_RCC_OscConfig+0x4c4>)
 8001e52:	6a1b      	ldr	r3, [r3, #32]
 8001e54:	4a5d      	ldr	r2, [pc, #372]	; (8001fcc <HAL_RCC_OscConfig+0x4c4>)
 8001e56:	f043 0301 	orr.w	r3, r3, #1
 8001e5a:	6213      	str	r3, [r2, #32]
 8001e5c:	e00b      	b.n	8001e76 <HAL_RCC_OscConfig+0x36e>
 8001e5e:	4b5b      	ldr	r3, [pc, #364]	; (8001fcc <HAL_RCC_OscConfig+0x4c4>)
 8001e60:	6a1b      	ldr	r3, [r3, #32]
 8001e62:	4a5a      	ldr	r2, [pc, #360]	; (8001fcc <HAL_RCC_OscConfig+0x4c4>)
 8001e64:	f023 0301 	bic.w	r3, r3, #1
 8001e68:	6213      	str	r3, [r2, #32]
 8001e6a:	4b58      	ldr	r3, [pc, #352]	; (8001fcc <HAL_RCC_OscConfig+0x4c4>)
 8001e6c:	6a1b      	ldr	r3, [r3, #32]
 8001e6e:	4a57      	ldr	r2, [pc, #348]	; (8001fcc <HAL_RCC_OscConfig+0x4c4>)
 8001e70:	f023 0304 	bic.w	r3, r3, #4
 8001e74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d015      	beq.n	8001eaa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e7e:	f7fe ff33 	bl	8000ce8 <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e84:	e00a      	b.n	8001e9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e86:	f7fe ff2f 	bl	8000ce8 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e0b1      	b.n	8002000 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e9c:	4b4b      	ldr	r3, [pc, #300]	; (8001fcc <HAL_RCC_OscConfig+0x4c4>)
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d0ee      	beq.n	8001e86 <HAL_RCC_OscConfig+0x37e>
 8001ea8:	e014      	b.n	8001ed4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eaa:	f7fe ff1d 	bl	8000ce8 <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eb0:	e00a      	b.n	8001ec8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eb2:	f7fe ff19 	bl	8000ce8 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e09b      	b.n	8002000 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ec8:	4b40      	ldr	r3, [pc, #256]	; (8001fcc <HAL_RCC_OscConfig+0x4c4>)
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1ee      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ed4:	7dfb      	ldrb	r3, [r7, #23]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d105      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eda:	4b3c      	ldr	r3, [pc, #240]	; (8001fcc <HAL_RCC_OscConfig+0x4c4>)
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	4a3b      	ldr	r2, [pc, #236]	; (8001fcc <HAL_RCC_OscConfig+0x4c4>)
 8001ee0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ee4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 8087 	beq.w	8001ffe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ef0:	4b36      	ldr	r3, [pc, #216]	; (8001fcc <HAL_RCC_OscConfig+0x4c4>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 030c 	and.w	r3, r3, #12
 8001ef8:	2b08      	cmp	r3, #8
 8001efa:	d061      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	69db      	ldr	r3, [r3, #28]
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d146      	bne.n	8001f92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f04:	4b33      	ldr	r3, [pc, #204]	; (8001fd4 <HAL_RCC_OscConfig+0x4cc>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0a:	f7fe feed 	bl	8000ce8 <HAL_GetTick>
 8001f0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f10:	e008      	b.n	8001f24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f12:	f7fe fee9 	bl	8000ce8 <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e06d      	b.n	8002000 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f24:	4b29      	ldr	r3, [pc, #164]	; (8001fcc <HAL_RCC_OscConfig+0x4c4>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1f0      	bne.n	8001f12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f38:	d108      	bne.n	8001f4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f3a:	4b24      	ldr	r3, [pc, #144]	; (8001fcc <HAL_RCC_OscConfig+0x4c4>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	4921      	ldr	r1, [pc, #132]	; (8001fcc <HAL_RCC_OscConfig+0x4c4>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f4c:	4b1f      	ldr	r3, [pc, #124]	; (8001fcc <HAL_RCC_OscConfig+0x4c4>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a19      	ldr	r1, [r3, #32]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5c:	430b      	orrs	r3, r1
 8001f5e:	491b      	ldr	r1, [pc, #108]	; (8001fcc <HAL_RCC_OscConfig+0x4c4>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f64:	4b1b      	ldr	r3, [pc, #108]	; (8001fd4 <HAL_RCC_OscConfig+0x4cc>)
 8001f66:	2201      	movs	r2, #1
 8001f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6a:	f7fe febd 	bl	8000ce8 <HAL_GetTick>
 8001f6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f70:	e008      	b.n	8001f84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f72:	f7fe feb9 	bl	8000ce8 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e03d      	b.n	8002000 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f84:	4b11      	ldr	r3, [pc, #68]	; (8001fcc <HAL_RCC_OscConfig+0x4c4>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d0f0      	beq.n	8001f72 <HAL_RCC_OscConfig+0x46a>
 8001f90:	e035      	b.n	8001ffe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f92:	4b10      	ldr	r3, [pc, #64]	; (8001fd4 <HAL_RCC_OscConfig+0x4cc>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f98:	f7fe fea6 	bl	8000ce8 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa0:	f7fe fea2 	bl	8000ce8 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e026      	b.n	8002000 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb2:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <HAL_RCC_OscConfig+0x4c4>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1f0      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x498>
 8001fbe:	e01e      	b.n	8001ffe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	69db      	ldr	r3, [r3, #28]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d107      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e019      	b.n	8002000 <HAL_RCC_OscConfig+0x4f8>
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	40007000 	.word	0x40007000
 8001fd4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fd8:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <HAL_RCC_OscConfig+0x500>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d106      	bne.n	8001ffa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d001      	beq.n	8001ffe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e000      	b.n	8002000 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	3718      	adds	r7, #24
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40021000 	.word	0x40021000

0800200c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d101      	bne.n	8002020 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e0d0      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002020:	4b6a      	ldr	r3, [pc, #424]	; (80021cc <HAL_RCC_ClockConfig+0x1c0>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0307 	and.w	r3, r3, #7
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	429a      	cmp	r2, r3
 800202c:	d910      	bls.n	8002050 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800202e:	4b67      	ldr	r3, [pc, #412]	; (80021cc <HAL_RCC_ClockConfig+0x1c0>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f023 0207 	bic.w	r2, r3, #7
 8002036:	4965      	ldr	r1, [pc, #404]	; (80021cc <HAL_RCC_ClockConfig+0x1c0>)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	4313      	orrs	r3, r2
 800203c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800203e:	4b63      	ldr	r3, [pc, #396]	; (80021cc <HAL_RCC_ClockConfig+0x1c0>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	429a      	cmp	r2, r3
 800204a:	d001      	beq.n	8002050 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e0b8      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d020      	beq.n	800209e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0304 	and.w	r3, r3, #4
 8002064:	2b00      	cmp	r3, #0
 8002066:	d005      	beq.n	8002074 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002068:	4b59      	ldr	r3, [pc, #356]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	4a58      	ldr	r2, [pc, #352]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 800206e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002072:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0308 	and.w	r3, r3, #8
 800207c:	2b00      	cmp	r3, #0
 800207e:	d005      	beq.n	800208c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002080:	4b53      	ldr	r3, [pc, #332]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	4a52      	ldr	r2, [pc, #328]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002086:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800208a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800208c:	4b50      	ldr	r3, [pc, #320]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	494d      	ldr	r1, [pc, #308]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 800209a:	4313      	orrs	r3, r2
 800209c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d040      	beq.n	800212c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d107      	bne.n	80020c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020b2:	4b47      	ldr	r3, [pc, #284]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d115      	bne.n	80020ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e07f      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d107      	bne.n	80020da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ca:	4b41      	ldr	r3, [pc, #260]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d109      	bne.n	80020ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e073      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020da:	4b3d      	ldr	r3, [pc, #244]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e06b      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ea:	4b39      	ldr	r3, [pc, #228]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f023 0203 	bic.w	r2, r3, #3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	4936      	ldr	r1, [pc, #216]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020fc:	f7fe fdf4 	bl	8000ce8 <HAL_GetTick>
 8002100:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002102:	e00a      	b.n	800211a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002104:	f7fe fdf0 	bl	8000ce8 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002112:	4293      	cmp	r3, r2
 8002114:	d901      	bls.n	800211a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e053      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800211a:	4b2d      	ldr	r3, [pc, #180]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f003 020c 	and.w	r2, r3, #12
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	429a      	cmp	r2, r3
 800212a:	d1eb      	bne.n	8002104 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800212c:	4b27      	ldr	r3, [pc, #156]	; (80021cc <HAL_RCC_ClockConfig+0x1c0>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	429a      	cmp	r2, r3
 8002138:	d210      	bcs.n	800215c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800213a:	4b24      	ldr	r3, [pc, #144]	; (80021cc <HAL_RCC_ClockConfig+0x1c0>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f023 0207 	bic.w	r2, r3, #7
 8002142:	4922      	ldr	r1, [pc, #136]	; (80021cc <HAL_RCC_ClockConfig+0x1c0>)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	4313      	orrs	r3, r2
 8002148:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800214a:	4b20      	ldr	r3, [pc, #128]	; (80021cc <HAL_RCC_ClockConfig+0x1c0>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	429a      	cmp	r2, r3
 8002156:	d001      	beq.n	800215c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e032      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0304 	and.w	r3, r3, #4
 8002164:	2b00      	cmp	r3, #0
 8002166:	d008      	beq.n	800217a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002168:	4b19      	ldr	r3, [pc, #100]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	4916      	ldr	r1, [pc, #88]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002176:	4313      	orrs	r3, r2
 8002178:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0308 	and.w	r3, r3, #8
 8002182:	2b00      	cmp	r3, #0
 8002184:	d009      	beq.n	800219a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002186:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	490e      	ldr	r1, [pc, #56]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002196:	4313      	orrs	r3, r2
 8002198:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800219a:	f000 f821 	bl	80021e0 <HAL_RCC_GetSysClockFreq>
 800219e:	4602      	mov	r2, r0
 80021a0:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	091b      	lsrs	r3, r3, #4
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	490a      	ldr	r1, [pc, #40]	; (80021d4 <HAL_RCC_ClockConfig+0x1c8>)
 80021ac:	5ccb      	ldrb	r3, [r1, r3]
 80021ae:	fa22 f303 	lsr.w	r3, r2, r3
 80021b2:	4a09      	ldr	r2, [pc, #36]	; (80021d8 <HAL_RCC_ClockConfig+0x1cc>)
 80021b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021b6:	4b09      	ldr	r3, [pc, #36]	; (80021dc <HAL_RCC_ClockConfig+0x1d0>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7fe fd52 	bl	8000c64 <HAL_InitTick>

  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40022000 	.word	0x40022000
 80021d0:	40021000 	.word	0x40021000
 80021d4:	08004df4 	.word	0x08004df4
 80021d8:	20000010 	.word	0x20000010
 80021dc:	20000014 	.word	0x20000014

080021e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021e0:	b490      	push	{r4, r7}
 80021e2:	b08a      	sub	sp, #40	; 0x28
 80021e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80021e6:	4b29      	ldr	r3, [pc, #164]	; (800228c <HAL_RCC_GetSysClockFreq+0xac>)
 80021e8:	1d3c      	adds	r4, r7, #4
 80021ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80021f0:	f240 2301 	movw	r3, #513	; 0x201
 80021f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021f6:	2300      	movs	r3, #0
 80021f8:	61fb      	str	r3, [r7, #28]
 80021fa:	2300      	movs	r3, #0
 80021fc:	61bb      	str	r3, [r7, #24]
 80021fe:	2300      	movs	r3, #0
 8002200:	627b      	str	r3, [r7, #36]	; 0x24
 8002202:	2300      	movs	r3, #0
 8002204:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002206:	2300      	movs	r3, #0
 8002208:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800220a:	4b21      	ldr	r3, [pc, #132]	; (8002290 <HAL_RCC_GetSysClockFreq+0xb0>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	f003 030c 	and.w	r3, r3, #12
 8002216:	2b04      	cmp	r3, #4
 8002218:	d002      	beq.n	8002220 <HAL_RCC_GetSysClockFreq+0x40>
 800221a:	2b08      	cmp	r3, #8
 800221c:	d003      	beq.n	8002226 <HAL_RCC_GetSysClockFreq+0x46>
 800221e:	e02b      	b.n	8002278 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002220:	4b1c      	ldr	r3, [pc, #112]	; (8002294 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002222:	623b      	str	r3, [r7, #32]
      break;
 8002224:	e02b      	b.n	800227e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	0c9b      	lsrs	r3, r3, #18
 800222a:	f003 030f 	and.w	r3, r3, #15
 800222e:	3328      	adds	r3, #40	; 0x28
 8002230:	443b      	add	r3, r7
 8002232:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002236:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d012      	beq.n	8002268 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002242:	4b13      	ldr	r3, [pc, #76]	; (8002290 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	0c5b      	lsrs	r3, r3, #17
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	3328      	adds	r3, #40	; 0x28
 800224e:	443b      	add	r3, r7
 8002250:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002254:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	4a0e      	ldr	r2, [pc, #56]	; (8002294 <HAL_RCC_GetSysClockFreq+0xb4>)
 800225a:	fb03 f202 	mul.w	r2, r3, r2
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	fbb2 f3f3 	udiv	r3, r2, r3
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
 8002266:	e004      	b.n	8002272 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	4a0b      	ldr	r2, [pc, #44]	; (8002298 <HAL_RCC_GetSysClockFreq+0xb8>)
 800226c:	fb02 f303 	mul.w	r3, r2, r3
 8002270:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	623b      	str	r3, [r7, #32]
      break;
 8002276:	e002      	b.n	800227e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002278:	4b06      	ldr	r3, [pc, #24]	; (8002294 <HAL_RCC_GetSysClockFreq+0xb4>)
 800227a:	623b      	str	r3, [r7, #32]
      break;
 800227c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800227e:	6a3b      	ldr	r3, [r7, #32]
}
 8002280:	4618      	mov	r0, r3
 8002282:	3728      	adds	r7, #40	; 0x28
 8002284:	46bd      	mov	sp, r7
 8002286:	bc90      	pop	{r4, r7}
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	08004da8 	.word	0x08004da8
 8002290:	40021000 	.word	0x40021000
 8002294:	007a1200 	.word	0x007a1200
 8002298:	003d0900 	.word	0x003d0900

0800229c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022a0:	4b02      	ldr	r3, [pc, #8]	; (80022ac <HAL_RCC_GetHCLKFreq+0x10>)
 80022a2:	681b      	ldr	r3, [r3, #0]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bc80      	pop	{r7}
 80022aa:	4770      	bx	lr
 80022ac:	20000010 	.word	0x20000010

080022b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022b4:	f7ff fff2 	bl	800229c <HAL_RCC_GetHCLKFreq>
 80022b8:	4602      	mov	r2, r0
 80022ba:	4b05      	ldr	r3, [pc, #20]	; (80022d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	0a1b      	lsrs	r3, r3, #8
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	4903      	ldr	r1, [pc, #12]	; (80022d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022c6:	5ccb      	ldrb	r3, [r1, r3]
 80022c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40021000 	.word	0x40021000
 80022d4:	08004e04 	.word	0x08004e04

080022d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022e0:	4b0a      	ldr	r3, [pc, #40]	; (800230c <RCC_Delay+0x34>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a0a      	ldr	r2, [pc, #40]	; (8002310 <RCC_Delay+0x38>)
 80022e6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ea:	0a5b      	lsrs	r3, r3, #9
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	fb02 f303 	mul.w	r3, r2, r3
 80022f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022f4:	bf00      	nop
  }
  while (Delay --);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	1e5a      	subs	r2, r3, #1
 80022fa:	60fa      	str	r2, [r7, #12]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d1f9      	bne.n	80022f4 <RCC_Delay+0x1c>
}
 8002300:	bf00      	nop
 8002302:	bf00      	nop
 8002304:	3714      	adds	r7, #20
 8002306:	46bd      	mov	sp, r7
 8002308:	bc80      	pop	{r7}
 800230a:	4770      	bx	lr
 800230c:	20000010 	.word	0x20000010
 8002310:	10624dd3 	.word	0x10624dd3

08002314 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800231a:	f3ef 8305 	mrs	r3, IPSR
 800231e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002320:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002322:	2b00      	cmp	r3, #0
 8002324:	d10f      	bne.n	8002346 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002326:	f3ef 8310 	mrs	r3, PRIMASK
 800232a:	607b      	str	r3, [r7, #4]
  return(result);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d109      	bne.n	8002346 <osKernelInitialize+0x32>
 8002332:	4b10      	ldr	r3, [pc, #64]	; (8002374 <osKernelInitialize+0x60>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2b02      	cmp	r3, #2
 8002338:	d109      	bne.n	800234e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800233a:	f3ef 8311 	mrs	r3, BASEPRI
 800233e:	603b      	str	r3, [r7, #0]
  return(result);
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002346:	f06f 0305 	mvn.w	r3, #5
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	e00c      	b.n	8002368 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800234e:	4b09      	ldr	r3, [pc, #36]	; (8002374 <osKernelInitialize+0x60>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d105      	bne.n	8002362 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002356:	4b07      	ldr	r3, [pc, #28]	; (8002374 <osKernelInitialize+0x60>)
 8002358:	2201      	movs	r2, #1
 800235a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800235c:	2300      	movs	r3, #0
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	e002      	b.n	8002368 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002362:	f04f 33ff 	mov.w	r3, #4294967295
 8002366:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002368:	68fb      	ldr	r3, [r7, #12]
}
 800236a:	4618      	mov	r0, r3
 800236c:	3714      	adds	r7, #20
 800236e:	46bd      	mov	sp, r7
 8002370:	bc80      	pop	{r7}
 8002372:	4770      	bx	lr
 8002374:	200000a0 	.word	0x200000a0

08002378 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800237e:	f3ef 8305 	mrs	r3, IPSR
 8002382:	60bb      	str	r3, [r7, #8]
  return(result);
 8002384:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002386:	2b00      	cmp	r3, #0
 8002388:	d10f      	bne.n	80023aa <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800238a:	f3ef 8310 	mrs	r3, PRIMASK
 800238e:	607b      	str	r3, [r7, #4]
  return(result);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d109      	bne.n	80023aa <osKernelStart+0x32>
 8002396:	4b11      	ldr	r3, [pc, #68]	; (80023dc <osKernelStart+0x64>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2b02      	cmp	r3, #2
 800239c:	d109      	bne.n	80023b2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800239e:	f3ef 8311 	mrs	r3, BASEPRI
 80023a2:	603b      	str	r3, [r7, #0]
  return(result);
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80023aa:	f06f 0305 	mvn.w	r3, #5
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	e00e      	b.n	80023d0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80023b2:	4b0a      	ldr	r3, [pc, #40]	; (80023dc <osKernelStart+0x64>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d107      	bne.n	80023ca <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80023ba:	4b08      	ldr	r3, [pc, #32]	; (80023dc <osKernelStart+0x64>)
 80023bc:	2202      	movs	r2, #2
 80023be:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80023c0:	f001 f878 	bl	80034b4 <vTaskStartScheduler>
      stat = osOK;
 80023c4:	2300      	movs	r3, #0
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	e002      	b.n	80023d0 <osKernelStart+0x58>
    } else {
      stat = osError;
 80023ca:	f04f 33ff 	mov.w	r3, #4294967295
 80023ce:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80023d0:	68fb      	ldr	r3, [r7, #12]
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	200000a0 	.word	0x200000a0

080023e0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b092      	sub	sp, #72	; 0x48
 80023e4:	af04      	add	r7, sp, #16
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80023ec:	2300      	movs	r3, #0
 80023ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023f0:	f3ef 8305 	mrs	r3, IPSR
 80023f4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80023f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f040 8094 	bne.w	8002526 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023fe:	f3ef 8310 	mrs	r3, PRIMASK
 8002402:	623b      	str	r3, [r7, #32]
  return(result);
 8002404:	6a3b      	ldr	r3, [r7, #32]
 8002406:	2b00      	cmp	r3, #0
 8002408:	f040 808d 	bne.w	8002526 <osThreadNew+0x146>
 800240c:	4b48      	ldr	r3, [pc, #288]	; (8002530 <osThreadNew+0x150>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2b02      	cmp	r3, #2
 8002412:	d106      	bne.n	8002422 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002414:	f3ef 8311 	mrs	r3, BASEPRI
 8002418:	61fb      	str	r3, [r7, #28]
  return(result);
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	2b00      	cmp	r3, #0
 800241e:	f040 8082 	bne.w	8002526 <osThreadNew+0x146>
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d07e      	beq.n	8002526 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002428:	2380      	movs	r3, #128	; 0x80
 800242a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800242c:	2318      	movs	r3, #24
 800242e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002430:	2300      	movs	r3, #0
 8002432:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002434:	f107 031b 	add.w	r3, r7, #27
 8002438:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800243a:	f04f 33ff 	mov.w	r3, #4294967295
 800243e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d045      	beq.n	80024d2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d002      	beq.n	8002454 <osThreadNew+0x74>
        name = attr->name;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d002      	beq.n	8002462 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002464:	2b00      	cmp	r3, #0
 8002466:	d008      	beq.n	800247a <osThreadNew+0x9a>
 8002468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800246a:	2b38      	cmp	r3, #56	; 0x38
 800246c:	d805      	bhi.n	800247a <osThreadNew+0x9a>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <osThreadNew+0x9e>
        return (NULL);
 800247a:	2300      	movs	r3, #0
 800247c:	e054      	b.n	8002528 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	089b      	lsrs	r3, r3, #2
 800248c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00e      	beq.n	80024b4 <osThreadNew+0xd4>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	2b5b      	cmp	r3, #91	; 0x5b
 800249c:	d90a      	bls.n	80024b4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d006      	beq.n	80024b4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d002      	beq.n	80024b4 <osThreadNew+0xd4>
        mem = 1;
 80024ae:	2301      	movs	r3, #1
 80024b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80024b2:	e010      	b.n	80024d6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d10c      	bne.n	80024d6 <osThreadNew+0xf6>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d108      	bne.n	80024d6 <osThreadNew+0xf6>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d104      	bne.n	80024d6 <osThreadNew+0xf6>
          mem = 0;
 80024cc:	2300      	movs	r3, #0
 80024ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80024d0:	e001      	b.n	80024d6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80024d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d110      	bne.n	80024fe <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80024e4:	9202      	str	r2, [sp, #8]
 80024e6:	9301      	str	r3, [sp, #4]
 80024e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024f0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80024f2:	68f8      	ldr	r0, [r7, #12]
 80024f4:	f000 fe12 	bl	800311c <xTaskCreateStatic>
 80024f8:	4603      	mov	r3, r0
 80024fa:	617b      	str	r3, [r7, #20]
 80024fc:	e013      	b.n	8002526 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80024fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002500:	2b00      	cmp	r3, #0
 8002502:	d110      	bne.n	8002526 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002506:	b29a      	uxth	r2, r3
 8002508:	f107 0314 	add.w	r3, r7, #20
 800250c:	9301      	str	r3, [sp, #4]
 800250e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002510:	9300      	str	r3, [sp, #0]
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f000 fe5c 	bl	80031d4 <xTaskCreate>
 800251c:	4603      	mov	r3, r0
 800251e:	2b01      	cmp	r3, #1
 8002520:	d001      	beq.n	8002526 <osThreadNew+0x146>
          hTask = NULL;
 8002522:	2300      	movs	r3, #0
 8002524:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002526:	697b      	ldr	r3, [r7, #20]
}
 8002528:	4618      	mov	r0, r3
 800252a:	3738      	adds	r7, #56	; 0x38
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	200000a0 	.word	0x200000a0

08002534 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800253c:	f3ef 8305 	mrs	r3, IPSR
 8002540:	613b      	str	r3, [r7, #16]
  return(result);
 8002542:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002544:	2b00      	cmp	r3, #0
 8002546:	d10f      	bne.n	8002568 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002548:	f3ef 8310 	mrs	r3, PRIMASK
 800254c:	60fb      	str	r3, [r7, #12]
  return(result);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d109      	bne.n	8002568 <osDelay+0x34>
 8002554:	4b0d      	ldr	r3, [pc, #52]	; (800258c <osDelay+0x58>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2b02      	cmp	r3, #2
 800255a:	d109      	bne.n	8002570 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800255c:	f3ef 8311 	mrs	r3, BASEPRI
 8002560:	60bb      	str	r3, [r7, #8]
  return(result);
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <osDelay+0x3c>
    stat = osErrorISR;
 8002568:	f06f 0305 	mvn.w	r3, #5
 800256c:	617b      	str	r3, [r7, #20]
 800256e:	e007      	b.n	8002580 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002570:	2300      	movs	r3, #0
 8002572:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d002      	beq.n	8002580 <osDelay+0x4c>
      vTaskDelay(ticks);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 ff66 	bl	800344c <vTaskDelay>
    }
  }

  return (stat);
 8002580:	697b      	ldr	r3, [r7, #20]
}
 8002582:	4618      	mov	r0, r3
 8002584:	3718      	adds	r7, #24
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	200000a0 	.word	0x200000a0

08002590 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	4a06      	ldr	r2, [pc, #24]	; (80025b8 <vApplicationGetIdleTaskMemory+0x28>)
 80025a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	4a05      	ldr	r2, [pc, #20]	; (80025bc <vApplicationGetIdleTaskMemory+0x2c>)
 80025a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2280      	movs	r2, #128	; 0x80
 80025ac:	601a      	str	r2, [r3, #0]
}
 80025ae:	bf00      	nop
 80025b0:	3714      	adds	r7, #20
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bc80      	pop	{r7}
 80025b6:	4770      	bx	lr
 80025b8:	200000a4 	.word	0x200000a4
 80025bc:	20000100 	.word	0x20000100

080025c0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	4a07      	ldr	r2, [pc, #28]	; (80025ec <vApplicationGetTimerTaskMemory+0x2c>)
 80025d0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	4a06      	ldr	r2, [pc, #24]	; (80025f0 <vApplicationGetTimerTaskMemory+0x30>)
 80025d6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025de:	601a      	str	r2, [r3, #0]
}
 80025e0:	bf00      	nop
 80025e2:	3714      	adds	r7, #20
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bc80      	pop	{r7}
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	20000300 	.word	0x20000300
 80025f0:	2000035c 	.word	0x2000035c

080025f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f103 0208 	add.w	r2, r3, #8
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f04f 32ff 	mov.w	r2, #4294967295
 800260c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f103 0208 	add.w	r2, r3, #8
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f103 0208 	add.w	r2, r3, #8
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	bc80      	pop	{r7}
 8002630:	4770      	bx	lr

08002632 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002632:	b480      	push	{r7}
 8002634:	b083      	sub	sp, #12
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr

0800264a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800264a:	b480      	push	{r7}
 800264c:	b085      	sub	sp, #20
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
 8002652:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	1c5a      	adds	r2, r3, #1
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	601a      	str	r2, [r3, #0]
}
 8002686:	bf00      	nop
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	bc80      	pop	{r7}
 800268e:	4770      	bx	lr

08002690 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a6:	d103      	bne.n	80026b0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	60fb      	str	r3, [r7, #12]
 80026ae:	e00c      	b.n	80026ca <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3308      	adds	r3, #8
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	e002      	b.n	80026be <vListInsert+0x2e>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	60fb      	str	r3, [r7, #12]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68ba      	ldr	r2, [r7, #8]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d2f6      	bcs.n	80026b8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	1c5a      	adds	r2, r3, #1
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	601a      	str	r2, [r3, #0]
}
 80026f6:	bf00      	nop
 80026f8:	3714      	adds	r7, #20
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bc80      	pop	{r7}
 80026fe:	4770      	bx	lr

08002700 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	6892      	ldr	r2, [r2, #8]
 8002716:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	6852      	ldr	r2, [r2, #4]
 8002720:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	429a      	cmp	r2, r3
 800272a:	d103      	bne.n	8002734 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689a      	ldr	r2, [r3, #8]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	1e5a      	subs	r2, r3, #1
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
}
 8002748:	4618      	mov	r0, r3
 800274a:	3714      	adds	r7, #20
 800274c:	46bd      	mov	sp, r7
 800274e:	bc80      	pop	{r7}
 8002750:	4770      	bx	lr
	...

08002754 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10a      	bne.n	800277e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800276c:	f383 8811 	msr	BASEPRI, r3
 8002770:	f3bf 8f6f 	isb	sy
 8002774:	f3bf 8f4f 	dsb	sy
 8002778:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800277a:	bf00      	nop
 800277c:	e7fe      	b.n	800277c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800277e:	f001 ffc5 	bl	800470c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800278a:	68f9      	ldr	r1, [r7, #12]
 800278c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800278e:	fb01 f303 	mul.w	r3, r1, r3
 8002792:	441a      	add	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ae:	3b01      	subs	r3, #1
 80027b0:	68f9      	ldr	r1, [r7, #12]
 80027b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80027b4:	fb01 f303 	mul.w	r3, r1, r3
 80027b8:	441a      	add	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	22ff      	movs	r2, #255	; 0xff
 80027c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	22ff      	movs	r2, #255	; 0xff
 80027ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d114      	bne.n	80027fe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d01a      	beq.n	8002812 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	3310      	adds	r3, #16
 80027e0:	4618      	mov	r0, r3
 80027e2:	f001 f8f1 	bl	80039c8 <xTaskRemoveFromEventList>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d012      	beq.n	8002812 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80027ec:	4b0c      	ldr	r3, [pc, #48]	; (8002820 <xQueueGenericReset+0xcc>)
 80027ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	f3bf 8f4f 	dsb	sy
 80027f8:	f3bf 8f6f 	isb	sy
 80027fc:	e009      	b.n	8002812 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	3310      	adds	r3, #16
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff fef6 	bl	80025f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	3324      	adds	r3, #36	; 0x24
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff fef1 	bl	80025f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002812:	f001 ffab 	bl	800476c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002816:	2301      	movs	r3, #1
}
 8002818:	4618      	mov	r0, r3
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	e000ed04 	.word	0xe000ed04

08002824 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002824:	b580      	push	{r7, lr}
 8002826:	b08e      	sub	sp, #56	; 0x38
 8002828:	af02      	add	r7, sp, #8
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
 8002830:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d10a      	bne.n	800284e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800283c:	f383 8811 	msr	BASEPRI, r3
 8002840:	f3bf 8f6f 	isb	sy
 8002844:	f3bf 8f4f 	dsb	sy
 8002848:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800284a:	bf00      	nop
 800284c:	e7fe      	b.n	800284c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d10a      	bne.n	800286a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002858:	f383 8811 	msr	BASEPRI, r3
 800285c:	f3bf 8f6f 	isb	sy
 8002860:	f3bf 8f4f 	dsb	sy
 8002864:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002866:	bf00      	nop
 8002868:	e7fe      	b.n	8002868 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d002      	beq.n	8002876 <xQueueGenericCreateStatic+0x52>
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <xQueueGenericCreateStatic+0x56>
 8002876:	2301      	movs	r3, #1
 8002878:	e000      	b.n	800287c <xQueueGenericCreateStatic+0x58>
 800287a:	2300      	movs	r3, #0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d10a      	bne.n	8002896 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002884:	f383 8811 	msr	BASEPRI, r3
 8002888:	f3bf 8f6f 	isb	sy
 800288c:	f3bf 8f4f 	dsb	sy
 8002890:	623b      	str	r3, [r7, #32]
}
 8002892:	bf00      	nop
 8002894:	e7fe      	b.n	8002894 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d102      	bne.n	80028a2 <xQueueGenericCreateStatic+0x7e>
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <xQueueGenericCreateStatic+0x82>
 80028a2:	2301      	movs	r3, #1
 80028a4:	e000      	b.n	80028a8 <xQueueGenericCreateStatic+0x84>
 80028a6:	2300      	movs	r3, #0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10a      	bne.n	80028c2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80028ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b0:	f383 8811 	msr	BASEPRI, r3
 80028b4:	f3bf 8f6f 	isb	sy
 80028b8:	f3bf 8f4f 	dsb	sy
 80028bc:	61fb      	str	r3, [r7, #28]
}
 80028be:	bf00      	nop
 80028c0:	e7fe      	b.n	80028c0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80028c2:	2350      	movs	r3, #80	; 0x50
 80028c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	2b50      	cmp	r3, #80	; 0x50
 80028ca:	d00a      	beq.n	80028e2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80028cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d0:	f383 8811 	msr	BASEPRI, r3
 80028d4:	f3bf 8f6f 	isb	sy
 80028d8:	f3bf 8f4f 	dsb	sy
 80028dc:	61bb      	str	r3, [r7, #24]
}
 80028de:	bf00      	nop
 80028e0:	e7fe      	b.n	80028e0 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80028e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00d      	beq.n	8002908 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80028ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80028f4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80028f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	4613      	mov	r3, r2
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	68b9      	ldr	r1, [r7, #8]
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f000 f805 	bl	8002912 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800290a:	4618      	mov	r0, r3
 800290c:	3730      	adds	r7, #48	; 0x30
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b084      	sub	sp, #16
 8002916:	af00      	add	r7, sp, #0
 8002918:	60f8      	str	r0, [r7, #12]
 800291a:	60b9      	str	r1, [r7, #8]
 800291c:	607a      	str	r2, [r7, #4]
 800291e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d103      	bne.n	800292e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	e002      	b.n	8002934 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	68ba      	ldr	r2, [r7, #8]
 800293e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002940:	2101      	movs	r1, #1
 8002942:	69b8      	ldr	r0, [r7, #24]
 8002944:	f7ff ff06 	bl	8002754 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	78fa      	ldrb	r2, [r7, #3]
 800294c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002950:	bf00      	nop
 8002952:	3710      	adds	r7, #16
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b08e      	sub	sp, #56	; 0x38
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
 8002964:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002966:	2300      	movs	r3, #0
 8002968:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800296e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002970:	2b00      	cmp	r3, #0
 8002972:	d10a      	bne.n	800298a <xQueueGenericSend+0x32>
	__asm volatile
 8002974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002978:	f383 8811 	msr	BASEPRI, r3
 800297c:	f3bf 8f6f 	isb	sy
 8002980:	f3bf 8f4f 	dsb	sy
 8002984:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002986:	bf00      	nop
 8002988:	e7fe      	b.n	8002988 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d103      	bne.n	8002998 <xQueueGenericSend+0x40>
 8002990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002994:	2b00      	cmp	r3, #0
 8002996:	d101      	bne.n	800299c <xQueueGenericSend+0x44>
 8002998:	2301      	movs	r3, #1
 800299a:	e000      	b.n	800299e <xQueueGenericSend+0x46>
 800299c:	2300      	movs	r3, #0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10a      	bne.n	80029b8 <xQueueGenericSend+0x60>
	__asm volatile
 80029a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a6:	f383 8811 	msr	BASEPRI, r3
 80029aa:	f3bf 8f6f 	isb	sy
 80029ae:	f3bf 8f4f 	dsb	sy
 80029b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80029b4:	bf00      	nop
 80029b6:	e7fe      	b.n	80029b6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d103      	bne.n	80029c6 <xQueueGenericSend+0x6e>
 80029be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d101      	bne.n	80029ca <xQueueGenericSend+0x72>
 80029c6:	2301      	movs	r3, #1
 80029c8:	e000      	b.n	80029cc <xQueueGenericSend+0x74>
 80029ca:	2300      	movs	r3, #0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d10a      	bne.n	80029e6 <xQueueGenericSend+0x8e>
	__asm volatile
 80029d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d4:	f383 8811 	msr	BASEPRI, r3
 80029d8:	f3bf 8f6f 	isb	sy
 80029dc:	f3bf 8f4f 	dsb	sy
 80029e0:	623b      	str	r3, [r7, #32]
}
 80029e2:	bf00      	nop
 80029e4:	e7fe      	b.n	80029e4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80029e6:	f001 f9b1 	bl	8003d4c <xTaskGetSchedulerState>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d102      	bne.n	80029f6 <xQueueGenericSend+0x9e>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <xQueueGenericSend+0xa2>
 80029f6:	2301      	movs	r3, #1
 80029f8:	e000      	b.n	80029fc <xQueueGenericSend+0xa4>
 80029fa:	2300      	movs	r3, #0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10a      	bne.n	8002a16 <xQueueGenericSend+0xbe>
	__asm volatile
 8002a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a04:	f383 8811 	msr	BASEPRI, r3
 8002a08:	f3bf 8f6f 	isb	sy
 8002a0c:	f3bf 8f4f 	dsb	sy
 8002a10:	61fb      	str	r3, [r7, #28]
}
 8002a12:	bf00      	nop
 8002a14:	e7fe      	b.n	8002a14 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002a16:	f001 fe79 	bl	800470c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d302      	bcc.n	8002a2c <xQueueGenericSend+0xd4>
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d129      	bne.n	8002a80 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	68b9      	ldr	r1, [r7, #8]
 8002a30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a32:	f000 fa07 	bl	8002e44 <prvCopyDataToQueue>
 8002a36:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d010      	beq.n	8002a62 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a42:	3324      	adds	r3, #36	; 0x24
 8002a44:	4618      	mov	r0, r3
 8002a46:	f000 ffbf 	bl	80039c8 <xTaskRemoveFromEventList>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d013      	beq.n	8002a78 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002a50:	4b3f      	ldr	r3, [pc, #252]	; (8002b50 <xQueueGenericSend+0x1f8>)
 8002a52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	f3bf 8f4f 	dsb	sy
 8002a5c:	f3bf 8f6f 	isb	sy
 8002a60:	e00a      	b.n	8002a78 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d007      	beq.n	8002a78 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002a68:	4b39      	ldr	r3, [pc, #228]	; (8002b50 <xQueueGenericSend+0x1f8>)
 8002a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	f3bf 8f4f 	dsb	sy
 8002a74:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002a78:	f001 fe78 	bl	800476c <vPortExitCritical>
				return pdPASS;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e063      	b.n	8002b48 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d103      	bne.n	8002a8e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002a86:	f001 fe71 	bl	800476c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	e05c      	b.n	8002b48 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d106      	bne.n	8002aa2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002a94:	f107 0314 	add.w	r3, r7, #20
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f000 fff9 	bl	8003a90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002aa2:	f001 fe63 	bl	800476c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002aa6:	f000 fd6b 	bl	8003580 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002aaa:	f001 fe2f 	bl	800470c <vPortEnterCritical>
 8002aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ab4:	b25b      	sxtb	r3, r3
 8002ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aba:	d103      	bne.n	8002ac4 <xQueueGenericSend+0x16c>
 8002abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002aca:	b25b      	sxtb	r3, r3
 8002acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad0:	d103      	bne.n	8002ada <xQueueGenericSend+0x182>
 8002ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ada:	f001 fe47 	bl	800476c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ade:	1d3a      	adds	r2, r7, #4
 8002ae0:	f107 0314 	add.w	r3, r7, #20
 8002ae4:	4611      	mov	r1, r2
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 ffe8 	bl	8003abc <xTaskCheckForTimeOut>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d124      	bne.n	8002b3c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002af2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002af4:	f000 fa9e 	bl	8003034 <prvIsQueueFull>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d018      	beq.n	8002b30 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b00:	3310      	adds	r3, #16
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	4611      	mov	r1, r2
 8002b06:	4618      	mov	r0, r3
 8002b08:	f000 ff0e 	bl	8003928 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002b0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b0e:	f000 fa29 	bl	8002f64 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002b12:	f000 fd43 	bl	800359c <xTaskResumeAll>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f47f af7c 	bne.w	8002a16 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002b1e:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <xQueueGenericSend+0x1f8>)
 8002b20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	f3bf 8f4f 	dsb	sy
 8002b2a:	f3bf 8f6f 	isb	sy
 8002b2e:	e772      	b.n	8002a16 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002b30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b32:	f000 fa17 	bl	8002f64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002b36:	f000 fd31 	bl	800359c <xTaskResumeAll>
 8002b3a:	e76c      	b.n	8002a16 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002b3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b3e:	f000 fa11 	bl	8002f64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002b42:	f000 fd2b 	bl	800359c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002b46:	2300      	movs	r3, #0
		}
	}
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3738      	adds	r7, #56	; 0x38
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	e000ed04 	.word	0xe000ed04

08002b54 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b08e      	sub	sp, #56	; 0x38
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
 8002b60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d10a      	bne.n	8002b82 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b70:	f383 8811 	msr	BASEPRI, r3
 8002b74:	f3bf 8f6f 	isb	sy
 8002b78:	f3bf 8f4f 	dsb	sy
 8002b7c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b7e:	bf00      	nop
 8002b80:	e7fe      	b.n	8002b80 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d103      	bne.n	8002b90 <xQueueGenericSendFromISR+0x3c>
 8002b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d101      	bne.n	8002b94 <xQueueGenericSendFromISR+0x40>
 8002b90:	2301      	movs	r3, #1
 8002b92:	e000      	b.n	8002b96 <xQueueGenericSendFromISR+0x42>
 8002b94:	2300      	movs	r3, #0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10a      	bne.n	8002bb0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b9e:	f383 8811 	msr	BASEPRI, r3
 8002ba2:	f3bf 8f6f 	isb	sy
 8002ba6:	f3bf 8f4f 	dsb	sy
 8002baa:	623b      	str	r3, [r7, #32]
}
 8002bac:	bf00      	nop
 8002bae:	e7fe      	b.n	8002bae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d103      	bne.n	8002bbe <xQueueGenericSendFromISR+0x6a>
 8002bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d101      	bne.n	8002bc2 <xQueueGenericSendFromISR+0x6e>
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e000      	b.n	8002bc4 <xQueueGenericSendFromISR+0x70>
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d10a      	bne.n	8002bde <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bcc:	f383 8811 	msr	BASEPRI, r3
 8002bd0:	f3bf 8f6f 	isb	sy
 8002bd4:	f3bf 8f4f 	dsb	sy
 8002bd8:	61fb      	str	r3, [r7, #28]
}
 8002bda:	bf00      	nop
 8002bdc:	e7fe      	b.n	8002bdc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002bde:	f001 fe57 	bl	8004890 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002be2:	f3ef 8211 	mrs	r2, BASEPRI
 8002be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bea:	f383 8811 	msr	BASEPRI, r3
 8002bee:	f3bf 8f6f 	isb	sy
 8002bf2:	f3bf 8f4f 	dsb	sy
 8002bf6:	61ba      	str	r2, [r7, #24]
 8002bf8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002bfa:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d302      	bcc.n	8002c10 <xQueueGenericSendFromISR+0xbc>
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d12c      	bne.n	8002c6a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c1a:	683a      	ldr	r2, [r7, #0]
 8002c1c:	68b9      	ldr	r1, [r7, #8]
 8002c1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c20:	f000 f910 	bl	8002e44 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002c24:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c2c:	d112      	bne.n	8002c54 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d016      	beq.n	8002c64 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c38:	3324      	adds	r3, #36	; 0x24
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f000 fec4 	bl	80039c8 <xTaskRemoveFromEventList>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00e      	beq.n	8002c64 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00b      	beq.n	8002c64 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	e007      	b.n	8002c64 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002c54:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002c58:	3301      	adds	r3, #1
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	b25a      	sxtb	r2, r3
 8002c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002c64:	2301      	movs	r3, #1
 8002c66:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002c68:	e001      	b.n	8002c6e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	637b      	str	r3, [r7, #52]	; 0x34
 8002c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c70:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002c78:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3738      	adds	r7, #56	; 0x38
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b08c      	sub	sp, #48	; 0x30
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002c90:	2300      	movs	r3, #0
 8002c92:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10a      	bne.n	8002cb4 <xQueueReceive+0x30>
	__asm volatile
 8002c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca2:	f383 8811 	msr	BASEPRI, r3
 8002ca6:	f3bf 8f6f 	isb	sy
 8002caa:	f3bf 8f4f 	dsb	sy
 8002cae:	623b      	str	r3, [r7, #32]
}
 8002cb0:	bf00      	nop
 8002cb2:	e7fe      	b.n	8002cb2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d103      	bne.n	8002cc2 <xQueueReceive+0x3e>
 8002cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <xQueueReceive+0x42>
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e000      	b.n	8002cc8 <xQueueReceive+0x44>
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10a      	bne.n	8002ce2 <xQueueReceive+0x5e>
	__asm volatile
 8002ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd0:	f383 8811 	msr	BASEPRI, r3
 8002cd4:	f3bf 8f6f 	isb	sy
 8002cd8:	f3bf 8f4f 	dsb	sy
 8002cdc:	61fb      	str	r3, [r7, #28]
}
 8002cde:	bf00      	nop
 8002ce0:	e7fe      	b.n	8002ce0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ce2:	f001 f833 	bl	8003d4c <xTaskGetSchedulerState>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d102      	bne.n	8002cf2 <xQueueReceive+0x6e>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <xQueueReceive+0x72>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <xQueueReceive+0x74>
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10a      	bne.n	8002d12 <xQueueReceive+0x8e>
	__asm volatile
 8002cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d00:	f383 8811 	msr	BASEPRI, r3
 8002d04:	f3bf 8f6f 	isb	sy
 8002d08:	f3bf 8f4f 	dsb	sy
 8002d0c:	61bb      	str	r3, [r7, #24]
}
 8002d0e:	bf00      	nop
 8002d10:	e7fe      	b.n	8002d10 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d12:	f001 fcfb 	bl	800470c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d01f      	beq.n	8002d62 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002d22:	68b9      	ldr	r1, [r7, #8]
 8002d24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d26:	f000 f8f7 	bl	8002f18 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2c:	1e5a      	subs	r2, r3, #1
 8002d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d30:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00f      	beq.n	8002d5a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3c:	3310      	adds	r3, #16
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f000 fe42 	bl	80039c8 <xTaskRemoveFromEventList>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d007      	beq.n	8002d5a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002d4a:	4b3d      	ldr	r3, [pc, #244]	; (8002e40 <xQueueReceive+0x1bc>)
 8002d4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	f3bf 8f4f 	dsb	sy
 8002d56:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002d5a:	f001 fd07 	bl	800476c <vPortExitCritical>
				return pdPASS;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e069      	b.n	8002e36 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d103      	bne.n	8002d70 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d68:	f001 fd00 	bl	800476c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	e062      	b.n	8002e36 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d106      	bne.n	8002d84 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d76:	f107 0310 	add.w	r3, r7, #16
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f000 fe88 	bl	8003a90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d80:	2301      	movs	r3, #1
 8002d82:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d84:	f001 fcf2 	bl	800476c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d88:	f000 fbfa 	bl	8003580 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d8c:	f001 fcbe 	bl	800470c <vPortEnterCritical>
 8002d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d96:	b25b      	sxtb	r3, r3
 8002d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d9c:	d103      	bne.n	8002da6 <xQueueReceive+0x122>
 8002d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002dac:	b25b      	sxtb	r3, r3
 8002dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db2:	d103      	bne.n	8002dbc <xQueueReceive+0x138>
 8002db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002dbc:	f001 fcd6 	bl	800476c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002dc0:	1d3a      	adds	r2, r7, #4
 8002dc2:	f107 0310 	add.w	r3, r7, #16
 8002dc6:	4611      	mov	r1, r2
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f000 fe77 	bl	8003abc <xTaskCheckForTimeOut>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d123      	bne.n	8002e1c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002dd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dd6:	f000 f917 	bl	8003008 <prvIsQueueEmpty>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d017      	beq.n	8002e10 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de2:	3324      	adds	r3, #36	; 0x24
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	4611      	mov	r1, r2
 8002de8:	4618      	mov	r0, r3
 8002dea:	f000 fd9d 	bl	8003928 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002dee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002df0:	f000 f8b8 	bl	8002f64 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002df4:	f000 fbd2 	bl	800359c <xTaskResumeAll>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d189      	bne.n	8002d12 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002dfe:	4b10      	ldr	r3, [pc, #64]	; (8002e40 <xQueueReceive+0x1bc>)
 8002e00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e04:	601a      	str	r2, [r3, #0]
 8002e06:	f3bf 8f4f 	dsb	sy
 8002e0a:	f3bf 8f6f 	isb	sy
 8002e0e:	e780      	b.n	8002d12 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002e10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e12:	f000 f8a7 	bl	8002f64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e16:	f000 fbc1 	bl	800359c <xTaskResumeAll>
 8002e1a:	e77a      	b.n	8002d12 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002e1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e1e:	f000 f8a1 	bl	8002f64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e22:	f000 fbbb 	bl	800359c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e28:	f000 f8ee 	bl	8003008 <prvIsQueueEmpty>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f43f af6f 	beq.w	8002d12 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002e34:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3730      	adds	r7, #48	; 0x30
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	e000ed04 	.word	0xe000ed04

08002e44 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002e50:	2300      	movs	r3, #0
 8002e52:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e58:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10d      	bne.n	8002e7e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d14d      	bne.n	8002f06 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f000 ff8a 	bl	8003d88 <xTaskPriorityDisinherit>
 8002e74:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	605a      	str	r2, [r3, #4]
 8002e7c:	e043      	b.n	8002f06 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d119      	bne.n	8002eb8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6898      	ldr	r0, [r3, #8]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	68b9      	ldr	r1, [r7, #8]
 8002e90:	f001 ff38 	bl	8004d04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9c:	441a      	add	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	689a      	ldr	r2, [r3, #8]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d32b      	bcc.n	8002f06 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	609a      	str	r2, [r3, #8]
 8002eb6:	e026      	b.n	8002f06 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	68d8      	ldr	r0, [r3, #12]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	68b9      	ldr	r1, [r7, #8]
 8002ec4:	f001 ff1e 	bl	8004d04 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	68da      	ldr	r2, [r3, #12]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed0:	425b      	negs	r3, r3
 8002ed2:	441a      	add	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	68da      	ldr	r2, [r3, #12]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d207      	bcs.n	8002ef4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	685a      	ldr	r2, [r3, #4]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eec:	425b      	negs	r3, r3
 8002eee:	441a      	add	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d105      	bne.n	8002f06 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d002      	beq.n	8002f06 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1c5a      	adds	r2, r3, #1
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002f0e:	697b      	ldr	r3, [r7, #20]
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3718      	adds	r7, #24
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d018      	beq.n	8002f5c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68da      	ldr	r2, [r3, #12]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	441a      	add	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68da      	ldr	r2, [r3, #12]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d303      	bcc.n	8002f4c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	68d9      	ldr	r1, [r3, #12]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f54:	461a      	mov	r2, r3
 8002f56:	6838      	ldr	r0, [r7, #0]
 8002f58:	f001 fed4 	bl	8004d04 <memcpy>
	}
}
 8002f5c:	bf00      	nop
 8002f5e:	3708      	adds	r7, #8
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002f6c:	f001 fbce 	bl	800470c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f76:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f78:	e011      	b.n	8002f9e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d012      	beq.n	8002fa8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	3324      	adds	r3, #36	; 0x24
 8002f86:	4618      	mov	r0, r3
 8002f88:	f000 fd1e 	bl	80039c8 <xTaskRemoveFromEventList>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002f92:	f000 fdf5 	bl	8003b80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002f96:	7bfb      	ldrb	r3, [r7, #15]
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	dce9      	bgt.n	8002f7a <prvUnlockQueue+0x16>
 8002fa6:	e000      	b.n	8002faa <prvUnlockQueue+0x46>
					break;
 8002fa8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	22ff      	movs	r2, #255	; 0xff
 8002fae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002fb2:	f001 fbdb 	bl	800476c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002fb6:	f001 fba9 	bl	800470c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fc0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002fc2:	e011      	b.n	8002fe8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d012      	beq.n	8002ff2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	3310      	adds	r3, #16
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f000 fcf9 	bl	80039c8 <xTaskRemoveFromEventList>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002fdc:	f000 fdd0 	bl	8003b80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002fe0:	7bbb      	ldrb	r3, [r7, #14]
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002fe8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	dce9      	bgt.n	8002fc4 <prvUnlockQueue+0x60>
 8002ff0:	e000      	b.n	8002ff4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002ff2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	22ff      	movs	r2, #255	; 0xff
 8002ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002ffc:	f001 fbb6 	bl	800476c <vPortExitCritical>
}
 8003000:	bf00      	nop
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003010:	f001 fb7c 	bl	800470c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003018:	2b00      	cmp	r3, #0
 800301a:	d102      	bne.n	8003022 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800301c:	2301      	movs	r3, #1
 800301e:	60fb      	str	r3, [r7, #12]
 8003020:	e001      	b.n	8003026 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003022:	2300      	movs	r3, #0
 8003024:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003026:	f001 fba1 	bl	800476c <vPortExitCritical>

	return xReturn;
 800302a:	68fb      	ldr	r3, [r7, #12]
}
 800302c:	4618      	mov	r0, r3
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800303c:	f001 fb66 	bl	800470c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003048:	429a      	cmp	r2, r3
 800304a:	d102      	bne.n	8003052 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800304c:	2301      	movs	r3, #1
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	e001      	b.n	8003056 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003052:	2300      	movs	r3, #0
 8003054:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003056:	f001 fb89 	bl	800476c <vPortExitCritical>

	return xReturn;
 800305a:	68fb      	ldr	r3, [r7, #12]
}
 800305c:	4618      	mov	r0, r3
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003064:	b480      	push	{r7}
 8003066:	b085      	sub	sp, #20
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800306e:	2300      	movs	r3, #0
 8003070:	60fb      	str	r3, [r7, #12]
 8003072:	e014      	b.n	800309e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003074:	4a0e      	ldr	r2, [pc, #56]	; (80030b0 <vQueueAddToRegistry+0x4c>)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10b      	bne.n	8003098 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003080:	490b      	ldr	r1, [pc, #44]	; (80030b0 <vQueueAddToRegistry+0x4c>)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800308a:	4a09      	ldr	r2, [pc, #36]	; (80030b0 <vQueueAddToRegistry+0x4c>)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	4413      	add	r3, r2
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003096:	e006      	b.n	80030a6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	3301      	adds	r3, #1
 800309c:	60fb      	str	r3, [r7, #12]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2b07      	cmp	r3, #7
 80030a2:	d9e7      	bls.n	8003074 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80030a4:	bf00      	nop
 80030a6:	bf00      	nop
 80030a8:	3714      	adds	r7, #20
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bc80      	pop	{r7}
 80030ae:	4770      	bx	lr
 80030b0:	2000075c 	.word	0x2000075c

080030b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80030c4:	f001 fb22 	bl	800470c <vPortEnterCritical>
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030ce:	b25b      	sxtb	r3, r3
 80030d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d4:	d103      	bne.n	80030de <vQueueWaitForMessageRestricted+0x2a>
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030e4:	b25b      	sxtb	r3, r3
 80030e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ea:	d103      	bne.n	80030f4 <vQueueWaitForMessageRestricted+0x40>
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030f4:	f001 fb3a 	bl	800476c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d106      	bne.n	800310e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	3324      	adds	r3, #36	; 0x24
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	68b9      	ldr	r1, [r7, #8]
 8003108:	4618      	mov	r0, r3
 800310a:	f000 fc31 	bl	8003970 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800310e:	6978      	ldr	r0, [r7, #20]
 8003110:	f7ff ff28 	bl	8002f64 <prvUnlockQueue>
	}
 8003114:	bf00      	nop
 8003116:	3718      	adds	r7, #24
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800311c:	b580      	push	{r7, lr}
 800311e:	b08e      	sub	sp, #56	; 0x38
 8003120:	af04      	add	r7, sp, #16
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
 8003128:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800312a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800312c:	2b00      	cmp	r3, #0
 800312e:	d10a      	bne.n	8003146 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003134:	f383 8811 	msr	BASEPRI, r3
 8003138:	f3bf 8f6f 	isb	sy
 800313c:	f3bf 8f4f 	dsb	sy
 8003140:	623b      	str	r3, [r7, #32]
}
 8003142:	bf00      	nop
 8003144:	e7fe      	b.n	8003144 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10a      	bne.n	8003162 <xTaskCreateStatic+0x46>
	__asm volatile
 800314c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003150:	f383 8811 	msr	BASEPRI, r3
 8003154:	f3bf 8f6f 	isb	sy
 8003158:	f3bf 8f4f 	dsb	sy
 800315c:	61fb      	str	r3, [r7, #28]
}
 800315e:	bf00      	nop
 8003160:	e7fe      	b.n	8003160 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003162:	235c      	movs	r3, #92	; 0x5c
 8003164:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	2b5c      	cmp	r3, #92	; 0x5c
 800316a:	d00a      	beq.n	8003182 <xTaskCreateStatic+0x66>
	__asm volatile
 800316c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003170:	f383 8811 	msr	BASEPRI, r3
 8003174:	f3bf 8f6f 	isb	sy
 8003178:	f3bf 8f4f 	dsb	sy
 800317c:	61bb      	str	r3, [r7, #24]
}
 800317e:	bf00      	nop
 8003180:	e7fe      	b.n	8003180 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003184:	2b00      	cmp	r3, #0
 8003186:	d01e      	beq.n	80031c6 <xTaskCreateStatic+0xaa>
 8003188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800318a:	2b00      	cmp	r3, #0
 800318c:	d01b      	beq.n	80031c6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800318e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003190:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003194:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003196:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319a:	2202      	movs	r2, #2
 800319c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80031a0:	2300      	movs	r3, #0
 80031a2:	9303      	str	r3, [sp, #12]
 80031a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a6:	9302      	str	r3, [sp, #8]
 80031a8:	f107 0314 	add.w	r3, r7, #20
 80031ac:	9301      	str	r3, [sp, #4]
 80031ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b0:	9300      	str	r3, [sp, #0]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	68b9      	ldr	r1, [r7, #8]
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f000 f850 	bl	800325e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80031be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80031c0:	f000 f8d4 	bl	800336c <prvAddNewTaskToReadyList>
 80031c4:	e001      	b.n	80031ca <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80031c6:	2300      	movs	r3, #0
 80031c8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80031ca:	697b      	ldr	r3, [r7, #20]
	}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3728      	adds	r7, #40	; 0x28
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b08c      	sub	sp, #48	; 0x30
 80031d8:	af04      	add	r7, sp, #16
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	603b      	str	r3, [r7, #0]
 80031e0:	4613      	mov	r3, r2
 80031e2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031e4:	88fb      	ldrh	r3, [r7, #6]
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4618      	mov	r0, r3
 80031ea:	f001 fb8f 	bl	800490c <pvPortMalloc>
 80031ee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00e      	beq.n	8003214 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80031f6:	205c      	movs	r0, #92	; 0x5c
 80031f8:	f001 fb88 	bl	800490c <pvPortMalloc>
 80031fc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d003      	beq.n	800320c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	631a      	str	r2, [r3, #48]	; 0x30
 800320a:	e005      	b.n	8003218 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800320c:	6978      	ldr	r0, [r7, #20]
 800320e:	f001 fc41 	bl	8004a94 <vPortFree>
 8003212:	e001      	b.n	8003218 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003214:	2300      	movs	r3, #0
 8003216:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d017      	beq.n	800324e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003226:	88fa      	ldrh	r2, [r7, #6]
 8003228:	2300      	movs	r3, #0
 800322a:	9303      	str	r3, [sp, #12]
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	9302      	str	r3, [sp, #8]
 8003230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003232:	9301      	str	r3, [sp, #4]
 8003234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003236:	9300      	str	r3, [sp, #0]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	68b9      	ldr	r1, [r7, #8]
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f000 f80e 	bl	800325e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003242:	69f8      	ldr	r0, [r7, #28]
 8003244:	f000 f892 	bl	800336c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003248:	2301      	movs	r3, #1
 800324a:	61bb      	str	r3, [r7, #24]
 800324c:	e002      	b.n	8003254 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800324e:	f04f 33ff 	mov.w	r3, #4294967295
 8003252:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003254:	69bb      	ldr	r3, [r7, #24]
	}
 8003256:	4618      	mov	r0, r3
 8003258:	3720      	adds	r7, #32
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b088      	sub	sp, #32
 8003262:	af00      	add	r7, sp, #0
 8003264:	60f8      	str	r0, [r7, #12]
 8003266:	60b9      	str	r1, [r7, #8]
 8003268:	607a      	str	r2, [r7, #4]
 800326a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800326c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	461a      	mov	r2, r3
 8003276:	21a5      	movs	r1, #165	; 0xa5
 8003278:	f001 fd52 	bl	8004d20 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800327c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800327e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003286:	3b01      	subs	r3, #1
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4413      	add	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	f023 0307 	bic.w	r3, r3, #7
 8003294:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	2b00      	cmp	r3, #0
 800329e:	d00a      	beq.n	80032b6 <prvInitialiseNewTask+0x58>
	__asm volatile
 80032a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a4:	f383 8811 	msr	BASEPRI, r3
 80032a8:	f3bf 8f6f 	isb	sy
 80032ac:	f3bf 8f4f 	dsb	sy
 80032b0:	617b      	str	r3, [r7, #20]
}
 80032b2:	bf00      	nop
 80032b4:	e7fe      	b.n	80032b4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80032b6:	2300      	movs	r3, #0
 80032b8:	61fb      	str	r3, [r7, #28]
 80032ba:	e012      	b.n	80032e2 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80032bc:	68ba      	ldr	r2, [r7, #8]
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	4413      	add	r3, r2
 80032c2:	7819      	ldrb	r1, [r3, #0]
 80032c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	4413      	add	r3, r2
 80032ca:	3334      	adds	r3, #52	; 0x34
 80032cc:	460a      	mov	r2, r1
 80032ce:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80032d0:	68ba      	ldr	r2, [r7, #8]
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	4413      	add	r3, r2
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d006      	beq.n	80032ea <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	3301      	adds	r3, #1
 80032e0:	61fb      	str	r3, [r7, #28]
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	2b0f      	cmp	r3, #15
 80032e6:	d9e9      	bls.n	80032bc <prvInitialiseNewTask+0x5e>
 80032e8:	e000      	b.n	80032ec <prvInitialiseNewTask+0x8e>
		{
			break;
 80032ea:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80032ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80032f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f6:	2b37      	cmp	r3, #55	; 0x37
 80032f8:	d901      	bls.n	80032fe <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80032fa:	2337      	movs	r3, #55	; 0x37
 80032fc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80032fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003300:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003302:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003308:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800330a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800330c:	2200      	movs	r2, #0
 800330e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003312:	3304      	adds	r3, #4
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff f98c 	bl	8002632 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800331a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331c:	3318      	adds	r3, #24
 800331e:	4618      	mov	r0, r3
 8003320:	f7ff f987 	bl	8002632 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003326:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003328:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800332a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800332c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003332:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003336:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003338:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800333a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333c:	2200      	movs	r2, #0
 800333e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003342:	2200      	movs	r2, #0
 8003344:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	68f9      	ldr	r1, [r7, #12]
 800334c:	69b8      	ldr	r0, [r7, #24]
 800334e:	f001 f8ef 	bl	8004530 <pxPortInitialiseStack>
 8003352:	4602      	mov	r2, r0
 8003354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003356:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800335a:	2b00      	cmp	r3, #0
 800335c:	d002      	beq.n	8003364 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800335e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003360:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003362:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003364:	bf00      	nop
 8003366:	3720      	adds	r7, #32
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003374:	f001 f9ca 	bl	800470c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003378:	4b2d      	ldr	r3, [pc, #180]	; (8003430 <prvAddNewTaskToReadyList+0xc4>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	3301      	adds	r3, #1
 800337e:	4a2c      	ldr	r2, [pc, #176]	; (8003430 <prvAddNewTaskToReadyList+0xc4>)
 8003380:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003382:	4b2c      	ldr	r3, [pc, #176]	; (8003434 <prvAddNewTaskToReadyList+0xc8>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d109      	bne.n	800339e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800338a:	4a2a      	ldr	r2, [pc, #168]	; (8003434 <prvAddNewTaskToReadyList+0xc8>)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003390:	4b27      	ldr	r3, [pc, #156]	; (8003430 <prvAddNewTaskToReadyList+0xc4>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d110      	bne.n	80033ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003398:	f000 fc16 	bl	8003bc8 <prvInitialiseTaskLists>
 800339c:	e00d      	b.n	80033ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800339e:	4b26      	ldr	r3, [pc, #152]	; (8003438 <prvAddNewTaskToReadyList+0xcc>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d109      	bne.n	80033ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80033a6:	4b23      	ldr	r3, [pc, #140]	; (8003434 <prvAddNewTaskToReadyList+0xc8>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d802      	bhi.n	80033ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80033b4:	4a1f      	ldr	r2, [pc, #124]	; (8003434 <prvAddNewTaskToReadyList+0xc8>)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80033ba:	4b20      	ldr	r3, [pc, #128]	; (800343c <prvAddNewTaskToReadyList+0xd0>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	3301      	adds	r3, #1
 80033c0:	4a1e      	ldr	r2, [pc, #120]	; (800343c <prvAddNewTaskToReadyList+0xd0>)
 80033c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80033c4:	4b1d      	ldr	r3, [pc, #116]	; (800343c <prvAddNewTaskToReadyList+0xd0>)
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d0:	4b1b      	ldr	r3, [pc, #108]	; (8003440 <prvAddNewTaskToReadyList+0xd4>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d903      	bls.n	80033e0 <prvAddNewTaskToReadyList+0x74>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033dc:	4a18      	ldr	r2, [pc, #96]	; (8003440 <prvAddNewTaskToReadyList+0xd4>)
 80033de:	6013      	str	r3, [r2, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e4:	4613      	mov	r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	4413      	add	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	4a15      	ldr	r2, [pc, #84]	; (8003444 <prvAddNewTaskToReadyList+0xd8>)
 80033ee:	441a      	add	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	3304      	adds	r3, #4
 80033f4:	4619      	mov	r1, r3
 80033f6:	4610      	mov	r0, r2
 80033f8:	f7ff f927 	bl	800264a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80033fc:	f001 f9b6 	bl	800476c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003400:	4b0d      	ldr	r3, [pc, #52]	; (8003438 <prvAddNewTaskToReadyList+0xcc>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00e      	beq.n	8003426 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003408:	4b0a      	ldr	r3, [pc, #40]	; (8003434 <prvAddNewTaskToReadyList+0xc8>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003412:	429a      	cmp	r2, r3
 8003414:	d207      	bcs.n	8003426 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003416:	4b0c      	ldr	r3, [pc, #48]	; (8003448 <prvAddNewTaskToReadyList+0xdc>)
 8003418:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	f3bf 8f4f 	dsb	sy
 8003422:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003426:	bf00      	nop
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	20000c70 	.word	0x20000c70
 8003434:	2000079c 	.word	0x2000079c
 8003438:	20000c7c 	.word	0x20000c7c
 800343c:	20000c8c 	.word	0x20000c8c
 8003440:	20000c78 	.word	0x20000c78
 8003444:	200007a0 	.word	0x200007a0
 8003448:	e000ed04 	.word	0xe000ed04

0800344c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003454:	2300      	movs	r3, #0
 8003456:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d017      	beq.n	800348e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800345e:	4b13      	ldr	r3, [pc, #76]	; (80034ac <vTaskDelay+0x60>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00a      	beq.n	800347c <vTaskDelay+0x30>
	__asm volatile
 8003466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800346a:	f383 8811 	msr	BASEPRI, r3
 800346e:	f3bf 8f6f 	isb	sy
 8003472:	f3bf 8f4f 	dsb	sy
 8003476:	60bb      	str	r3, [r7, #8]
}
 8003478:	bf00      	nop
 800347a:	e7fe      	b.n	800347a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800347c:	f000 f880 	bl	8003580 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003480:	2100      	movs	r1, #0
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 fcee 	bl	8003e64 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003488:	f000 f888 	bl	800359c <xTaskResumeAll>
 800348c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d107      	bne.n	80034a4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003494:	4b06      	ldr	r3, [pc, #24]	; (80034b0 <vTaskDelay+0x64>)
 8003496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	f3bf 8f4f 	dsb	sy
 80034a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80034a4:	bf00      	nop
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	20000c98 	.word	0x20000c98
 80034b0:	e000ed04 	.word	0xe000ed04

080034b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b08a      	sub	sp, #40	; 0x28
 80034b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80034ba:	2300      	movs	r3, #0
 80034bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80034be:	2300      	movs	r3, #0
 80034c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80034c2:	463a      	mov	r2, r7
 80034c4:	1d39      	adds	r1, r7, #4
 80034c6:	f107 0308 	add.w	r3, r7, #8
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7ff f860 	bl	8002590 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80034d0:	6839      	ldr	r1, [r7, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68ba      	ldr	r2, [r7, #8]
 80034d6:	9202      	str	r2, [sp, #8]
 80034d8:	9301      	str	r3, [sp, #4]
 80034da:	2300      	movs	r3, #0
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	2300      	movs	r3, #0
 80034e0:	460a      	mov	r2, r1
 80034e2:	4921      	ldr	r1, [pc, #132]	; (8003568 <vTaskStartScheduler+0xb4>)
 80034e4:	4821      	ldr	r0, [pc, #132]	; (800356c <vTaskStartScheduler+0xb8>)
 80034e6:	f7ff fe19 	bl	800311c <xTaskCreateStatic>
 80034ea:	4603      	mov	r3, r0
 80034ec:	4a20      	ldr	r2, [pc, #128]	; (8003570 <vTaskStartScheduler+0xbc>)
 80034ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80034f0:	4b1f      	ldr	r3, [pc, #124]	; (8003570 <vTaskStartScheduler+0xbc>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d002      	beq.n	80034fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80034f8:	2301      	movs	r3, #1
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	e001      	b.n	8003502 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80034fe:	2300      	movs	r3, #0
 8003500:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d102      	bne.n	800350e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003508:	f000 fd00 	bl	8003f0c <xTimerCreateTimerTask>
 800350c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d116      	bne.n	8003542 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003518:	f383 8811 	msr	BASEPRI, r3
 800351c:	f3bf 8f6f 	isb	sy
 8003520:	f3bf 8f4f 	dsb	sy
 8003524:	613b      	str	r3, [r7, #16]
}
 8003526:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003528:	4b12      	ldr	r3, [pc, #72]	; (8003574 <vTaskStartScheduler+0xc0>)
 800352a:	f04f 32ff 	mov.w	r2, #4294967295
 800352e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003530:	4b11      	ldr	r3, [pc, #68]	; (8003578 <vTaskStartScheduler+0xc4>)
 8003532:	2201      	movs	r2, #1
 8003534:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003536:	4b11      	ldr	r3, [pc, #68]	; (800357c <vTaskStartScheduler+0xc8>)
 8003538:	2200      	movs	r2, #0
 800353a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800353c:	f001 f874 	bl	8004628 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003540:	e00e      	b.n	8003560 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003548:	d10a      	bne.n	8003560 <vTaskStartScheduler+0xac>
	__asm volatile
 800354a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800354e:	f383 8811 	msr	BASEPRI, r3
 8003552:	f3bf 8f6f 	isb	sy
 8003556:	f3bf 8f4f 	dsb	sy
 800355a:	60fb      	str	r3, [r7, #12]
}
 800355c:	bf00      	nop
 800355e:	e7fe      	b.n	800355e <vTaskStartScheduler+0xaa>
}
 8003560:	bf00      	nop
 8003562:	3718      	adds	r7, #24
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	08004db8 	.word	0x08004db8
 800356c:	08003b99 	.word	0x08003b99
 8003570:	20000c94 	.word	0x20000c94
 8003574:	20000c90 	.word	0x20000c90
 8003578:	20000c7c 	.word	0x20000c7c
 800357c:	20000c74 	.word	0x20000c74

08003580 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003584:	4b04      	ldr	r3, [pc, #16]	; (8003598 <vTaskSuspendAll+0x18>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	3301      	adds	r3, #1
 800358a:	4a03      	ldr	r2, [pc, #12]	; (8003598 <vTaskSuspendAll+0x18>)
 800358c:	6013      	str	r3, [r2, #0]
}
 800358e:	bf00      	nop
 8003590:	46bd      	mov	sp, r7
 8003592:	bc80      	pop	{r7}
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	20000c98 	.word	0x20000c98

0800359c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80035a2:	2300      	movs	r3, #0
 80035a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80035a6:	2300      	movs	r3, #0
 80035a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80035aa:	4b42      	ldr	r3, [pc, #264]	; (80036b4 <xTaskResumeAll+0x118>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10a      	bne.n	80035c8 <xTaskResumeAll+0x2c>
	__asm volatile
 80035b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b6:	f383 8811 	msr	BASEPRI, r3
 80035ba:	f3bf 8f6f 	isb	sy
 80035be:	f3bf 8f4f 	dsb	sy
 80035c2:	603b      	str	r3, [r7, #0]
}
 80035c4:	bf00      	nop
 80035c6:	e7fe      	b.n	80035c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80035c8:	f001 f8a0 	bl	800470c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80035cc:	4b39      	ldr	r3, [pc, #228]	; (80036b4 <xTaskResumeAll+0x118>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	3b01      	subs	r3, #1
 80035d2:	4a38      	ldr	r2, [pc, #224]	; (80036b4 <xTaskResumeAll+0x118>)
 80035d4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035d6:	4b37      	ldr	r3, [pc, #220]	; (80036b4 <xTaskResumeAll+0x118>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d162      	bne.n	80036a4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80035de:	4b36      	ldr	r3, [pc, #216]	; (80036b8 <xTaskResumeAll+0x11c>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d05e      	beq.n	80036a4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035e6:	e02f      	b.n	8003648 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80035e8:	4b34      	ldr	r3, [pc, #208]	; (80036bc <xTaskResumeAll+0x120>)
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	3318      	adds	r3, #24
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7ff f883 	bl	8002700 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	3304      	adds	r3, #4
 80035fe:	4618      	mov	r0, r3
 8003600:	f7ff f87e 	bl	8002700 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003608:	4b2d      	ldr	r3, [pc, #180]	; (80036c0 <xTaskResumeAll+0x124>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	429a      	cmp	r2, r3
 800360e:	d903      	bls.n	8003618 <xTaskResumeAll+0x7c>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003614:	4a2a      	ldr	r2, [pc, #168]	; (80036c0 <xTaskResumeAll+0x124>)
 8003616:	6013      	str	r3, [r2, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800361c:	4613      	mov	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	4413      	add	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	4a27      	ldr	r2, [pc, #156]	; (80036c4 <xTaskResumeAll+0x128>)
 8003626:	441a      	add	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	3304      	adds	r3, #4
 800362c:	4619      	mov	r1, r3
 800362e:	4610      	mov	r0, r2
 8003630:	f7ff f80b 	bl	800264a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003638:	4b23      	ldr	r3, [pc, #140]	; (80036c8 <xTaskResumeAll+0x12c>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363e:	429a      	cmp	r2, r3
 8003640:	d302      	bcc.n	8003648 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003642:	4b22      	ldr	r3, [pc, #136]	; (80036cc <xTaskResumeAll+0x130>)
 8003644:	2201      	movs	r2, #1
 8003646:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003648:	4b1c      	ldr	r3, [pc, #112]	; (80036bc <xTaskResumeAll+0x120>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1cb      	bne.n	80035e8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003656:	f000 fb55 	bl	8003d04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800365a:	4b1d      	ldr	r3, [pc, #116]	; (80036d0 <xTaskResumeAll+0x134>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d010      	beq.n	8003688 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003666:	f000 f845 	bl	80036f4 <xTaskIncrementTick>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d002      	beq.n	8003676 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003670:	4b16      	ldr	r3, [pc, #88]	; (80036cc <xTaskResumeAll+0x130>)
 8003672:	2201      	movs	r2, #1
 8003674:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	3b01      	subs	r3, #1
 800367a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1f1      	bne.n	8003666 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003682:	4b13      	ldr	r3, [pc, #76]	; (80036d0 <xTaskResumeAll+0x134>)
 8003684:	2200      	movs	r2, #0
 8003686:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003688:	4b10      	ldr	r3, [pc, #64]	; (80036cc <xTaskResumeAll+0x130>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d009      	beq.n	80036a4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003690:	2301      	movs	r3, #1
 8003692:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003694:	4b0f      	ldr	r3, [pc, #60]	; (80036d4 <xTaskResumeAll+0x138>)
 8003696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	f3bf 8f4f 	dsb	sy
 80036a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80036a4:	f001 f862 	bl	800476c <vPortExitCritical>

	return xAlreadyYielded;
 80036a8:	68bb      	ldr	r3, [r7, #8]
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	20000c98 	.word	0x20000c98
 80036b8:	20000c70 	.word	0x20000c70
 80036bc:	20000c30 	.word	0x20000c30
 80036c0:	20000c78 	.word	0x20000c78
 80036c4:	200007a0 	.word	0x200007a0
 80036c8:	2000079c 	.word	0x2000079c
 80036cc:	20000c84 	.word	0x20000c84
 80036d0:	20000c80 	.word	0x20000c80
 80036d4:	e000ed04 	.word	0xe000ed04

080036d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80036de:	4b04      	ldr	r3, [pc, #16]	; (80036f0 <xTaskGetTickCount+0x18>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80036e4:	687b      	ldr	r3, [r7, #4]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bc80      	pop	{r7}
 80036ee:	4770      	bx	lr
 80036f0:	20000c74 	.word	0x20000c74

080036f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80036fa:	2300      	movs	r3, #0
 80036fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036fe:	4b51      	ldr	r3, [pc, #324]	; (8003844 <xTaskIncrementTick+0x150>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	f040 808e 	bne.w	8003824 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003708:	4b4f      	ldr	r3, [pc, #316]	; (8003848 <xTaskIncrementTick+0x154>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	3301      	adds	r3, #1
 800370e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003710:	4a4d      	ldr	r2, [pc, #308]	; (8003848 <xTaskIncrementTick+0x154>)
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d120      	bne.n	800375e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800371c:	4b4b      	ldr	r3, [pc, #300]	; (800384c <xTaskIncrementTick+0x158>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00a      	beq.n	800373c <xTaskIncrementTick+0x48>
	__asm volatile
 8003726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800372a:	f383 8811 	msr	BASEPRI, r3
 800372e:	f3bf 8f6f 	isb	sy
 8003732:	f3bf 8f4f 	dsb	sy
 8003736:	603b      	str	r3, [r7, #0]
}
 8003738:	bf00      	nop
 800373a:	e7fe      	b.n	800373a <xTaskIncrementTick+0x46>
 800373c:	4b43      	ldr	r3, [pc, #268]	; (800384c <xTaskIncrementTick+0x158>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	60fb      	str	r3, [r7, #12]
 8003742:	4b43      	ldr	r3, [pc, #268]	; (8003850 <xTaskIncrementTick+0x15c>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a41      	ldr	r2, [pc, #260]	; (800384c <xTaskIncrementTick+0x158>)
 8003748:	6013      	str	r3, [r2, #0]
 800374a:	4a41      	ldr	r2, [pc, #260]	; (8003850 <xTaskIncrementTick+0x15c>)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6013      	str	r3, [r2, #0]
 8003750:	4b40      	ldr	r3, [pc, #256]	; (8003854 <xTaskIncrementTick+0x160>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	3301      	adds	r3, #1
 8003756:	4a3f      	ldr	r2, [pc, #252]	; (8003854 <xTaskIncrementTick+0x160>)
 8003758:	6013      	str	r3, [r2, #0]
 800375a:	f000 fad3 	bl	8003d04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800375e:	4b3e      	ldr	r3, [pc, #248]	; (8003858 <xTaskIncrementTick+0x164>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	429a      	cmp	r2, r3
 8003766:	d34e      	bcc.n	8003806 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003768:	4b38      	ldr	r3, [pc, #224]	; (800384c <xTaskIncrementTick+0x158>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <xTaskIncrementTick+0x82>
 8003772:	2301      	movs	r3, #1
 8003774:	e000      	b.n	8003778 <xTaskIncrementTick+0x84>
 8003776:	2300      	movs	r3, #0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d004      	beq.n	8003786 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800377c:	4b36      	ldr	r3, [pc, #216]	; (8003858 <xTaskIncrementTick+0x164>)
 800377e:	f04f 32ff 	mov.w	r2, #4294967295
 8003782:	601a      	str	r2, [r3, #0]
					break;
 8003784:	e03f      	b.n	8003806 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003786:	4b31      	ldr	r3, [pc, #196]	; (800384c <xTaskIncrementTick+0x158>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	429a      	cmp	r2, r3
 800379c:	d203      	bcs.n	80037a6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800379e:	4a2e      	ldr	r2, [pc, #184]	; (8003858 <xTaskIncrementTick+0x164>)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6013      	str	r3, [r2, #0]
						break;
 80037a4:	e02f      	b.n	8003806 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	3304      	adds	r3, #4
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7fe ffa8 	bl	8002700 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d004      	beq.n	80037c2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	3318      	adds	r3, #24
 80037bc:	4618      	mov	r0, r3
 80037be:	f7fe ff9f 	bl	8002700 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037c6:	4b25      	ldr	r3, [pc, #148]	; (800385c <xTaskIncrementTick+0x168>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d903      	bls.n	80037d6 <xTaskIncrementTick+0xe2>
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d2:	4a22      	ldr	r2, [pc, #136]	; (800385c <xTaskIncrementTick+0x168>)
 80037d4:	6013      	str	r3, [r2, #0]
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037da:	4613      	mov	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	4413      	add	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	4a1f      	ldr	r2, [pc, #124]	; (8003860 <xTaskIncrementTick+0x16c>)
 80037e4:	441a      	add	r2, r3
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	3304      	adds	r3, #4
 80037ea:	4619      	mov	r1, r3
 80037ec:	4610      	mov	r0, r2
 80037ee:	f7fe ff2c 	bl	800264a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f6:	4b1b      	ldr	r3, [pc, #108]	; (8003864 <xTaskIncrementTick+0x170>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d3b3      	bcc.n	8003768 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003800:	2301      	movs	r3, #1
 8003802:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003804:	e7b0      	b.n	8003768 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003806:	4b17      	ldr	r3, [pc, #92]	; (8003864 <xTaskIncrementTick+0x170>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800380c:	4914      	ldr	r1, [pc, #80]	; (8003860 <xTaskIncrementTick+0x16c>)
 800380e:	4613      	mov	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	4413      	add	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	440b      	add	r3, r1
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d907      	bls.n	800382e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800381e:	2301      	movs	r3, #1
 8003820:	617b      	str	r3, [r7, #20]
 8003822:	e004      	b.n	800382e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003824:	4b10      	ldr	r3, [pc, #64]	; (8003868 <xTaskIncrementTick+0x174>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	3301      	adds	r3, #1
 800382a:	4a0f      	ldr	r2, [pc, #60]	; (8003868 <xTaskIncrementTick+0x174>)
 800382c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800382e:	4b0f      	ldr	r3, [pc, #60]	; (800386c <xTaskIncrementTick+0x178>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8003836:	2301      	movs	r3, #1
 8003838:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800383a:	697b      	ldr	r3, [r7, #20]
}
 800383c:	4618      	mov	r0, r3
 800383e:	3718      	adds	r7, #24
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	20000c98 	.word	0x20000c98
 8003848:	20000c74 	.word	0x20000c74
 800384c:	20000c28 	.word	0x20000c28
 8003850:	20000c2c 	.word	0x20000c2c
 8003854:	20000c88 	.word	0x20000c88
 8003858:	20000c90 	.word	0x20000c90
 800385c:	20000c78 	.word	0x20000c78
 8003860:	200007a0 	.word	0x200007a0
 8003864:	2000079c 	.word	0x2000079c
 8003868:	20000c80 	.word	0x20000c80
 800386c:	20000c84 	.word	0x20000c84

08003870 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003876:	4b27      	ldr	r3, [pc, #156]	; (8003914 <vTaskSwitchContext+0xa4>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d003      	beq.n	8003886 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800387e:	4b26      	ldr	r3, [pc, #152]	; (8003918 <vTaskSwitchContext+0xa8>)
 8003880:	2201      	movs	r2, #1
 8003882:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003884:	e041      	b.n	800390a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003886:	4b24      	ldr	r3, [pc, #144]	; (8003918 <vTaskSwitchContext+0xa8>)
 8003888:	2200      	movs	r2, #0
 800388a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800388c:	4b23      	ldr	r3, [pc, #140]	; (800391c <vTaskSwitchContext+0xac>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	60fb      	str	r3, [r7, #12]
 8003892:	e010      	b.n	80038b6 <vTaskSwitchContext+0x46>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10a      	bne.n	80038b0 <vTaskSwitchContext+0x40>
	__asm volatile
 800389a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800389e:	f383 8811 	msr	BASEPRI, r3
 80038a2:	f3bf 8f6f 	isb	sy
 80038a6:	f3bf 8f4f 	dsb	sy
 80038aa:	607b      	str	r3, [r7, #4]
}
 80038ac:	bf00      	nop
 80038ae:	e7fe      	b.n	80038ae <vTaskSwitchContext+0x3e>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	3b01      	subs	r3, #1
 80038b4:	60fb      	str	r3, [r7, #12]
 80038b6:	491a      	ldr	r1, [pc, #104]	; (8003920 <vTaskSwitchContext+0xb0>)
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	4613      	mov	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	4413      	add	r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	440b      	add	r3, r1
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d0e4      	beq.n	8003894 <vTaskSwitchContext+0x24>
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	4613      	mov	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4413      	add	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4a12      	ldr	r2, [pc, #72]	; (8003920 <vTaskSwitchContext+0xb0>)
 80038d6:	4413      	add	r3, r2
 80038d8:	60bb      	str	r3, [r7, #8]
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	605a      	str	r2, [r3, #4]
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	685a      	ldr	r2, [r3, #4]
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	3308      	adds	r3, #8
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d104      	bne.n	80038fa <vTaskSwitchContext+0x8a>
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	685a      	ldr	r2, [r3, #4]
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	605a      	str	r2, [r3, #4]
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	4a08      	ldr	r2, [pc, #32]	; (8003924 <vTaskSwitchContext+0xb4>)
 8003902:	6013      	str	r3, [r2, #0]
 8003904:	4a05      	ldr	r2, [pc, #20]	; (800391c <vTaskSwitchContext+0xac>)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6013      	str	r3, [r2, #0]
}
 800390a:	bf00      	nop
 800390c:	3714      	adds	r7, #20
 800390e:	46bd      	mov	sp, r7
 8003910:	bc80      	pop	{r7}
 8003912:	4770      	bx	lr
 8003914:	20000c98 	.word	0x20000c98
 8003918:	20000c84 	.word	0x20000c84
 800391c:	20000c78 	.word	0x20000c78
 8003920:	200007a0 	.word	0x200007a0
 8003924:	2000079c 	.word	0x2000079c

08003928 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10a      	bne.n	800394e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800393c:	f383 8811 	msr	BASEPRI, r3
 8003940:	f3bf 8f6f 	isb	sy
 8003944:	f3bf 8f4f 	dsb	sy
 8003948:	60fb      	str	r3, [r7, #12]
}
 800394a:	bf00      	nop
 800394c:	e7fe      	b.n	800394c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800394e:	4b07      	ldr	r3, [pc, #28]	; (800396c <vTaskPlaceOnEventList+0x44>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	3318      	adds	r3, #24
 8003954:	4619      	mov	r1, r3
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7fe fe9a 	bl	8002690 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800395c:	2101      	movs	r1, #1
 800395e:	6838      	ldr	r0, [r7, #0]
 8003960:	f000 fa80 	bl	8003e64 <prvAddCurrentTaskToDelayedList>
}
 8003964:	bf00      	nop
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	2000079c 	.word	0x2000079c

08003970 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10a      	bne.n	8003998 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003986:	f383 8811 	msr	BASEPRI, r3
 800398a:	f3bf 8f6f 	isb	sy
 800398e:	f3bf 8f4f 	dsb	sy
 8003992:	617b      	str	r3, [r7, #20]
}
 8003994:	bf00      	nop
 8003996:	e7fe      	b.n	8003996 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003998:	4b0a      	ldr	r3, [pc, #40]	; (80039c4 <vTaskPlaceOnEventListRestricted+0x54>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	3318      	adds	r3, #24
 800399e:	4619      	mov	r1, r3
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f7fe fe52 	bl	800264a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d002      	beq.n	80039b2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80039ac:	f04f 33ff 	mov.w	r3, #4294967295
 80039b0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80039b2:	6879      	ldr	r1, [r7, #4]
 80039b4:	68b8      	ldr	r0, [r7, #8]
 80039b6:	f000 fa55 	bl	8003e64 <prvAddCurrentTaskToDelayedList>
	}
 80039ba:	bf00      	nop
 80039bc:	3718      	adds	r7, #24
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	2000079c 	.word	0x2000079c

080039c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10a      	bne.n	80039f4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80039de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e2:	f383 8811 	msr	BASEPRI, r3
 80039e6:	f3bf 8f6f 	isb	sy
 80039ea:	f3bf 8f4f 	dsb	sy
 80039ee:	60fb      	str	r3, [r7, #12]
}
 80039f0:	bf00      	nop
 80039f2:	e7fe      	b.n	80039f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	3318      	adds	r3, #24
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7fe fe81 	bl	8002700 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039fe:	4b1e      	ldr	r3, [pc, #120]	; (8003a78 <xTaskRemoveFromEventList+0xb0>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d11d      	bne.n	8003a42 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	3304      	adds	r3, #4
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7fe fe78 	bl	8002700 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a14:	4b19      	ldr	r3, [pc, #100]	; (8003a7c <xTaskRemoveFromEventList+0xb4>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d903      	bls.n	8003a24 <xTaskRemoveFromEventList+0x5c>
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a20:	4a16      	ldr	r2, [pc, #88]	; (8003a7c <xTaskRemoveFromEventList+0xb4>)
 8003a22:	6013      	str	r3, [r2, #0]
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a28:	4613      	mov	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4413      	add	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4a13      	ldr	r2, [pc, #76]	; (8003a80 <xTaskRemoveFromEventList+0xb8>)
 8003a32:	441a      	add	r2, r3
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	3304      	adds	r3, #4
 8003a38:	4619      	mov	r1, r3
 8003a3a:	4610      	mov	r0, r2
 8003a3c:	f7fe fe05 	bl	800264a <vListInsertEnd>
 8003a40:	e005      	b.n	8003a4e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	3318      	adds	r3, #24
 8003a46:	4619      	mov	r1, r3
 8003a48:	480e      	ldr	r0, [pc, #56]	; (8003a84 <xTaskRemoveFromEventList+0xbc>)
 8003a4a:	f7fe fdfe 	bl	800264a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a52:	4b0d      	ldr	r3, [pc, #52]	; (8003a88 <xTaskRemoveFromEventList+0xc0>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d905      	bls.n	8003a68 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003a60:	4b0a      	ldr	r3, [pc, #40]	; (8003a8c <xTaskRemoveFromEventList+0xc4>)
 8003a62:	2201      	movs	r2, #1
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	e001      	b.n	8003a6c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003a6c:	697b      	ldr	r3, [r7, #20]
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3718      	adds	r7, #24
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	20000c98 	.word	0x20000c98
 8003a7c:	20000c78 	.word	0x20000c78
 8003a80:	200007a0 	.word	0x200007a0
 8003a84:	20000c30 	.word	0x20000c30
 8003a88:	2000079c 	.word	0x2000079c
 8003a8c:	20000c84 	.word	0x20000c84

08003a90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003a98:	4b06      	ldr	r3, [pc, #24]	; (8003ab4 <vTaskInternalSetTimeOutState+0x24>)
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003aa0:	4b05      	ldr	r3, [pc, #20]	; (8003ab8 <vTaskInternalSetTimeOutState+0x28>)
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	605a      	str	r2, [r3, #4]
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bc80      	pop	{r7}
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	20000c88 	.word	0x20000c88
 8003ab8:	20000c74 	.word	0x20000c74

08003abc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b088      	sub	sp, #32
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10a      	bne.n	8003ae2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad0:	f383 8811 	msr	BASEPRI, r3
 8003ad4:	f3bf 8f6f 	isb	sy
 8003ad8:	f3bf 8f4f 	dsb	sy
 8003adc:	613b      	str	r3, [r7, #16]
}
 8003ade:	bf00      	nop
 8003ae0:	e7fe      	b.n	8003ae0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d10a      	bne.n	8003afe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aec:	f383 8811 	msr	BASEPRI, r3
 8003af0:	f3bf 8f6f 	isb	sy
 8003af4:	f3bf 8f4f 	dsb	sy
 8003af8:	60fb      	str	r3, [r7, #12]
}
 8003afa:	bf00      	nop
 8003afc:	e7fe      	b.n	8003afc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003afe:	f000 fe05 	bl	800470c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003b02:	4b1d      	ldr	r3, [pc, #116]	; (8003b78 <xTaskCheckForTimeOut+0xbc>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b1a:	d102      	bne.n	8003b22 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	61fb      	str	r3, [r7, #28]
 8003b20:	e023      	b.n	8003b6a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	4b15      	ldr	r3, [pc, #84]	; (8003b7c <xTaskCheckForTimeOut+0xc0>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d007      	beq.n	8003b3e <xTaskCheckForTimeOut+0x82>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d302      	bcc.n	8003b3e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	61fb      	str	r3, [r7, #28]
 8003b3c:	e015      	b.n	8003b6a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d20b      	bcs.n	8003b60 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	1ad2      	subs	r2, r2, r3
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f7ff ff9b 	bl	8003a90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	61fb      	str	r3, [r7, #28]
 8003b5e:	e004      	b.n	8003b6a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	2200      	movs	r2, #0
 8003b64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003b66:	2301      	movs	r3, #1
 8003b68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003b6a:	f000 fdff 	bl	800476c <vPortExitCritical>

	return xReturn;
 8003b6e:	69fb      	ldr	r3, [r7, #28]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3720      	adds	r7, #32
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	20000c74 	.word	0x20000c74
 8003b7c:	20000c88 	.word	0x20000c88

08003b80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003b80:	b480      	push	{r7}
 8003b82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003b84:	4b03      	ldr	r3, [pc, #12]	; (8003b94 <vTaskMissedYield+0x14>)
 8003b86:	2201      	movs	r2, #1
 8003b88:	601a      	str	r2, [r3, #0]
}
 8003b8a:	bf00      	nop
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bc80      	pop	{r7}
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	20000c84 	.word	0x20000c84

08003b98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003ba0:	f000 f852 	bl	8003c48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003ba4:	4b06      	ldr	r3, [pc, #24]	; (8003bc0 <prvIdleTask+0x28>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d9f9      	bls.n	8003ba0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003bac:	4b05      	ldr	r3, [pc, #20]	; (8003bc4 <prvIdleTask+0x2c>)
 8003bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bb2:	601a      	str	r2, [r3, #0]
 8003bb4:	f3bf 8f4f 	dsb	sy
 8003bb8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003bbc:	e7f0      	b.n	8003ba0 <prvIdleTask+0x8>
 8003bbe:	bf00      	nop
 8003bc0:	200007a0 	.word	0x200007a0
 8003bc4:	e000ed04 	.word	0xe000ed04

08003bc8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bce:	2300      	movs	r3, #0
 8003bd0:	607b      	str	r3, [r7, #4]
 8003bd2:	e00c      	b.n	8003bee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	4413      	add	r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	4a12      	ldr	r2, [pc, #72]	; (8003c28 <prvInitialiseTaskLists+0x60>)
 8003be0:	4413      	add	r3, r2
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7fe fd06 	bl	80025f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	3301      	adds	r3, #1
 8003bec:	607b      	str	r3, [r7, #4]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2b37      	cmp	r3, #55	; 0x37
 8003bf2:	d9ef      	bls.n	8003bd4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003bf4:	480d      	ldr	r0, [pc, #52]	; (8003c2c <prvInitialiseTaskLists+0x64>)
 8003bf6:	f7fe fcfd 	bl	80025f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003bfa:	480d      	ldr	r0, [pc, #52]	; (8003c30 <prvInitialiseTaskLists+0x68>)
 8003bfc:	f7fe fcfa 	bl	80025f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003c00:	480c      	ldr	r0, [pc, #48]	; (8003c34 <prvInitialiseTaskLists+0x6c>)
 8003c02:	f7fe fcf7 	bl	80025f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003c06:	480c      	ldr	r0, [pc, #48]	; (8003c38 <prvInitialiseTaskLists+0x70>)
 8003c08:	f7fe fcf4 	bl	80025f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003c0c:	480b      	ldr	r0, [pc, #44]	; (8003c3c <prvInitialiseTaskLists+0x74>)
 8003c0e:	f7fe fcf1 	bl	80025f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003c12:	4b0b      	ldr	r3, [pc, #44]	; (8003c40 <prvInitialiseTaskLists+0x78>)
 8003c14:	4a05      	ldr	r2, [pc, #20]	; (8003c2c <prvInitialiseTaskLists+0x64>)
 8003c16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003c18:	4b0a      	ldr	r3, [pc, #40]	; (8003c44 <prvInitialiseTaskLists+0x7c>)
 8003c1a:	4a05      	ldr	r2, [pc, #20]	; (8003c30 <prvInitialiseTaskLists+0x68>)
 8003c1c:	601a      	str	r2, [r3, #0]
}
 8003c1e:	bf00      	nop
 8003c20:	3708      	adds	r7, #8
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	200007a0 	.word	0x200007a0
 8003c2c:	20000c00 	.word	0x20000c00
 8003c30:	20000c14 	.word	0x20000c14
 8003c34:	20000c30 	.word	0x20000c30
 8003c38:	20000c44 	.word	0x20000c44
 8003c3c:	20000c5c 	.word	0x20000c5c
 8003c40:	20000c28 	.word	0x20000c28
 8003c44:	20000c2c 	.word	0x20000c2c

08003c48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c4e:	e019      	b.n	8003c84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003c50:	f000 fd5c 	bl	800470c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003c54:	4b10      	ldr	r3, [pc, #64]	; (8003c98 <prvCheckTasksWaitingTermination+0x50>)
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	3304      	adds	r3, #4
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7fe fd4d 	bl	8002700 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003c66:	4b0d      	ldr	r3, [pc, #52]	; (8003c9c <prvCheckTasksWaitingTermination+0x54>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	4a0b      	ldr	r2, [pc, #44]	; (8003c9c <prvCheckTasksWaitingTermination+0x54>)
 8003c6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003c70:	4b0b      	ldr	r3, [pc, #44]	; (8003ca0 <prvCheckTasksWaitingTermination+0x58>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	3b01      	subs	r3, #1
 8003c76:	4a0a      	ldr	r2, [pc, #40]	; (8003ca0 <prvCheckTasksWaitingTermination+0x58>)
 8003c78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003c7a:	f000 fd77 	bl	800476c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f810 	bl	8003ca4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c84:	4b06      	ldr	r3, [pc, #24]	; (8003ca0 <prvCheckTasksWaitingTermination+0x58>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1e1      	bne.n	8003c50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003c8c:	bf00      	nop
 8003c8e:	bf00      	nop
 8003c90:	3708      	adds	r7, #8
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	20000c44 	.word	0x20000c44
 8003c9c:	20000c70 	.word	0x20000c70
 8003ca0:	20000c58 	.word	0x20000c58

08003ca4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d108      	bne.n	8003cc8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 feea 	bl	8004a94 <vPortFree>
				vPortFree( pxTCB );
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 fee7 	bl	8004a94 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003cc6:	e018      	b.n	8003cfa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d103      	bne.n	8003cda <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 fede 	bl	8004a94 <vPortFree>
	}
 8003cd8:	e00f      	b.n	8003cfa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d00a      	beq.n	8003cfa <prvDeleteTCB+0x56>
	__asm volatile
 8003ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce8:	f383 8811 	msr	BASEPRI, r3
 8003cec:	f3bf 8f6f 	isb	sy
 8003cf0:	f3bf 8f4f 	dsb	sy
 8003cf4:	60fb      	str	r3, [r7, #12]
}
 8003cf6:	bf00      	nop
 8003cf8:	e7fe      	b.n	8003cf8 <prvDeleteTCB+0x54>
	}
 8003cfa:	bf00      	nop
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
	...

08003d04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d0a:	4b0e      	ldr	r3, [pc, #56]	; (8003d44 <prvResetNextTaskUnblockTime+0x40>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d101      	bne.n	8003d18 <prvResetNextTaskUnblockTime+0x14>
 8003d14:	2301      	movs	r3, #1
 8003d16:	e000      	b.n	8003d1a <prvResetNextTaskUnblockTime+0x16>
 8003d18:	2300      	movs	r3, #0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d004      	beq.n	8003d28 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003d1e:	4b0a      	ldr	r3, [pc, #40]	; (8003d48 <prvResetNextTaskUnblockTime+0x44>)
 8003d20:	f04f 32ff 	mov.w	r2, #4294967295
 8003d24:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003d26:	e008      	b.n	8003d3a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003d28:	4b06      	ldr	r3, [pc, #24]	; (8003d44 <prvResetNextTaskUnblockTime+0x40>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	4a04      	ldr	r2, [pc, #16]	; (8003d48 <prvResetNextTaskUnblockTime+0x44>)
 8003d38:	6013      	str	r3, [r2, #0]
}
 8003d3a:	bf00      	nop
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bc80      	pop	{r7}
 8003d42:	4770      	bx	lr
 8003d44:	20000c28 	.word	0x20000c28
 8003d48:	20000c90 	.word	0x20000c90

08003d4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003d52:	4b0b      	ldr	r3, [pc, #44]	; (8003d80 <xTaskGetSchedulerState+0x34>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d102      	bne.n	8003d60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	607b      	str	r3, [r7, #4]
 8003d5e:	e008      	b.n	8003d72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d60:	4b08      	ldr	r3, [pc, #32]	; (8003d84 <xTaskGetSchedulerState+0x38>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d102      	bne.n	8003d6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003d68:	2302      	movs	r3, #2
 8003d6a:	607b      	str	r3, [r7, #4]
 8003d6c:	e001      	b.n	8003d72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003d72:	687b      	ldr	r3, [r7, #4]
	}
 8003d74:	4618      	mov	r0, r3
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bc80      	pop	{r7}
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	20000c7c 	.word	0x20000c7c
 8003d84:	20000c98 	.word	0x20000c98

08003d88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003d94:	2300      	movs	r3, #0
 8003d96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d056      	beq.n	8003e4c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003d9e:	4b2e      	ldr	r3, [pc, #184]	; (8003e58 <xTaskPriorityDisinherit+0xd0>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d00a      	beq.n	8003dbe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dac:	f383 8811 	msr	BASEPRI, r3
 8003db0:	f3bf 8f6f 	isb	sy
 8003db4:	f3bf 8f4f 	dsb	sy
 8003db8:	60fb      	str	r3, [r7, #12]
}
 8003dba:	bf00      	nop
 8003dbc:	e7fe      	b.n	8003dbc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10a      	bne.n	8003ddc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dca:	f383 8811 	msr	BASEPRI, r3
 8003dce:	f3bf 8f6f 	isb	sy
 8003dd2:	f3bf 8f4f 	dsb	sy
 8003dd6:	60bb      	str	r3, [r7, #8]
}
 8003dd8:	bf00      	nop
 8003dda:	e7fe      	b.n	8003dda <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003de0:	1e5a      	subs	r2, r3, #1
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d02c      	beq.n	8003e4c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d128      	bne.n	8003e4c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	3304      	adds	r3, #4
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fe fc7e 	bl	8002700 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e10:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e1c:	4b0f      	ldr	r3, [pc, #60]	; (8003e5c <xTaskPriorityDisinherit+0xd4>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d903      	bls.n	8003e2c <xTaskPriorityDisinherit+0xa4>
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e28:	4a0c      	ldr	r2, [pc, #48]	; (8003e5c <xTaskPriorityDisinherit+0xd4>)
 8003e2a:	6013      	str	r3, [r2, #0]
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e30:	4613      	mov	r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	4413      	add	r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	4a09      	ldr	r2, [pc, #36]	; (8003e60 <xTaskPriorityDisinherit+0xd8>)
 8003e3a:	441a      	add	r2, r3
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	3304      	adds	r3, #4
 8003e40:	4619      	mov	r1, r3
 8003e42:	4610      	mov	r0, r2
 8003e44:	f7fe fc01 	bl	800264a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003e4c:	697b      	ldr	r3, [r7, #20]
	}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3718      	adds	r7, #24
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	2000079c 	.word	0x2000079c
 8003e5c:	20000c78 	.word	0x20000c78
 8003e60:	200007a0 	.word	0x200007a0

08003e64 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003e6e:	4b21      	ldr	r3, [pc, #132]	; (8003ef4 <prvAddCurrentTaskToDelayedList+0x90>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e74:	4b20      	ldr	r3, [pc, #128]	; (8003ef8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	3304      	adds	r3, #4
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7fe fc40 	bl	8002700 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e86:	d10a      	bne.n	8003e9e <prvAddCurrentTaskToDelayedList+0x3a>
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d007      	beq.n	8003e9e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e8e:	4b1a      	ldr	r3, [pc, #104]	; (8003ef8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	3304      	adds	r3, #4
 8003e94:	4619      	mov	r1, r3
 8003e96:	4819      	ldr	r0, [pc, #100]	; (8003efc <prvAddCurrentTaskToDelayedList+0x98>)
 8003e98:	f7fe fbd7 	bl	800264a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003e9c:	e026      	b.n	8003eec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003ea6:	4b14      	ldr	r3, [pc, #80]	; (8003ef8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68ba      	ldr	r2, [r7, #8]
 8003eac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d209      	bcs.n	8003eca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003eb6:	4b12      	ldr	r3, [pc, #72]	; (8003f00 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	4b0f      	ldr	r3, [pc, #60]	; (8003ef8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	3304      	adds	r3, #4
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	4610      	mov	r0, r2
 8003ec4:	f7fe fbe4 	bl	8002690 <vListInsert>
}
 8003ec8:	e010      	b.n	8003eec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003eca:	4b0e      	ldr	r3, [pc, #56]	; (8003f04 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	4b0a      	ldr	r3, [pc, #40]	; (8003ef8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	3304      	adds	r3, #4
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	4610      	mov	r0, r2
 8003ed8:	f7fe fbda 	bl	8002690 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003edc:	4b0a      	ldr	r3, [pc, #40]	; (8003f08 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68ba      	ldr	r2, [r7, #8]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d202      	bcs.n	8003eec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003ee6:	4a08      	ldr	r2, [pc, #32]	; (8003f08 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	6013      	str	r3, [r2, #0]
}
 8003eec:	bf00      	nop
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	20000c74 	.word	0x20000c74
 8003ef8:	2000079c 	.word	0x2000079c
 8003efc:	20000c5c 	.word	0x20000c5c
 8003f00:	20000c2c 	.word	0x20000c2c
 8003f04:	20000c28 	.word	0x20000c28
 8003f08:	20000c90 	.word	0x20000c90

08003f0c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b08a      	sub	sp, #40	; 0x28
 8003f10:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003f12:	2300      	movs	r3, #0
 8003f14:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003f16:	f000 facb 	bl	80044b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003f1a:	4b1c      	ldr	r3, [pc, #112]	; (8003f8c <xTimerCreateTimerTask+0x80>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d021      	beq.n	8003f66 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003f22:	2300      	movs	r3, #0
 8003f24:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003f26:	2300      	movs	r3, #0
 8003f28:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003f2a:	1d3a      	adds	r2, r7, #4
 8003f2c:	f107 0108 	add.w	r1, r7, #8
 8003f30:	f107 030c 	add.w	r3, r7, #12
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7fe fb43 	bl	80025c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003f3a:	6879      	ldr	r1, [r7, #4]
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	9202      	str	r2, [sp, #8]
 8003f42:	9301      	str	r3, [sp, #4]
 8003f44:	2302      	movs	r3, #2
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	2300      	movs	r3, #0
 8003f4a:	460a      	mov	r2, r1
 8003f4c:	4910      	ldr	r1, [pc, #64]	; (8003f90 <xTimerCreateTimerTask+0x84>)
 8003f4e:	4811      	ldr	r0, [pc, #68]	; (8003f94 <xTimerCreateTimerTask+0x88>)
 8003f50:	f7ff f8e4 	bl	800311c <xTaskCreateStatic>
 8003f54:	4603      	mov	r3, r0
 8003f56:	4a10      	ldr	r2, [pc, #64]	; (8003f98 <xTimerCreateTimerTask+0x8c>)
 8003f58:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003f5a:	4b0f      	ldr	r3, [pc, #60]	; (8003f98 <xTimerCreateTimerTask+0x8c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003f62:	2301      	movs	r3, #1
 8003f64:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d10a      	bne.n	8003f82 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f70:	f383 8811 	msr	BASEPRI, r3
 8003f74:	f3bf 8f6f 	isb	sy
 8003f78:	f3bf 8f4f 	dsb	sy
 8003f7c:	613b      	str	r3, [r7, #16]
}
 8003f7e:	bf00      	nop
 8003f80:	e7fe      	b.n	8003f80 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003f82:	697b      	ldr	r3, [r7, #20]
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3718      	adds	r7, #24
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	20000ccc 	.word	0x20000ccc
 8003f90:	08004dc0 	.word	0x08004dc0
 8003f94:	080040b9 	.word	0x080040b9
 8003f98:	20000cd0 	.word	0x20000cd0

08003f9c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b08a      	sub	sp, #40	; 0x28
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
 8003fa8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003faa:	2300      	movs	r3, #0
 8003fac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d10a      	bne.n	8003fca <xTimerGenericCommand+0x2e>
	__asm volatile
 8003fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb8:	f383 8811 	msr	BASEPRI, r3
 8003fbc:	f3bf 8f6f 	isb	sy
 8003fc0:	f3bf 8f4f 	dsb	sy
 8003fc4:	623b      	str	r3, [r7, #32]
}
 8003fc6:	bf00      	nop
 8003fc8:	e7fe      	b.n	8003fc8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003fca:	4b1a      	ldr	r3, [pc, #104]	; (8004034 <xTimerGenericCommand+0x98>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d02a      	beq.n	8004028 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	2b05      	cmp	r3, #5
 8003fe2:	dc18      	bgt.n	8004016 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003fe4:	f7ff feb2 	bl	8003d4c <xTaskGetSchedulerState>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d109      	bne.n	8004002 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003fee:	4b11      	ldr	r3, [pc, #68]	; (8004034 <xTimerGenericCommand+0x98>)
 8003ff0:	6818      	ldr	r0, [r3, #0]
 8003ff2:	f107 0110 	add.w	r1, r7, #16
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ffa:	f7fe fcad 	bl	8002958 <xQueueGenericSend>
 8003ffe:	6278      	str	r0, [r7, #36]	; 0x24
 8004000:	e012      	b.n	8004028 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004002:	4b0c      	ldr	r3, [pc, #48]	; (8004034 <xTimerGenericCommand+0x98>)
 8004004:	6818      	ldr	r0, [r3, #0]
 8004006:	f107 0110 	add.w	r1, r7, #16
 800400a:	2300      	movs	r3, #0
 800400c:	2200      	movs	r2, #0
 800400e:	f7fe fca3 	bl	8002958 <xQueueGenericSend>
 8004012:	6278      	str	r0, [r7, #36]	; 0x24
 8004014:	e008      	b.n	8004028 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004016:	4b07      	ldr	r3, [pc, #28]	; (8004034 <xTimerGenericCommand+0x98>)
 8004018:	6818      	ldr	r0, [r3, #0]
 800401a:	f107 0110 	add.w	r1, r7, #16
 800401e:	2300      	movs	r3, #0
 8004020:	683a      	ldr	r2, [r7, #0]
 8004022:	f7fe fd97 	bl	8002b54 <xQueueGenericSendFromISR>
 8004026:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800402a:	4618      	mov	r0, r3
 800402c:	3728      	adds	r7, #40	; 0x28
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	20000ccc 	.word	0x20000ccc

08004038 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b088      	sub	sp, #32
 800403c:	af02      	add	r7, sp, #8
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004042:	4b1c      	ldr	r3, [pc, #112]	; (80040b4 <prvProcessExpiredTimer+0x7c>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	3304      	adds	r3, #4
 8004050:	4618      	mov	r0, r3
 8004052:	f7fe fb55 	bl	8002700 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	2b01      	cmp	r3, #1
 800405c:	d122      	bne.n	80040a4 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	699a      	ldr	r2, [r3, #24]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	18d1      	adds	r1, r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	683a      	ldr	r2, [r7, #0]
 800406a:	6978      	ldr	r0, [r7, #20]
 800406c:	f000 f8c8 	bl	8004200 <prvInsertTimerInActiveList>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d016      	beq.n	80040a4 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004076:	2300      	movs	r3, #0
 8004078:	9300      	str	r3, [sp, #0]
 800407a:	2300      	movs	r3, #0
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	2100      	movs	r1, #0
 8004080:	6978      	ldr	r0, [r7, #20]
 8004082:	f7ff ff8b 	bl	8003f9c <xTimerGenericCommand>
 8004086:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d10a      	bne.n	80040a4 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800408e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004092:	f383 8811 	msr	BASEPRI, r3
 8004096:	f3bf 8f6f 	isb	sy
 800409a:	f3bf 8f4f 	dsb	sy
 800409e:	60fb      	str	r3, [r7, #12]
}
 80040a0:	bf00      	nop
 80040a2:	e7fe      	b.n	80040a2 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a8:	6978      	ldr	r0, [r7, #20]
 80040aa:	4798      	blx	r3
}
 80040ac:	bf00      	nop
 80040ae:	3718      	adds	r7, #24
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	20000cc4 	.word	0x20000cc4

080040b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80040c0:	f107 0308 	add.w	r3, r7, #8
 80040c4:	4618      	mov	r0, r3
 80040c6:	f000 f857 	bl	8004178 <prvGetNextExpireTime>
 80040ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	4619      	mov	r1, r3
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f000 f803 	bl	80040dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80040d6:	f000 f8d5 	bl	8004284 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80040da:	e7f1      	b.n	80040c0 <prvTimerTask+0x8>

080040dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80040e6:	f7ff fa4b 	bl	8003580 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80040ea:	f107 0308 	add.w	r3, r7, #8
 80040ee:	4618      	mov	r0, r3
 80040f0:	f000 f866 	bl	80041c0 <prvSampleTimeNow>
 80040f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d130      	bne.n	800415e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d10a      	bne.n	8004118 <prvProcessTimerOrBlockTask+0x3c>
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	429a      	cmp	r2, r3
 8004108:	d806      	bhi.n	8004118 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800410a:	f7ff fa47 	bl	800359c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800410e:	68f9      	ldr	r1, [r7, #12]
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f7ff ff91 	bl	8004038 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004116:	e024      	b.n	8004162 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d008      	beq.n	8004130 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800411e:	4b13      	ldr	r3, [pc, #76]	; (800416c <prvProcessTimerOrBlockTask+0x90>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2b00      	cmp	r3, #0
 8004126:	bf0c      	ite	eq
 8004128:	2301      	moveq	r3, #1
 800412a:	2300      	movne	r3, #0
 800412c:	b2db      	uxtb	r3, r3
 800412e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004130:	4b0f      	ldr	r3, [pc, #60]	; (8004170 <prvProcessTimerOrBlockTask+0x94>)
 8004132:	6818      	ldr	r0, [r3, #0]
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	683a      	ldr	r2, [r7, #0]
 800413c:	4619      	mov	r1, r3
 800413e:	f7fe ffb9 	bl	80030b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004142:	f7ff fa2b 	bl	800359c <xTaskResumeAll>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d10a      	bne.n	8004162 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800414c:	4b09      	ldr	r3, [pc, #36]	; (8004174 <prvProcessTimerOrBlockTask+0x98>)
 800414e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004152:	601a      	str	r2, [r3, #0]
 8004154:	f3bf 8f4f 	dsb	sy
 8004158:	f3bf 8f6f 	isb	sy
}
 800415c:	e001      	b.n	8004162 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800415e:	f7ff fa1d 	bl	800359c <xTaskResumeAll>
}
 8004162:	bf00      	nop
 8004164:	3710      	adds	r7, #16
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	20000cc8 	.word	0x20000cc8
 8004170:	20000ccc 	.word	0x20000ccc
 8004174:	e000ed04 	.word	0xe000ed04

08004178 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004180:	4b0e      	ldr	r3, [pc, #56]	; (80041bc <prvGetNextExpireTime+0x44>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2b00      	cmp	r3, #0
 8004188:	bf0c      	ite	eq
 800418a:	2301      	moveq	r3, #1
 800418c:	2300      	movne	r3, #0
 800418e:	b2db      	uxtb	r3, r3
 8004190:	461a      	mov	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d105      	bne.n	80041aa <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800419e:	4b07      	ldr	r3, [pc, #28]	; (80041bc <prvGetNextExpireTime+0x44>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	60fb      	str	r3, [r7, #12]
 80041a8:	e001      	b.n	80041ae <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80041aa:	2300      	movs	r3, #0
 80041ac:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80041ae:	68fb      	ldr	r3, [r7, #12]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3714      	adds	r7, #20
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bc80      	pop	{r7}
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	20000cc4 	.word	0x20000cc4

080041c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80041c8:	f7ff fa86 	bl	80036d8 <xTaskGetTickCount>
 80041cc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80041ce:	4b0b      	ldr	r3, [pc, #44]	; (80041fc <prvSampleTimeNow+0x3c>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d205      	bcs.n	80041e4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80041d8:	f000 f908 	bl	80043ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	601a      	str	r2, [r3, #0]
 80041e2:	e002      	b.n	80041ea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80041ea:	4a04      	ldr	r2, [pc, #16]	; (80041fc <prvSampleTimeNow+0x3c>)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80041f0:	68fb      	ldr	r3, [r7, #12]
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	20000cd4 	.word	0x20000cd4

08004200 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
 800420c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800420e:	2300      	movs	r3, #0
 8004210:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	68ba      	ldr	r2, [r7, #8]
 8004216:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	429a      	cmp	r2, r3
 8004224:	d812      	bhi.n	800424c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	1ad2      	subs	r2, r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	429a      	cmp	r2, r3
 8004232:	d302      	bcc.n	800423a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004234:	2301      	movs	r3, #1
 8004236:	617b      	str	r3, [r7, #20]
 8004238:	e01b      	b.n	8004272 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800423a:	4b10      	ldr	r3, [pc, #64]	; (800427c <prvInsertTimerInActiveList+0x7c>)
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	3304      	adds	r3, #4
 8004242:	4619      	mov	r1, r3
 8004244:	4610      	mov	r0, r2
 8004246:	f7fe fa23 	bl	8002690 <vListInsert>
 800424a:	e012      	b.n	8004272 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	429a      	cmp	r2, r3
 8004252:	d206      	bcs.n	8004262 <prvInsertTimerInActiveList+0x62>
 8004254:	68ba      	ldr	r2, [r7, #8]
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	429a      	cmp	r2, r3
 800425a:	d302      	bcc.n	8004262 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800425c:	2301      	movs	r3, #1
 800425e:	617b      	str	r3, [r7, #20]
 8004260:	e007      	b.n	8004272 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004262:	4b07      	ldr	r3, [pc, #28]	; (8004280 <prvInsertTimerInActiveList+0x80>)
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	3304      	adds	r3, #4
 800426a:	4619      	mov	r1, r3
 800426c:	4610      	mov	r0, r2
 800426e:	f7fe fa0f 	bl	8002690 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004272:	697b      	ldr	r3, [r7, #20]
}
 8004274:	4618      	mov	r0, r3
 8004276:	3718      	adds	r7, #24
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	20000cc8 	.word	0x20000cc8
 8004280:	20000cc4 	.word	0x20000cc4

08004284 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b08e      	sub	sp, #56	; 0x38
 8004288:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800428a:	e09d      	b.n	80043c8 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	da18      	bge.n	80042c4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004292:	1d3b      	adds	r3, r7, #4
 8004294:	3304      	adds	r3, #4
 8004296:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429a:	2b00      	cmp	r3, #0
 800429c:	d10a      	bne.n	80042b4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800429e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a2:	f383 8811 	msr	BASEPRI, r3
 80042a6:	f3bf 8f6f 	isb	sy
 80042aa:	f3bf 8f4f 	dsb	sy
 80042ae:	61fb      	str	r3, [r7, #28]
}
 80042b0:	bf00      	nop
 80042b2:	e7fe      	b.n	80042b2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80042b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042ba:	6850      	ldr	r0, [r2, #4]
 80042bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042be:	6892      	ldr	r2, [r2, #8]
 80042c0:	4611      	mov	r1, r2
 80042c2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	db7d      	blt.n	80043c6 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80042ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d004      	beq.n	80042e0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80042d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d8:	3304      	adds	r3, #4
 80042da:	4618      	mov	r0, r3
 80042dc:	f7fe fa10 	bl	8002700 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80042e0:	463b      	mov	r3, r7
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7ff ff6c 	bl	80041c0 <prvSampleTimeNow>
 80042e8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2b09      	cmp	r3, #9
 80042ee:	d86b      	bhi.n	80043c8 <prvProcessReceivedCommands+0x144>
 80042f0:	a201      	add	r2, pc, #4	; (adr r2, 80042f8 <prvProcessReceivedCommands+0x74>)
 80042f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f6:	bf00      	nop
 80042f8:	08004321 	.word	0x08004321
 80042fc:	08004321 	.word	0x08004321
 8004300:	08004321 	.word	0x08004321
 8004304:	080043c9 	.word	0x080043c9
 8004308:	0800437d 	.word	0x0800437d
 800430c:	080043b5 	.word	0x080043b5
 8004310:	08004321 	.word	0x08004321
 8004314:	08004321 	.word	0x08004321
 8004318:	080043c9 	.word	0x080043c9
 800431c:	0800437d 	.word	0x0800437d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004320:	68ba      	ldr	r2, [r7, #8]
 8004322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	18d1      	adds	r1, r2, r3
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800432c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800432e:	f7ff ff67 	bl	8004200 <prvInsertTimerInActiveList>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d047      	beq.n	80043c8 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800433a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800433e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004342:	69db      	ldr	r3, [r3, #28]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d13f      	bne.n	80043c8 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004348:	68ba      	ldr	r2, [r7, #8]
 800434a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	441a      	add	r2, r3
 8004350:	2300      	movs	r3, #0
 8004352:	9300      	str	r3, [sp, #0]
 8004354:	2300      	movs	r3, #0
 8004356:	2100      	movs	r1, #0
 8004358:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800435a:	f7ff fe1f 	bl	8003f9c <xTimerGenericCommand>
 800435e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004360:	6a3b      	ldr	r3, [r7, #32]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d130      	bne.n	80043c8 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8004366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436a:	f383 8811 	msr	BASEPRI, r3
 800436e:	f3bf 8f6f 	isb	sy
 8004372:	f3bf 8f4f 	dsb	sy
 8004376:	61bb      	str	r3, [r7, #24]
}
 8004378:	bf00      	nop
 800437a:	e7fe      	b.n	800437a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004380:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10a      	bne.n	80043a0 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800438a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438e:	f383 8811 	msr	BASEPRI, r3
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	f3bf 8f4f 	dsb	sy
 800439a:	617b      	str	r3, [r7, #20]
}
 800439c:	bf00      	nop
 800439e:	e7fe      	b.n	800439e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80043a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a2:	699a      	ldr	r2, [r3, #24]
 80043a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a6:	18d1      	adds	r1, r2, r3
 80043a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043ae:	f7ff ff27 	bl	8004200 <prvInsertTimerInActiveList>
					break;
 80043b2:	e009      	b.n	80043c8 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80043b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d104      	bne.n	80043c8 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80043be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043c0:	f000 fb68 	bl	8004a94 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80043c4:	e000      	b.n	80043c8 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80043c6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80043c8:	4b07      	ldr	r3, [pc, #28]	; (80043e8 <prvProcessReceivedCommands+0x164>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	1d39      	adds	r1, r7, #4
 80043ce:	2200      	movs	r2, #0
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7fe fc57 	bl	8002c84 <xQueueReceive>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f47f af57 	bne.w	800428c <prvProcessReceivedCommands+0x8>
	}
}
 80043de:	bf00      	nop
 80043e0:	bf00      	nop
 80043e2:	3730      	adds	r7, #48	; 0x30
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	20000ccc 	.word	0x20000ccc

080043ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b088      	sub	sp, #32
 80043f0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80043f2:	e045      	b.n	8004480 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80043f4:	4b2c      	ldr	r3, [pc, #176]	; (80044a8 <prvSwitchTimerLists+0xbc>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80043fe:	4b2a      	ldr	r3, [pc, #168]	; (80044a8 <prvSwitchTimerLists+0xbc>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	3304      	adds	r3, #4
 800440c:	4618      	mov	r0, r3
 800440e:	f7fe f977 	bl	8002700 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004416:	68f8      	ldr	r0, [r7, #12]
 8004418:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	2b01      	cmp	r3, #1
 8004420:	d12e      	bne.n	8004480 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	4413      	add	r3, r2
 800442a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800442c:	68ba      	ldr	r2, [r7, #8]
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	429a      	cmp	r2, r3
 8004432:	d90e      	bls.n	8004452 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004440:	4b19      	ldr	r3, [pc, #100]	; (80044a8 <prvSwitchTimerLists+0xbc>)
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	3304      	adds	r3, #4
 8004448:	4619      	mov	r1, r3
 800444a:	4610      	mov	r0, r2
 800444c:	f7fe f920 	bl	8002690 <vListInsert>
 8004450:	e016      	b.n	8004480 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004452:	2300      	movs	r3, #0
 8004454:	9300      	str	r3, [sp, #0]
 8004456:	2300      	movs	r3, #0
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	2100      	movs	r1, #0
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f7ff fd9d 	bl	8003f9c <xTimerGenericCommand>
 8004462:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d10a      	bne.n	8004480 <prvSwitchTimerLists+0x94>
	__asm volatile
 800446a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800446e:	f383 8811 	msr	BASEPRI, r3
 8004472:	f3bf 8f6f 	isb	sy
 8004476:	f3bf 8f4f 	dsb	sy
 800447a:	603b      	str	r3, [r7, #0]
}
 800447c:	bf00      	nop
 800447e:	e7fe      	b.n	800447e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004480:	4b09      	ldr	r3, [pc, #36]	; (80044a8 <prvSwitchTimerLists+0xbc>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1b4      	bne.n	80043f4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800448a:	4b07      	ldr	r3, [pc, #28]	; (80044a8 <prvSwitchTimerLists+0xbc>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004490:	4b06      	ldr	r3, [pc, #24]	; (80044ac <prvSwitchTimerLists+0xc0>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a04      	ldr	r2, [pc, #16]	; (80044a8 <prvSwitchTimerLists+0xbc>)
 8004496:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004498:	4a04      	ldr	r2, [pc, #16]	; (80044ac <prvSwitchTimerLists+0xc0>)
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	6013      	str	r3, [r2, #0]
}
 800449e:	bf00      	nop
 80044a0:	3718      	adds	r7, #24
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	20000cc4 	.word	0x20000cc4
 80044ac:	20000cc8 	.word	0x20000cc8

080044b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80044b6:	f000 f929 	bl	800470c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80044ba:	4b15      	ldr	r3, [pc, #84]	; (8004510 <prvCheckForValidListAndQueue+0x60>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d120      	bne.n	8004504 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80044c2:	4814      	ldr	r0, [pc, #80]	; (8004514 <prvCheckForValidListAndQueue+0x64>)
 80044c4:	f7fe f896 	bl	80025f4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80044c8:	4813      	ldr	r0, [pc, #76]	; (8004518 <prvCheckForValidListAndQueue+0x68>)
 80044ca:	f7fe f893 	bl	80025f4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80044ce:	4b13      	ldr	r3, [pc, #76]	; (800451c <prvCheckForValidListAndQueue+0x6c>)
 80044d0:	4a10      	ldr	r2, [pc, #64]	; (8004514 <prvCheckForValidListAndQueue+0x64>)
 80044d2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80044d4:	4b12      	ldr	r3, [pc, #72]	; (8004520 <prvCheckForValidListAndQueue+0x70>)
 80044d6:	4a10      	ldr	r2, [pc, #64]	; (8004518 <prvCheckForValidListAndQueue+0x68>)
 80044d8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80044da:	2300      	movs	r3, #0
 80044dc:	9300      	str	r3, [sp, #0]
 80044de:	4b11      	ldr	r3, [pc, #68]	; (8004524 <prvCheckForValidListAndQueue+0x74>)
 80044e0:	4a11      	ldr	r2, [pc, #68]	; (8004528 <prvCheckForValidListAndQueue+0x78>)
 80044e2:	2110      	movs	r1, #16
 80044e4:	200a      	movs	r0, #10
 80044e6:	f7fe f99d 	bl	8002824 <xQueueGenericCreateStatic>
 80044ea:	4603      	mov	r3, r0
 80044ec:	4a08      	ldr	r2, [pc, #32]	; (8004510 <prvCheckForValidListAndQueue+0x60>)
 80044ee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80044f0:	4b07      	ldr	r3, [pc, #28]	; (8004510 <prvCheckForValidListAndQueue+0x60>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d005      	beq.n	8004504 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80044f8:	4b05      	ldr	r3, [pc, #20]	; (8004510 <prvCheckForValidListAndQueue+0x60>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	490b      	ldr	r1, [pc, #44]	; (800452c <prvCheckForValidListAndQueue+0x7c>)
 80044fe:	4618      	mov	r0, r3
 8004500:	f7fe fdb0 	bl	8003064 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004504:	f000 f932 	bl	800476c <vPortExitCritical>
}
 8004508:	bf00      	nop
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	20000ccc 	.word	0x20000ccc
 8004514:	20000c9c 	.word	0x20000c9c
 8004518:	20000cb0 	.word	0x20000cb0
 800451c:	20000cc4 	.word	0x20000cc4
 8004520:	20000cc8 	.word	0x20000cc8
 8004524:	20000d78 	.word	0x20000d78
 8004528:	20000cd8 	.word	0x20000cd8
 800452c:	08004dc8 	.word	0x08004dc8

08004530 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	3b04      	subs	r3, #4
 8004540:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004548:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	3b04      	subs	r3, #4
 800454e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	f023 0201 	bic.w	r2, r3, #1
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	3b04      	subs	r3, #4
 800455e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004560:	4a08      	ldr	r2, [pc, #32]	; (8004584 <pxPortInitialiseStack+0x54>)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	3b14      	subs	r3, #20
 800456a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	3b20      	subs	r3, #32
 8004576:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004578:	68fb      	ldr	r3, [r7, #12]
}
 800457a:	4618      	mov	r0, r3
 800457c:	3714      	adds	r7, #20
 800457e:	46bd      	mov	sp, r7
 8004580:	bc80      	pop	{r7}
 8004582:	4770      	bx	lr
 8004584:	08004589 	.word	0x08004589

08004588 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800458e:	2300      	movs	r3, #0
 8004590:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004592:	4b12      	ldr	r3, [pc, #72]	; (80045dc <prvTaskExitError+0x54>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800459a:	d00a      	beq.n	80045b2 <prvTaskExitError+0x2a>
	__asm volatile
 800459c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a0:	f383 8811 	msr	BASEPRI, r3
 80045a4:	f3bf 8f6f 	isb	sy
 80045a8:	f3bf 8f4f 	dsb	sy
 80045ac:	60fb      	str	r3, [r7, #12]
}
 80045ae:	bf00      	nop
 80045b0:	e7fe      	b.n	80045b0 <prvTaskExitError+0x28>
	__asm volatile
 80045b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b6:	f383 8811 	msr	BASEPRI, r3
 80045ba:	f3bf 8f6f 	isb	sy
 80045be:	f3bf 8f4f 	dsb	sy
 80045c2:	60bb      	str	r3, [r7, #8]
}
 80045c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80045c6:	bf00      	nop
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d0fc      	beq.n	80045c8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80045ce:	bf00      	nop
 80045d0:	bf00      	nop
 80045d2:	3714      	adds	r7, #20
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bc80      	pop	{r7}
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	2000001c 	.word	0x2000001c

080045e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80045e0:	4b07      	ldr	r3, [pc, #28]	; (8004600 <pxCurrentTCBConst2>)
 80045e2:	6819      	ldr	r1, [r3, #0]
 80045e4:	6808      	ldr	r0, [r1, #0]
 80045e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80045ea:	f380 8809 	msr	PSP, r0
 80045ee:	f3bf 8f6f 	isb	sy
 80045f2:	f04f 0000 	mov.w	r0, #0
 80045f6:	f380 8811 	msr	BASEPRI, r0
 80045fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80045fe:	4770      	bx	lr

08004600 <pxCurrentTCBConst2>:
 8004600:	2000079c 	.word	0x2000079c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004604:	bf00      	nop
 8004606:	bf00      	nop

08004608 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004608:	4806      	ldr	r0, [pc, #24]	; (8004624 <prvPortStartFirstTask+0x1c>)
 800460a:	6800      	ldr	r0, [r0, #0]
 800460c:	6800      	ldr	r0, [r0, #0]
 800460e:	f380 8808 	msr	MSP, r0
 8004612:	b662      	cpsie	i
 8004614:	b661      	cpsie	f
 8004616:	f3bf 8f4f 	dsb	sy
 800461a:	f3bf 8f6f 	isb	sy
 800461e:	df00      	svc	0
 8004620:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004622:	bf00      	nop
 8004624:	e000ed08 	.word	0xe000ed08

08004628 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800462e:	4b32      	ldr	r3, [pc, #200]	; (80046f8 <xPortStartScheduler+0xd0>)
 8004630:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	b2db      	uxtb	r3, r3
 8004638:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	22ff      	movs	r2, #255	; 0xff
 800463e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	b2db      	uxtb	r3, r3
 8004646:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004648:	78fb      	ldrb	r3, [r7, #3]
 800464a:	b2db      	uxtb	r3, r3
 800464c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004650:	b2da      	uxtb	r2, r3
 8004652:	4b2a      	ldr	r3, [pc, #168]	; (80046fc <xPortStartScheduler+0xd4>)
 8004654:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004656:	4b2a      	ldr	r3, [pc, #168]	; (8004700 <xPortStartScheduler+0xd8>)
 8004658:	2207      	movs	r2, #7
 800465a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800465c:	e009      	b.n	8004672 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800465e:	4b28      	ldr	r3, [pc, #160]	; (8004700 <xPortStartScheduler+0xd8>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	3b01      	subs	r3, #1
 8004664:	4a26      	ldr	r2, [pc, #152]	; (8004700 <xPortStartScheduler+0xd8>)
 8004666:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004668:	78fb      	ldrb	r3, [r7, #3]
 800466a:	b2db      	uxtb	r3, r3
 800466c:	005b      	lsls	r3, r3, #1
 800466e:	b2db      	uxtb	r3, r3
 8004670:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004672:	78fb      	ldrb	r3, [r7, #3]
 8004674:	b2db      	uxtb	r3, r3
 8004676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800467a:	2b80      	cmp	r3, #128	; 0x80
 800467c:	d0ef      	beq.n	800465e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800467e:	4b20      	ldr	r3, [pc, #128]	; (8004700 <xPortStartScheduler+0xd8>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f1c3 0307 	rsb	r3, r3, #7
 8004686:	2b04      	cmp	r3, #4
 8004688:	d00a      	beq.n	80046a0 <xPortStartScheduler+0x78>
	__asm volatile
 800468a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468e:	f383 8811 	msr	BASEPRI, r3
 8004692:	f3bf 8f6f 	isb	sy
 8004696:	f3bf 8f4f 	dsb	sy
 800469a:	60bb      	str	r3, [r7, #8]
}
 800469c:	bf00      	nop
 800469e:	e7fe      	b.n	800469e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80046a0:	4b17      	ldr	r3, [pc, #92]	; (8004700 <xPortStartScheduler+0xd8>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	021b      	lsls	r3, r3, #8
 80046a6:	4a16      	ldr	r2, [pc, #88]	; (8004700 <xPortStartScheduler+0xd8>)
 80046a8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80046aa:	4b15      	ldr	r3, [pc, #84]	; (8004700 <xPortStartScheduler+0xd8>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046b2:	4a13      	ldr	r2, [pc, #76]	; (8004700 <xPortStartScheduler+0xd8>)
 80046b4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	b2da      	uxtb	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80046be:	4b11      	ldr	r3, [pc, #68]	; (8004704 <xPortStartScheduler+0xdc>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a10      	ldr	r2, [pc, #64]	; (8004704 <xPortStartScheduler+0xdc>)
 80046c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80046c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80046ca:	4b0e      	ldr	r3, [pc, #56]	; (8004704 <xPortStartScheduler+0xdc>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a0d      	ldr	r2, [pc, #52]	; (8004704 <xPortStartScheduler+0xdc>)
 80046d0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80046d4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80046d6:	f000 f8b9 	bl	800484c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80046da:	4b0b      	ldr	r3, [pc, #44]	; (8004708 <xPortStartScheduler+0xe0>)
 80046dc:	2200      	movs	r2, #0
 80046de:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80046e0:	f7ff ff92 	bl	8004608 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80046e4:	f7ff f8c4 	bl	8003870 <vTaskSwitchContext>
	prvTaskExitError();
 80046e8:	f7ff ff4e 	bl	8004588 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	e000e400 	.word	0xe000e400
 80046fc:	20000dc8 	.word	0x20000dc8
 8004700:	20000dcc 	.word	0x20000dcc
 8004704:	e000ed20 	.word	0xe000ed20
 8004708:	2000001c 	.word	0x2000001c

0800470c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
	__asm volatile
 8004712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004716:	f383 8811 	msr	BASEPRI, r3
 800471a:	f3bf 8f6f 	isb	sy
 800471e:	f3bf 8f4f 	dsb	sy
 8004722:	607b      	str	r3, [r7, #4]
}
 8004724:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004726:	4b0f      	ldr	r3, [pc, #60]	; (8004764 <vPortEnterCritical+0x58>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	3301      	adds	r3, #1
 800472c:	4a0d      	ldr	r2, [pc, #52]	; (8004764 <vPortEnterCritical+0x58>)
 800472e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004730:	4b0c      	ldr	r3, [pc, #48]	; (8004764 <vPortEnterCritical+0x58>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d10f      	bne.n	8004758 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004738:	4b0b      	ldr	r3, [pc, #44]	; (8004768 <vPortEnterCritical+0x5c>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00a      	beq.n	8004758 <vPortEnterCritical+0x4c>
	__asm volatile
 8004742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004746:	f383 8811 	msr	BASEPRI, r3
 800474a:	f3bf 8f6f 	isb	sy
 800474e:	f3bf 8f4f 	dsb	sy
 8004752:	603b      	str	r3, [r7, #0]
}
 8004754:	bf00      	nop
 8004756:	e7fe      	b.n	8004756 <vPortEnterCritical+0x4a>
	}
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	bc80      	pop	{r7}
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	2000001c 	.word	0x2000001c
 8004768:	e000ed04 	.word	0xe000ed04

0800476c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004772:	4b11      	ldr	r3, [pc, #68]	; (80047b8 <vPortExitCritical+0x4c>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d10a      	bne.n	8004790 <vPortExitCritical+0x24>
	__asm volatile
 800477a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800477e:	f383 8811 	msr	BASEPRI, r3
 8004782:	f3bf 8f6f 	isb	sy
 8004786:	f3bf 8f4f 	dsb	sy
 800478a:	607b      	str	r3, [r7, #4]
}
 800478c:	bf00      	nop
 800478e:	e7fe      	b.n	800478e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004790:	4b09      	ldr	r3, [pc, #36]	; (80047b8 <vPortExitCritical+0x4c>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	3b01      	subs	r3, #1
 8004796:	4a08      	ldr	r2, [pc, #32]	; (80047b8 <vPortExitCritical+0x4c>)
 8004798:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800479a:	4b07      	ldr	r3, [pc, #28]	; (80047b8 <vPortExitCritical+0x4c>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d105      	bne.n	80047ae <vPortExitCritical+0x42>
 80047a2:	2300      	movs	r3, #0
 80047a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	f383 8811 	msr	BASEPRI, r3
}
 80047ac:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80047ae:	bf00      	nop
 80047b0:	370c      	adds	r7, #12
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bc80      	pop	{r7}
 80047b6:	4770      	bx	lr
 80047b8:	2000001c 	.word	0x2000001c
 80047bc:	00000000 	.word	0x00000000

080047c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80047c0:	f3ef 8009 	mrs	r0, PSP
 80047c4:	f3bf 8f6f 	isb	sy
 80047c8:	4b0d      	ldr	r3, [pc, #52]	; (8004800 <pxCurrentTCBConst>)
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80047d0:	6010      	str	r0, [r2, #0]
 80047d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80047d6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80047da:	f380 8811 	msr	BASEPRI, r0
 80047de:	f7ff f847 	bl	8003870 <vTaskSwitchContext>
 80047e2:	f04f 0000 	mov.w	r0, #0
 80047e6:	f380 8811 	msr	BASEPRI, r0
 80047ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80047ee:	6819      	ldr	r1, [r3, #0]
 80047f0:	6808      	ldr	r0, [r1, #0]
 80047f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80047f6:	f380 8809 	msr	PSP, r0
 80047fa:	f3bf 8f6f 	isb	sy
 80047fe:	4770      	bx	lr

08004800 <pxCurrentTCBConst>:
 8004800:	2000079c 	.word	0x2000079c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004804:	bf00      	nop
 8004806:	bf00      	nop

08004808 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
	__asm volatile
 800480e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004812:	f383 8811 	msr	BASEPRI, r3
 8004816:	f3bf 8f6f 	isb	sy
 800481a:	f3bf 8f4f 	dsb	sy
 800481e:	607b      	str	r3, [r7, #4]
}
 8004820:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004822:	f7fe ff67 	bl	80036f4 <xTaskIncrementTick>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d003      	beq.n	8004834 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800482c:	4b06      	ldr	r3, [pc, #24]	; (8004848 <xPortSysTickHandler+0x40>)
 800482e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004832:	601a      	str	r2, [r3, #0]
 8004834:	2300      	movs	r3, #0
 8004836:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	f383 8811 	msr	BASEPRI, r3
}
 800483e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004840:	bf00      	nop
 8004842:	3708      	adds	r7, #8
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	e000ed04 	.word	0xe000ed04

0800484c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800484c:	b480      	push	{r7}
 800484e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004850:	4b0a      	ldr	r3, [pc, #40]	; (800487c <vPortSetupTimerInterrupt+0x30>)
 8004852:	2200      	movs	r2, #0
 8004854:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004856:	4b0a      	ldr	r3, [pc, #40]	; (8004880 <vPortSetupTimerInterrupt+0x34>)
 8004858:	2200      	movs	r2, #0
 800485a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800485c:	4b09      	ldr	r3, [pc, #36]	; (8004884 <vPortSetupTimerInterrupt+0x38>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a09      	ldr	r2, [pc, #36]	; (8004888 <vPortSetupTimerInterrupt+0x3c>)
 8004862:	fba2 2303 	umull	r2, r3, r2, r3
 8004866:	099b      	lsrs	r3, r3, #6
 8004868:	4a08      	ldr	r2, [pc, #32]	; (800488c <vPortSetupTimerInterrupt+0x40>)
 800486a:	3b01      	subs	r3, #1
 800486c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800486e:	4b03      	ldr	r3, [pc, #12]	; (800487c <vPortSetupTimerInterrupt+0x30>)
 8004870:	2207      	movs	r2, #7
 8004872:	601a      	str	r2, [r3, #0]
}
 8004874:	bf00      	nop
 8004876:	46bd      	mov	sp, r7
 8004878:	bc80      	pop	{r7}
 800487a:	4770      	bx	lr
 800487c:	e000e010 	.word	0xe000e010
 8004880:	e000e018 	.word	0xe000e018
 8004884:	20000010 	.word	0x20000010
 8004888:	10624dd3 	.word	0x10624dd3
 800488c:	e000e014 	.word	0xe000e014

08004890 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004896:	f3ef 8305 	mrs	r3, IPSR
 800489a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2b0f      	cmp	r3, #15
 80048a0:	d914      	bls.n	80048cc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80048a2:	4a16      	ldr	r2, [pc, #88]	; (80048fc <vPortValidateInterruptPriority+0x6c>)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	4413      	add	r3, r2
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80048ac:	4b14      	ldr	r3, [pc, #80]	; (8004900 <vPortValidateInterruptPriority+0x70>)
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	7afa      	ldrb	r2, [r7, #11]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d20a      	bcs.n	80048cc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80048b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ba:	f383 8811 	msr	BASEPRI, r3
 80048be:	f3bf 8f6f 	isb	sy
 80048c2:	f3bf 8f4f 	dsb	sy
 80048c6:	607b      	str	r3, [r7, #4]
}
 80048c8:	bf00      	nop
 80048ca:	e7fe      	b.n	80048ca <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80048cc:	4b0d      	ldr	r3, [pc, #52]	; (8004904 <vPortValidateInterruptPriority+0x74>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80048d4:	4b0c      	ldr	r3, [pc, #48]	; (8004908 <vPortValidateInterruptPriority+0x78>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d90a      	bls.n	80048f2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80048dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e0:	f383 8811 	msr	BASEPRI, r3
 80048e4:	f3bf 8f6f 	isb	sy
 80048e8:	f3bf 8f4f 	dsb	sy
 80048ec:	603b      	str	r3, [r7, #0]
}
 80048ee:	bf00      	nop
 80048f0:	e7fe      	b.n	80048f0 <vPortValidateInterruptPriority+0x60>
	}
 80048f2:	bf00      	nop
 80048f4:	3714      	adds	r7, #20
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bc80      	pop	{r7}
 80048fa:	4770      	bx	lr
 80048fc:	e000e3f0 	.word	0xe000e3f0
 8004900:	20000dc8 	.word	0x20000dc8
 8004904:	e000ed0c 	.word	0xe000ed0c
 8004908:	20000dcc 	.word	0x20000dcc

0800490c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b08a      	sub	sp, #40	; 0x28
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004914:	2300      	movs	r3, #0
 8004916:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004918:	f7fe fe32 	bl	8003580 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800491c:	4b58      	ldr	r3, [pc, #352]	; (8004a80 <pvPortMalloc+0x174>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d101      	bne.n	8004928 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004924:	f000 f910 	bl	8004b48 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004928:	4b56      	ldr	r3, [pc, #344]	; (8004a84 <pvPortMalloc+0x178>)
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4013      	ands	r3, r2
 8004930:	2b00      	cmp	r3, #0
 8004932:	f040 808e 	bne.w	8004a52 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d01d      	beq.n	8004978 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800493c:	2208      	movs	r2, #8
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4413      	add	r3, r2
 8004942:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f003 0307 	and.w	r3, r3, #7
 800494a:	2b00      	cmp	r3, #0
 800494c:	d014      	beq.n	8004978 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f023 0307 	bic.w	r3, r3, #7
 8004954:	3308      	adds	r3, #8
 8004956:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f003 0307 	and.w	r3, r3, #7
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00a      	beq.n	8004978 <pvPortMalloc+0x6c>
	__asm volatile
 8004962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004966:	f383 8811 	msr	BASEPRI, r3
 800496a:	f3bf 8f6f 	isb	sy
 800496e:	f3bf 8f4f 	dsb	sy
 8004972:	617b      	str	r3, [r7, #20]
}
 8004974:	bf00      	nop
 8004976:	e7fe      	b.n	8004976 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d069      	beq.n	8004a52 <pvPortMalloc+0x146>
 800497e:	4b42      	ldr	r3, [pc, #264]	; (8004a88 <pvPortMalloc+0x17c>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	429a      	cmp	r2, r3
 8004986:	d864      	bhi.n	8004a52 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004988:	4b40      	ldr	r3, [pc, #256]	; (8004a8c <pvPortMalloc+0x180>)
 800498a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800498c:	4b3f      	ldr	r3, [pc, #252]	; (8004a8c <pvPortMalloc+0x180>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004992:	e004      	b.n	800499e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004996:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800499e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d903      	bls.n	80049b0 <pvPortMalloc+0xa4>
 80049a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1f1      	bne.n	8004994 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80049b0:	4b33      	ldr	r3, [pc, #204]	; (8004a80 <pvPortMalloc+0x174>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d04b      	beq.n	8004a52 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80049ba:	6a3b      	ldr	r3, [r7, #32]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2208      	movs	r2, #8
 80049c0:	4413      	add	r3, r2
 80049c2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80049c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	6a3b      	ldr	r3, [r7, #32]
 80049ca:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80049cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ce:	685a      	ldr	r2, [r3, #4]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	1ad2      	subs	r2, r2, r3
 80049d4:	2308      	movs	r3, #8
 80049d6:	005b      	lsls	r3, r3, #1
 80049d8:	429a      	cmp	r2, r3
 80049da:	d91f      	bls.n	8004a1c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80049dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4413      	add	r3, r2
 80049e2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	f003 0307 	and.w	r3, r3, #7
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00a      	beq.n	8004a04 <pvPortMalloc+0xf8>
	__asm volatile
 80049ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f2:	f383 8811 	msr	BASEPRI, r3
 80049f6:	f3bf 8f6f 	isb	sy
 80049fa:	f3bf 8f4f 	dsb	sy
 80049fe:	613b      	str	r3, [r7, #16]
}
 8004a00:	bf00      	nop
 8004a02:	e7fe      	b.n	8004a02 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a06:	685a      	ldr	r2, [r3, #4]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	1ad2      	subs	r2, r2, r3
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004a16:	69b8      	ldr	r0, [r7, #24]
 8004a18:	f000 f8f8 	bl	8004c0c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a1c:	4b1a      	ldr	r3, [pc, #104]	; (8004a88 <pvPortMalloc+0x17c>)
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	4a18      	ldr	r2, [pc, #96]	; (8004a88 <pvPortMalloc+0x17c>)
 8004a28:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004a2a:	4b17      	ldr	r3, [pc, #92]	; (8004a88 <pvPortMalloc+0x17c>)
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	4b18      	ldr	r3, [pc, #96]	; (8004a90 <pvPortMalloc+0x184>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d203      	bcs.n	8004a3e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004a36:	4b14      	ldr	r3, [pc, #80]	; (8004a88 <pvPortMalloc+0x17c>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a15      	ldr	r2, [pc, #84]	; (8004a90 <pvPortMalloc+0x184>)
 8004a3c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a40:	685a      	ldr	r2, [r3, #4]
 8004a42:	4b10      	ldr	r3, [pc, #64]	; (8004a84 <pvPortMalloc+0x178>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	431a      	orrs	r2, r3
 8004a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4e:	2200      	movs	r2, #0
 8004a50:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004a52:	f7fe fda3 	bl	800359c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	f003 0307 	and.w	r3, r3, #7
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00a      	beq.n	8004a76 <pvPortMalloc+0x16a>
	__asm volatile
 8004a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a64:	f383 8811 	msr	BASEPRI, r3
 8004a68:	f3bf 8f6f 	isb	sy
 8004a6c:	f3bf 8f4f 	dsb	sy
 8004a70:	60fb      	str	r3, [r7, #12]
}
 8004a72:	bf00      	nop
 8004a74:	e7fe      	b.n	8004a74 <pvPortMalloc+0x168>
	return pvReturn;
 8004a76:	69fb      	ldr	r3, [r7, #28]
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3728      	adds	r7, #40	; 0x28
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	200019d8 	.word	0x200019d8
 8004a84:	200019e4 	.word	0x200019e4
 8004a88:	200019dc 	.word	0x200019dc
 8004a8c:	200019d0 	.word	0x200019d0
 8004a90:	200019e0 	.word	0x200019e0

08004a94 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b086      	sub	sp, #24
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d048      	beq.n	8004b38 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004aa6:	2308      	movs	r3, #8
 8004aa8:	425b      	negs	r3, r3
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	4413      	add	r3, r2
 8004aae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	685a      	ldr	r2, [r3, #4]
 8004ab8:	4b21      	ldr	r3, [pc, #132]	; (8004b40 <vPortFree+0xac>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4013      	ands	r3, r2
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10a      	bne.n	8004ad8 <vPortFree+0x44>
	__asm volatile
 8004ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac6:	f383 8811 	msr	BASEPRI, r3
 8004aca:	f3bf 8f6f 	isb	sy
 8004ace:	f3bf 8f4f 	dsb	sy
 8004ad2:	60fb      	str	r3, [r7, #12]
}
 8004ad4:	bf00      	nop
 8004ad6:	e7fe      	b.n	8004ad6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00a      	beq.n	8004af6 <vPortFree+0x62>
	__asm volatile
 8004ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae4:	f383 8811 	msr	BASEPRI, r3
 8004ae8:	f3bf 8f6f 	isb	sy
 8004aec:	f3bf 8f4f 	dsb	sy
 8004af0:	60bb      	str	r3, [r7, #8]
}
 8004af2:	bf00      	nop
 8004af4:	e7fe      	b.n	8004af4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	685a      	ldr	r2, [r3, #4]
 8004afa:	4b11      	ldr	r3, [pc, #68]	; (8004b40 <vPortFree+0xac>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4013      	ands	r3, r2
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d019      	beq.n	8004b38 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d115      	bne.n	8004b38 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	685a      	ldr	r2, [r3, #4]
 8004b10:	4b0b      	ldr	r3, [pc, #44]	; (8004b40 <vPortFree+0xac>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	43db      	mvns	r3, r3
 8004b16:	401a      	ands	r2, r3
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004b1c:	f7fe fd30 	bl	8003580 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	685a      	ldr	r2, [r3, #4]
 8004b24:	4b07      	ldr	r3, [pc, #28]	; (8004b44 <vPortFree+0xb0>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4413      	add	r3, r2
 8004b2a:	4a06      	ldr	r2, [pc, #24]	; (8004b44 <vPortFree+0xb0>)
 8004b2c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004b2e:	6938      	ldr	r0, [r7, #16]
 8004b30:	f000 f86c 	bl	8004c0c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004b34:	f7fe fd32 	bl	800359c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004b38:	bf00      	nop
 8004b3a:	3718      	adds	r7, #24
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	200019e4 	.word	0x200019e4
 8004b44:	200019dc 	.word	0x200019dc

08004b48 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004b4e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004b52:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004b54:	4b27      	ldr	r3, [pc, #156]	; (8004bf4 <prvHeapInit+0xac>)
 8004b56:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f003 0307 	and.w	r3, r3, #7
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00c      	beq.n	8004b7c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	3307      	adds	r3, #7
 8004b66:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f023 0307 	bic.w	r3, r3, #7
 8004b6e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	4a1f      	ldr	r2, [pc, #124]	; (8004bf4 <prvHeapInit+0xac>)
 8004b78:	4413      	add	r3, r2
 8004b7a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004b80:	4a1d      	ldr	r2, [pc, #116]	; (8004bf8 <prvHeapInit+0xb0>)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004b86:	4b1c      	ldr	r3, [pc, #112]	; (8004bf8 <prvHeapInit+0xb0>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68ba      	ldr	r2, [r7, #8]
 8004b90:	4413      	add	r3, r2
 8004b92:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004b94:	2208      	movs	r2, #8
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	1a9b      	subs	r3, r3, r2
 8004b9a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f023 0307 	bic.w	r3, r3, #7
 8004ba2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	4a15      	ldr	r2, [pc, #84]	; (8004bfc <prvHeapInit+0xb4>)
 8004ba8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004baa:	4b14      	ldr	r3, [pc, #80]	; (8004bfc <prvHeapInit+0xb4>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004bb2:	4b12      	ldr	r3, [pc, #72]	; (8004bfc <prvHeapInit+0xb4>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	1ad2      	subs	r2, r2, r3
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004bc8:	4b0c      	ldr	r3, [pc, #48]	; (8004bfc <prvHeapInit+0xb4>)
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	4a0a      	ldr	r2, [pc, #40]	; (8004c00 <prvHeapInit+0xb8>)
 8004bd6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	4a09      	ldr	r2, [pc, #36]	; (8004c04 <prvHeapInit+0xbc>)
 8004bde:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004be0:	4b09      	ldr	r3, [pc, #36]	; (8004c08 <prvHeapInit+0xc0>)
 8004be2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004be6:	601a      	str	r2, [r3, #0]
}
 8004be8:	bf00      	nop
 8004bea:	3714      	adds	r7, #20
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bc80      	pop	{r7}
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	20000dd0 	.word	0x20000dd0
 8004bf8:	200019d0 	.word	0x200019d0
 8004bfc:	200019d8 	.word	0x200019d8
 8004c00:	200019e0 	.word	0x200019e0
 8004c04:	200019dc 	.word	0x200019dc
 8004c08:	200019e4 	.word	0x200019e4

08004c0c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004c14:	4b27      	ldr	r3, [pc, #156]	; (8004cb4 <prvInsertBlockIntoFreeList+0xa8>)
 8004c16:	60fb      	str	r3, [r7, #12]
 8004c18:	e002      	b.n	8004c20 <prvInsertBlockIntoFreeList+0x14>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	60fb      	str	r3, [r7, #12]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d8f7      	bhi.n	8004c1a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	68ba      	ldr	r2, [r7, #8]
 8004c34:	4413      	add	r3, r2
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d108      	bne.n	8004c4e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	685a      	ldr	r2, [r3, #4]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	441a      	add	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	68ba      	ldr	r2, [r7, #8]
 8004c58:	441a      	add	r2, r3
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d118      	bne.n	8004c94 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	4b14      	ldr	r3, [pc, #80]	; (8004cb8 <prvInsertBlockIntoFreeList+0xac>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d00d      	beq.n	8004c8a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685a      	ldr	r2, [r3, #4]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	441a      	add	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	601a      	str	r2, [r3, #0]
 8004c88:	e008      	b.n	8004c9c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004c8a:	4b0b      	ldr	r3, [pc, #44]	; (8004cb8 <prvInsertBlockIntoFreeList+0xac>)
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	601a      	str	r2, [r3, #0]
 8004c92:	e003      	b.n	8004c9c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d002      	beq.n	8004caa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004caa:	bf00      	nop
 8004cac:	3714      	adds	r7, #20
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bc80      	pop	{r7}
 8004cb2:	4770      	bx	lr
 8004cb4:	200019d0 	.word	0x200019d0
 8004cb8:	200019d8 	.word	0x200019d8

08004cbc <__libc_init_array>:
 8004cbc:	b570      	push	{r4, r5, r6, lr}
 8004cbe:	2600      	movs	r6, #0
 8004cc0:	4d0c      	ldr	r5, [pc, #48]	; (8004cf4 <__libc_init_array+0x38>)
 8004cc2:	4c0d      	ldr	r4, [pc, #52]	; (8004cf8 <__libc_init_array+0x3c>)
 8004cc4:	1b64      	subs	r4, r4, r5
 8004cc6:	10a4      	asrs	r4, r4, #2
 8004cc8:	42a6      	cmp	r6, r4
 8004cca:	d109      	bne.n	8004ce0 <__libc_init_array+0x24>
 8004ccc:	f000 f830 	bl	8004d30 <_init>
 8004cd0:	2600      	movs	r6, #0
 8004cd2:	4d0a      	ldr	r5, [pc, #40]	; (8004cfc <__libc_init_array+0x40>)
 8004cd4:	4c0a      	ldr	r4, [pc, #40]	; (8004d00 <__libc_init_array+0x44>)
 8004cd6:	1b64      	subs	r4, r4, r5
 8004cd8:	10a4      	asrs	r4, r4, #2
 8004cda:	42a6      	cmp	r6, r4
 8004cdc:	d105      	bne.n	8004cea <__libc_init_array+0x2e>
 8004cde:	bd70      	pop	{r4, r5, r6, pc}
 8004ce0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ce4:	4798      	blx	r3
 8004ce6:	3601      	adds	r6, #1
 8004ce8:	e7ee      	b.n	8004cc8 <__libc_init_array+0xc>
 8004cea:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cee:	4798      	blx	r3
 8004cf0:	3601      	adds	r6, #1
 8004cf2:	e7f2      	b.n	8004cda <__libc_init_array+0x1e>
 8004cf4:	08004e0c 	.word	0x08004e0c
 8004cf8:	08004e0c 	.word	0x08004e0c
 8004cfc:	08004e0c 	.word	0x08004e0c
 8004d00:	08004e10 	.word	0x08004e10

08004d04 <memcpy>:
 8004d04:	440a      	add	r2, r1
 8004d06:	4291      	cmp	r1, r2
 8004d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d0c:	d100      	bne.n	8004d10 <memcpy+0xc>
 8004d0e:	4770      	bx	lr
 8004d10:	b510      	push	{r4, lr}
 8004d12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d16:	4291      	cmp	r1, r2
 8004d18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d1c:	d1f9      	bne.n	8004d12 <memcpy+0xe>
 8004d1e:	bd10      	pop	{r4, pc}

08004d20 <memset>:
 8004d20:	4603      	mov	r3, r0
 8004d22:	4402      	add	r2, r0
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d100      	bne.n	8004d2a <memset+0xa>
 8004d28:	4770      	bx	lr
 8004d2a:	f803 1b01 	strb.w	r1, [r3], #1
 8004d2e:	e7f9      	b.n	8004d24 <memset+0x4>

08004d30 <_init>:
 8004d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d32:	bf00      	nop
 8004d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d36:	bc08      	pop	{r3}
 8004d38:	469e      	mov	lr, r3
 8004d3a:	4770      	bx	lr

08004d3c <_fini>:
 8004d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d3e:	bf00      	nop
 8004d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d42:	bc08      	pop	{r3}
 8004d44:	469e      	mov	lr, r3
 8004d46:	4770      	bx	lr
