
pon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f1c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  0800602c  0800602c  0001602c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061d4  080061d4  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  080061d4  080061d4  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  080061d4  080061d4  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061d4  080061d4  000161d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061d8  080061d8  000161d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080061dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019ec  20000084  08006260  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a70  08006260  00021a70  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ecc  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029b4  00000000  00000000  00030f79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  00033930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e38  00000000  00000000  00034868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000035a5  00000000  00000000  000356a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000111db  00000000  00000000  00038c45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c87f  00000000  00000000  00049e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d669f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004218  00000000  00000000  000d66f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000084 	.word	0x20000084
 800012c:	00000000 	.word	0x00000000
 8000130:	08006014 	.word	0x08006014

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000088 	.word	0x20000088
 800014c:	08006014 	.word	0x08006014

08000150 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
 8000156:	4603      	mov	r3, r0
 8000158:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 800015a:	4a38      	ldr	r2, [pc, #224]	; (800023c <HD44780_Init+0xec>)
 800015c:	79fb      	ldrb	r3, [r7, #7]
 800015e:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000160:	4b37      	ldr	r3, [pc, #220]	; (8000240 <HD44780_Init+0xf0>)
 8000162:	2208      	movs	r2, #8
 8000164:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000166:	4b37      	ldr	r3, [pc, #220]	; (8000244 <HD44780_Init+0xf4>)
 8000168:	2200      	movs	r2, #0
 800016a:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 800016c:	4b33      	ldr	r3, [pc, #204]	; (800023c <HD44780_Init+0xec>)
 800016e:	781b      	ldrb	r3, [r3, #0]
 8000170:	2b01      	cmp	r3, #1
 8000172:	d907      	bls.n	8000184 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000174:	4b33      	ldr	r3, [pc, #204]	; (8000244 <HD44780_Init+0xf4>)
 8000176:	781b      	ldrb	r3, [r3, #0]
 8000178:	f043 0308 	orr.w	r3, r3, #8
 800017c:	b2da      	uxtb	r2, r3
 800017e:	4b31      	ldr	r3, [pc, #196]	; (8000244 <HD44780_Init+0xf4>)
 8000180:	701a      	strb	r2, [r3, #0]
 8000182:	e006      	b.n	8000192 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000184:	4b2f      	ldr	r3, [pc, #188]	; (8000244 <HD44780_Init+0xf4>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	f043 0304 	orr.w	r3, r3, #4
 800018c:	b2da      	uxtb	r2, r3
 800018e:	4b2d      	ldr	r3, [pc, #180]	; (8000244 <HD44780_Init+0xf4>)
 8000190:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000192:	f000 f985 	bl	80004a0 <DelayInit>
  HAL_Delay(50);
 8000196:	2032      	movs	r0, #50	; 0x32
 8000198:	f000 fd26 	bl	8000be8 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 800019c:	4b28      	ldr	r3, [pc, #160]	; (8000240 <HD44780_Init+0xf0>)
 800019e:	781b      	ldrb	r3, [r3, #0]
 80001a0:	4618      	mov	r0, r3
 80001a2:	f000 f943 	bl	800042c <ExpanderWrite>
  HAL_Delay(1000);
 80001a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001aa:	f000 fd1d 	bl	8000be8 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80001ae:	2030      	movs	r0, #48	; 0x30
 80001b0:	f000 f92b 	bl	800040a <Write4Bits>
  DelayUS(4500);
 80001b4:	f241 1094 	movw	r0, #4500	; 0x1194
 80001b8:	f000 f99a 	bl	80004f0 <DelayUS>

  Write4Bits(0x03 << 4);
 80001bc:	2030      	movs	r0, #48	; 0x30
 80001be:	f000 f924 	bl	800040a <Write4Bits>
  DelayUS(4500);
 80001c2:	f241 1094 	movw	r0, #4500	; 0x1194
 80001c6:	f000 f993 	bl	80004f0 <DelayUS>

  Write4Bits(0x03 << 4);
 80001ca:	2030      	movs	r0, #48	; 0x30
 80001cc:	f000 f91d 	bl	800040a <Write4Bits>
  DelayUS(4500);
 80001d0:	f241 1094 	movw	r0, #4500	; 0x1194
 80001d4:	f000 f98c 	bl	80004f0 <DelayUS>

  Write4Bits(0x02 << 4);
 80001d8:	2020      	movs	r0, #32
 80001da:	f000 f916 	bl	800040a <Write4Bits>
  DelayUS(100);
 80001de:	2064      	movs	r0, #100	; 0x64
 80001e0:	f000 f986 	bl	80004f0 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 80001e4:	4b17      	ldr	r3, [pc, #92]	; (8000244 <HD44780_Init+0xf4>)
 80001e6:	781b      	ldrb	r3, [r3, #0]
 80001e8:	f043 0320 	orr.w	r3, r3, #32
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	4618      	mov	r0, r3
 80001f0:	f000 f8ce 	bl	8000390 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80001f4:	4b14      	ldr	r3, [pc, #80]	; (8000248 <HD44780_Init+0xf8>)
 80001f6:	2204      	movs	r2, #4
 80001f8:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80001fa:	f000 f875 	bl	80002e8 <HD44780_Display>
  HD44780_Clear();
 80001fe:	f000 f82b 	bl	8000258 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000202:	4b12      	ldr	r3, [pc, #72]	; (800024c <HD44780_Init+0xfc>)
 8000204:	2202      	movs	r2, #2
 8000206:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000208:	4b10      	ldr	r3, [pc, #64]	; (800024c <HD44780_Init+0xfc>)
 800020a:	781b      	ldrb	r3, [r3, #0]
 800020c:	f043 0304 	orr.w	r3, r3, #4
 8000210:	b2db      	uxtb	r3, r3
 8000212:	4618      	mov	r0, r3
 8000214:	f000 f8bc 	bl	8000390 <SendCommand>
  DelayUS(4500);
 8000218:	f241 1094 	movw	r0, #4500	; 0x1194
 800021c:	f000 f968 	bl	80004f0 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000220:	490b      	ldr	r1, [pc, #44]	; (8000250 <HD44780_Init+0x100>)
 8000222:	2000      	movs	r0, #0
 8000224:	f000 f876 	bl	8000314 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000228:	490a      	ldr	r1, [pc, #40]	; (8000254 <HD44780_Init+0x104>)
 800022a:	2001      	movs	r0, #1
 800022c:	f000 f872 	bl	8000314 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000230:	f000 f81d 	bl	800026e <HD44780_Home>
}
 8000234:	bf00      	nop
 8000236:	3708      	adds	r7, #8
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}
 800023c:	200000a3 	.word	0x200000a3
 8000240:	200000a4 	.word	0x200000a4
 8000244:	200000a0 	.word	0x200000a0
 8000248:	200000a1 	.word	0x200000a1
 800024c:	200000a2 	.word	0x200000a2
 8000250:	20000000 	.word	0x20000000
 8000254:	20000008 	.word	0x20000008

08000258 <HD44780_Clear>:

void HD44780_Clear()
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 800025c:	2001      	movs	r0, #1
 800025e:	f000 f897 	bl	8000390 <SendCommand>
  DelayUS(2000);
 8000262:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000266:	f000 f943 	bl	80004f0 <DelayUS>
}
 800026a:	bf00      	nop
 800026c:	bd80      	pop	{r7, pc}

0800026e <HD44780_Home>:

void HD44780_Home()
{
 800026e:	b580      	push	{r7, lr}
 8000270:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000272:	2002      	movs	r0, #2
 8000274:	f000 f88c 	bl	8000390 <SendCommand>
  DelayUS(2000);
 8000278:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800027c:	f000 f938 	bl	80004f0 <DelayUS>
}
 8000280:	bf00      	nop
 8000282:	bd80      	pop	{r7, pc}

08000284 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000284:	b590      	push	{r4, r7, lr}
 8000286:	b087      	sub	sp, #28
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	460a      	mov	r2, r1
 800028e:	71fb      	strb	r3, [r7, #7]
 8000290:	4613      	mov	r3, r2
 8000292:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000294:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <HD44780_SetCursor+0x5c>)
 8000296:	f107 0408 	add.w	r4, r7, #8
 800029a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800029c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80002a0:	4b10      	ldr	r3, [pc, #64]	; (80002e4 <HD44780_SetCursor+0x60>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	79ba      	ldrb	r2, [r7, #6]
 80002a6:	429a      	cmp	r2, r3
 80002a8:	d303      	bcc.n	80002b2 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80002aa:	4b0e      	ldr	r3, [pc, #56]	; (80002e4 <HD44780_SetCursor+0x60>)
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	3b01      	subs	r3, #1
 80002b0:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80002b2:	79bb      	ldrb	r3, [r7, #6]
 80002b4:	009b      	lsls	r3, r3, #2
 80002b6:	3318      	adds	r3, #24
 80002b8:	443b      	add	r3, r7
 80002ba:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80002be:	b2da      	uxtb	r2, r3
 80002c0:	79fb      	ldrb	r3, [r7, #7]
 80002c2:	4413      	add	r3, r2
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	b25b      	sxtb	r3, r3
 80002c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80002cc:	b25b      	sxtb	r3, r3
 80002ce:	b2db      	uxtb	r3, r3
 80002d0:	4618      	mov	r0, r3
 80002d2:	f000 f85d 	bl	8000390 <SendCommand>
}
 80002d6:	bf00      	nop
 80002d8:	371c      	adds	r7, #28
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd90      	pop	{r4, r7, pc}
 80002de:	bf00      	nop
 80002e0:	0800602c 	.word	0x0800602c
 80002e4:	200000a3 	.word	0x200000a3

080002e8 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 80002ec:	4b08      	ldr	r3, [pc, #32]	; (8000310 <HD44780_Display+0x28>)
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	f043 0304 	orr.w	r3, r3, #4
 80002f4:	b2da      	uxtb	r2, r3
 80002f6:	4b06      	ldr	r3, [pc, #24]	; (8000310 <HD44780_Display+0x28>)
 80002f8:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80002fa:	4b05      	ldr	r3, [pc, #20]	; (8000310 <HD44780_Display+0x28>)
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	f043 0308 	orr.w	r3, r3, #8
 8000302:	b2db      	uxtb	r3, r3
 8000304:	4618      	mov	r0, r3
 8000306:	f000 f843 	bl	8000390 <SendCommand>
}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	200000a1 	.word	0x200000a1

08000314 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
 800031a:	4603      	mov	r3, r0
 800031c:	6039      	str	r1, [r7, #0]
 800031e:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000320:	79fb      	ldrb	r3, [r7, #7]
 8000322:	f003 0307 	and.w	r3, r3, #7
 8000326:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	00db      	lsls	r3, r3, #3
 800032c:	b25b      	sxtb	r3, r3
 800032e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000332:	b25b      	sxtb	r3, r3
 8000334:	b2db      	uxtb	r3, r3
 8000336:	4618      	mov	r0, r3
 8000338:	f000 f82a 	bl	8000390 <SendCommand>
  for (int i=0; i<8; i++)
 800033c:	2300      	movs	r3, #0
 800033e:	60fb      	str	r3, [r7, #12]
 8000340:	e009      	b.n	8000356 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	683a      	ldr	r2, [r7, #0]
 8000346:	4413      	add	r3, r2
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	4618      	mov	r0, r3
 800034c:	f000 f82e 	bl	80003ac <SendChar>
  for (int i=0; i<8; i++)
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	3301      	adds	r3, #1
 8000354:	60fb      	str	r3, [r7, #12]
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	2b07      	cmp	r3, #7
 800035a:	ddf2      	ble.n	8000342 <HD44780_CreateSpecialChar+0x2e>
  }
}
 800035c:	bf00      	nop
 800035e:	bf00      	nop
 8000360:	3710      	adds	r7, #16
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}

08000366 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000366:	b580      	push	{r7, lr}
 8000368:	b082      	sub	sp, #8
 800036a:	af00      	add	r7, sp, #0
 800036c:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800036e:	e006      	b.n	800037e <HD44780_PrintStr+0x18>
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	1c5a      	adds	r2, r3, #1
 8000374:	607a      	str	r2, [r7, #4]
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	4618      	mov	r0, r3
 800037a:	f000 f817 	bl	80003ac <SendChar>
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d1f4      	bne.n	8000370 <HD44780_PrintStr+0xa>
}
 8000386:	bf00      	nop
 8000388:	bf00      	nop
 800038a:	3708      	adds	r7, #8
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}

08000390 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	2100      	movs	r1, #0
 800039e:	4618      	mov	r0, r3
 80003a0:	f000 f812 	bl	80003c8 <Send>
}
 80003a4:	bf00      	nop
 80003a6:	3708      	adds	r7, #8
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}

080003ac <SendChar>:

static void SendChar(uint8_t ch)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	4603      	mov	r3, r0
 80003b4:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80003b6:	79fb      	ldrb	r3, [r7, #7]
 80003b8:	2101      	movs	r1, #1
 80003ba:	4618      	mov	r0, r3
 80003bc:	f000 f804 	bl	80003c8 <Send>
}
 80003c0:	bf00      	nop
 80003c2:	3708      	adds	r7, #8
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}

080003c8 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b084      	sub	sp, #16
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	4603      	mov	r3, r0
 80003d0:	460a      	mov	r2, r1
 80003d2:	71fb      	strb	r3, [r7, #7]
 80003d4:	4613      	mov	r3, r2
 80003d6:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80003d8:	79fb      	ldrb	r3, [r7, #7]
 80003da:	f023 030f 	bic.w	r3, r3, #15
 80003de:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80003e0:	79fb      	ldrb	r3, [r7, #7]
 80003e2:	011b      	lsls	r3, r3, #4
 80003e4:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80003e6:	7bfa      	ldrb	r2, [r7, #15]
 80003e8:	79bb      	ldrb	r3, [r7, #6]
 80003ea:	4313      	orrs	r3, r2
 80003ec:	b2db      	uxtb	r3, r3
 80003ee:	4618      	mov	r0, r3
 80003f0:	f000 f80b 	bl	800040a <Write4Bits>
  Write4Bits((lownib)|mode);
 80003f4:	7bba      	ldrb	r2, [r7, #14]
 80003f6:	79bb      	ldrb	r3, [r7, #6]
 80003f8:	4313      	orrs	r3, r2
 80003fa:	b2db      	uxtb	r3, r3
 80003fc:	4618      	mov	r0, r3
 80003fe:	f000 f804 	bl	800040a <Write4Bits>
}
 8000402:	bf00      	nop
 8000404:	3710      	adds	r7, #16
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}

0800040a <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800040a:	b580      	push	{r7, lr}
 800040c:	b082      	sub	sp, #8
 800040e:	af00      	add	r7, sp, #0
 8000410:	4603      	mov	r3, r0
 8000412:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000414:	79fb      	ldrb	r3, [r7, #7]
 8000416:	4618      	mov	r0, r3
 8000418:	f000 f808 	bl	800042c <ExpanderWrite>
  PulseEnable(value);
 800041c:	79fb      	ldrb	r3, [r7, #7]
 800041e:	4618      	mov	r0, r3
 8000420:	f000 f820 	bl	8000464 <PulseEnable>
}
 8000424:	bf00      	nop
 8000426:	3708      	adds	r7, #8
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}

0800042c <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b086      	sub	sp, #24
 8000430:	af02      	add	r7, sp, #8
 8000432:	4603      	mov	r3, r0
 8000434:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000436:	4b09      	ldr	r3, [pc, #36]	; (800045c <ExpanderWrite+0x30>)
 8000438:	781a      	ldrb	r2, [r3, #0]
 800043a:	79fb      	ldrb	r3, [r7, #7]
 800043c:	4313      	orrs	r3, r2
 800043e:	b2db      	uxtb	r3, r3
 8000440:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000442:	f107 020f 	add.w	r2, r7, #15
 8000446:	230a      	movs	r3, #10
 8000448:	9300      	str	r3, [sp, #0]
 800044a:	2301      	movs	r3, #1
 800044c:	2170      	movs	r1, #112	; 0x70
 800044e:	4804      	ldr	r0, [pc, #16]	; (8000460 <ExpanderWrite+0x34>)
 8000450:	f000 ffca 	bl	80013e8 <HAL_I2C_Master_Transmit>
}
 8000454:	bf00      	nop
 8000456:	3710      	adds	r7, #16
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	200000a4 	.word	0x200000a4
 8000460:	200000a8 	.word	0x200000a8

08000464 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	4603      	mov	r3, r0
 800046c:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	f043 0304 	orr.w	r3, r3, #4
 8000474:	b2db      	uxtb	r3, r3
 8000476:	4618      	mov	r0, r3
 8000478:	f7ff ffd8 	bl	800042c <ExpanderWrite>
  DelayUS(20);
 800047c:	2014      	movs	r0, #20
 800047e:	f000 f837 	bl	80004f0 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8000482:	79fb      	ldrb	r3, [r7, #7]
 8000484:	f023 0304 	bic.w	r3, r3, #4
 8000488:	b2db      	uxtb	r3, r3
 800048a:	4618      	mov	r0, r3
 800048c:	f7ff ffce 	bl	800042c <ExpanderWrite>
  DelayUS(20);
 8000490:	2014      	movs	r0, #20
 8000492:	f000 f82d 	bl	80004f0 <DelayUS>
}
 8000496:	bf00      	nop
 8000498:	3708      	adds	r7, #8
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
	...

080004a0 <DelayInit>:

static void DelayInit(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80004a4:	4b10      	ldr	r3, [pc, #64]	; (80004e8 <DelayInit+0x48>)
 80004a6:	68db      	ldr	r3, [r3, #12]
 80004a8:	4a0f      	ldr	r2, [pc, #60]	; (80004e8 <DelayInit+0x48>)
 80004aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80004ae:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80004b0:	4b0d      	ldr	r3, [pc, #52]	; (80004e8 <DelayInit+0x48>)
 80004b2:	68db      	ldr	r3, [r3, #12]
 80004b4:	4a0c      	ldr	r2, [pc, #48]	; (80004e8 <DelayInit+0x48>)
 80004b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004ba:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80004bc:	4b0b      	ldr	r3, [pc, #44]	; (80004ec <DelayInit+0x4c>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a0a      	ldr	r2, [pc, #40]	; (80004ec <DelayInit+0x4c>)
 80004c2:	f023 0301 	bic.w	r3, r3, #1
 80004c6:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80004c8:	4b08      	ldr	r3, [pc, #32]	; (80004ec <DelayInit+0x4c>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a07      	ldr	r2, [pc, #28]	; (80004ec <DelayInit+0x4c>)
 80004ce:	f043 0301 	orr.w	r3, r3, #1
 80004d2:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80004d4:	4b05      	ldr	r3, [pc, #20]	; (80004ec <DelayInit+0x4c>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80004da:	bf00      	nop
  __ASM volatile ("NOP");
 80004dc:	bf00      	nop
  __ASM volatile ("NOP");
 80004de:	bf00      	nop
}
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bc80      	pop	{r7}
 80004e6:	4770      	bx	lr
 80004e8:	e000edf0 	.word	0xe000edf0
 80004ec:	e0001000 	.word	0xe0001000

080004f0 <DelayUS>:

static void DelayUS(uint32_t us) {
 80004f0:	b480      	push	{r7}
 80004f2:	b087      	sub	sp, #28
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80004f8:	4b0d      	ldr	r3, [pc, #52]	; (8000530 <DelayUS+0x40>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a0d      	ldr	r2, [pc, #52]	; (8000534 <DelayUS+0x44>)
 80004fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000502:	0c9a      	lsrs	r2, r3, #18
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	fb02 f303 	mul.w	r3, r2, r3
 800050a:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 800050c:	4b0a      	ldr	r3, [pc, #40]	; (8000538 <DelayUS+0x48>)
 800050e:	685b      	ldr	r3, [r3, #4]
 8000510:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8000512:	4b09      	ldr	r3, [pc, #36]	; (8000538 <DelayUS+0x48>)
 8000514:	685a      	ldr	r2, [r3, #4]
 8000516:	693b      	ldr	r3, [r7, #16]
 8000518:	1ad3      	subs	r3, r2, r3
 800051a:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	697a      	ldr	r2, [r7, #20]
 8000520:	429a      	cmp	r2, r3
 8000522:	d8f6      	bhi.n	8000512 <DelayUS+0x22>
}
 8000524:	bf00      	nop
 8000526:	bf00      	nop
 8000528:	371c      	adds	r7, #28
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr
 8000530:	20000010 	.word	0x20000010
 8000534:	431bde83 	.word	0x431bde83
 8000538:	e0001000 	.word	0xe0001000

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000540:	f000 faf0 	bl	8000b24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000544:	f000 f85c 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000548:	f000 f8c4 	bl	80006d4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800054c:	f000 f894 	bl	8000678 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
    HD44780_Init(2);
 8000550:	2002      	movs	r0, #2
 8000552:	f7ff fdfd 	bl	8000150 <HD44780_Init>
    HD44780_Clear();
 8000556:	f7ff fe7f 	bl	8000258 <HD44780_Clear>
    HD44780_SetCursor(0,0);
 800055a:	2100      	movs	r1, #0
 800055c:	2000      	movs	r0, #0
 800055e:	f7ff fe91 	bl	8000284 <HD44780_SetCursor>
    HD44780_PrintStr("BTN don't push");
 8000562:	4818      	ldr	r0, [pc, #96]	; (80005c4 <main+0x88>)
 8000564:	f7ff feff 	bl	8000366 <HD44780_PrintStr>
   /* buttonQueueHandle = osMessageQueueNew(1, sizeof(uint8_t), &buttonQueue_attributes); */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000568:	f001 fe4a 	bl	8002200 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  buttonSemaphoreHandle = osSemaphoreNew(1, 0, &buttonSemaphore_attributes);
 800056c:	4a16      	ldr	r2, [pc, #88]	; (80005c8 <main+0x8c>)
 800056e:	2100      	movs	r1, #0
 8000570:	2001      	movs	r0, #1
 8000572:	f001 ff83 	bl	800247c <osSemaphoreNew>
 8000576:	4603      	mov	r3, r0
 8000578:	4a14      	ldr	r2, [pc, #80]	; (80005cc <main+0x90>)
 800057a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800057c:	4a14      	ldr	r2, [pc, #80]	; (80005d0 <main+0x94>)
 800057e:	2100      	movs	r1, #0
 8000580:	4814      	ldr	r0, [pc, #80]	; (80005d4 <main+0x98>)
 8000582:	f001 fea3 	bl	80022cc <osThreadNew>
 8000586:	4603      	mov	r3, r0
 8000588:	4a13      	ldr	r2, [pc, #76]	; (80005d8 <main+0x9c>)
 800058a:	6013      	str	r3, [r2, #0]

  /* creation of BTNTask */
  BTNTaskHandle = osThreadNew(buttonTask, NULL, &BTNTask_attributes);
 800058c:	4a13      	ldr	r2, [pc, #76]	; (80005dc <main+0xa0>)
 800058e:	2100      	movs	r1, #0
 8000590:	4813      	ldr	r0, [pc, #76]	; (80005e0 <main+0xa4>)
 8000592:	f001 fe9b 	bl	80022cc <osThreadNew>
 8000596:	4603      	mov	r3, r0
 8000598:	4a12      	ldr	r2, [pc, #72]	; (80005e4 <main+0xa8>)
 800059a:	6013      	str	r3, [r2, #0]

  /* creation of LCDTask */
  LCDTaskHandle = osThreadNew(ledTask, NULL, &LCDTask_attributes);
 800059c:	4a12      	ldr	r2, [pc, #72]	; (80005e8 <main+0xac>)
 800059e:	2100      	movs	r1, #0
 80005a0:	4812      	ldr	r0, [pc, #72]	; (80005ec <main+0xb0>)
 80005a2:	f001 fe93 	bl	80022cc <osThreadNew>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a11      	ldr	r2, [pc, #68]	; (80005f0 <main+0xb4>)
 80005aa:	6013      	str	r3, [r2, #0]

  /* creation of holdLED */
  holdLEDHandle = osThreadNew(lcdTask, NULL, &holdLED_attributes);
 80005ac:	4a11      	ldr	r2, [pc, #68]	; (80005f4 <main+0xb8>)
 80005ae:	2100      	movs	r1, #0
 80005b0:	4811      	ldr	r0, [pc, #68]	; (80005f8 <main+0xbc>)
 80005b2:	f001 fe8b 	bl	80022cc <osThreadNew>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a10      	ldr	r2, [pc, #64]	; (80005fc <main+0xc0>)
 80005ba:	6013      	str	r3, [r2, #0]
  /* add events, ... */

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005bc:	f001 fe52 	bl	8002264 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c0:	e7fe      	b.n	80005c0 <main+0x84>
 80005c2:	bf00      	nop
 80005c4:	08006070 	.word	0x08006070
 80005c8:	08006178 	.word	0x08006178
 80005cc:	20000100 	.word	0x20000100
 80005d0:	080060e8 	.word	0x080060e8
 80005d4:	08000771 	.word	0x08000771
 80005d8:	200000fc 	.word	0x200000fc
 80005dc:	0800610c 	.word	0x0800610c
 80005e0:	08000781 	.word	0x08000781
 80005e4:	20000104 	.word	0x20000104
 80005e8:	08006130 	.word	0x08006130
 80005ec:	080007c1 	.word	0x080007c1
 80005f0:	20000108 	.word	0x20000108
 80005f4:	08006154 	.word	0x08006154
 80005f8:	0800083d 	.word	0x0800083d
 80005fc:	2000010c 	.word	0x2000010c

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b090      	sub	sp, #64	; 0x40
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0318 	add.w	r3, r7, #24
 800060a:	2228      	movs	r2, #40	; 0x28
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f005 f88c 	bl	800572c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]
 8000620:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000622:	2302      	movs	r3, #2
 8000624:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000626:	2301      	movs	r3, #1
 8000628:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800062a:	2310      	movs	r3, #16
 800062c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800062e:	2300      	movs	r3, #0
 8000630:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000632:	f107 0318 	add.w	r3, r7, #24
 8000636:	4618      	mov	r0, r3
 8000638:	f001 f9dc 	bl	80019f4 <HAL_RCC_OscConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000642:	f000 f96d 	bl	8000920 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000646:	230f      	movs	r3, #15
 8000648:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800064a:	2300      	movs	r3, #0
 800064c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f001 fc4a 	bl	8001ef8 <HAL_RCC_ClockConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800066a:	f000 f959 	bl	8000920 <Error_Handler>
  }
}
 800066e:	bf00      	nop
 8000670:	3740      	adds	r7, #64	; 0x40
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
	...

08000678 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800067c:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <MX_I2C1_Init+0x50>)
 800067e:	4a13      	ldr	r2, [pc, #76]	; (80006cc <MX_I2C1_Init+0x54>)
 8000680:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000682:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <MX_I2C1_Init+0x50>)
 8000684:	4a12      	ldr	r2, [pc, #72]	; (80006d0 <MX_I2C1_Init+0x58>)
 8000686:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000688:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <MX_I2C1_Init+0x50>)
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <MX_I2C1_Init+0x50>)
 8000690:	2200      	movs	r2, #0
 8000692:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <MX_I2C1_Init+0x50>)
 8000696:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800069a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800069c:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <MX_I2C1_Init+0x50>)
 800069e:	2200      	movs	r2, #0
 80006a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006a2:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <MX_I2C1_Init+0x50>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006a8:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <MX_I2C1_Init+0x50>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <MX_I2C1_Init+0x50>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006b4:	4804      	ldr	r0, [pc, #16]	; (80006c8 <MX_I2C1_Init+0x50>)
 80006b6:	f000 fd53 	bl	8001160 <HAL_I2C_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006c0:	f000 f92e 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	200000a8 	.word	0x200000a8
 80006cc:	40005400 	.word	0x40005400
 80006d0:	000186a0 	.word	0x000186a0

080006d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b086      	sub	sp, #24
 80006d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006da:	f107 0308 	add.w	r3, r7, #8
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e8:	4b1e      	ldr	r3, [pc, #120]	; (8000764 <MX_GPIO_Init+0x90>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	4a1d      	ldr	r2, [pc, #116]	; (8000764 <MX_GPIO_Init+0x90>)
 80006ee:	f043 0310 	orr.w	r3, r3, #16
 80006f2:	6193      	str	r3, [r2, #24]
 80006f4:	4b1b      	ldr	r3, [pc, #108]	; (8000764 <MX_GPIO_Init+0x90>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	f003 0310 	and.w	r3, r3, #16
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000700:	4b18      	ldr	r3, [pc, #96]	; (8000764 <MX_GPIO_Init+0x90>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	4a17      	ldr	r2, [pc, #92]	; (8000764 <MX_GPIO_Init+0x90>)
 8000706:	f043 0308 	orr.w	r3, r3, #8
 800070a:	6193      	str	r3, [r2, #24]
 800070c:	4b15      	ldr	r3, [pc, #84]	; (8000764 <MX_GPIO_Init+0x90>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	f003 0308 	and.w	r3, r3, #8
 8000714:	603b      	str	r3, [r7, #0]
 8000716:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000718:	2201      	movs	r2, #1
 800071a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800071e:	4812      	ldr	r0, [pc, #72]	; (8000768 <MX_GPIO_Init+0x94>)
 8000720:	f000 fd05 	bl	800112e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000724:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000728:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072a:	2301      	movs	r3, #1
 800072c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000732:	2302      	movs	r3, #2
 8000734:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000736:	f107 0308 	add.w	r3, r7, #8
 800073a:	4619      	mov	r1, r3
 800073c:	480a      	ldr	r0, [pc, #40]	; (8000768 <MX_GPIO_Init+0x94>)
 800073e:	f000 fb5b 	bl	8000df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000742:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000746:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000748:	2300      	movs	r3, #0
 800074a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800074c:	2301      	movs	r3, #1
 800074e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000750:	f107 0308 	add.w	r3, r7, #8
 8000754:	4619      	mov	r1, r3
 8000756:	4805      	ldr	r0, [pc, #20]	; (800076c <MX_GPIO_Init+0x98>)
 8000758:	f000 fb4e 	bl	8000df8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800075c:	bf00      	nop
 800075e:	3718      	adds	r7, #24
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40021000 	.word	0x40021000
 8000768:	40011000 	.word	0x40011000
 800076c:	40010c00 	.word	0x40010c00

08000770 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000778:	2001      	movs	r0, #1
 800077a:	f001 fe51 	bl	8002420 <osDelay>
 800077e:	e7fb      	b.n	8000778 <StartDefaultTask+0x8>

08000780 <buttonTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void buttonTask(void *argument)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
    uint8_t last_state = GPIO_PIN_SET; // предполагаем, что кнопка не нажата
 8000788:	2301      	movs	r3, #1
 800078a:	73fb      	strb	r3, [r7, #15]
    for(;;)
    {
        uint8_t current_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 800078c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000790:	4809      	ldr	r0, [pc, #36]	; (80007b8 <buttonTask+0x38>)
 8000792:	f000 fcb5 	bl	8001100 <HAL_GPIO_ReadPin>
 8000796:	4603      	mov	r3, r0
 8000798:	73bb      	strb	r3, [r7, #14]
        if(current_state != last_state)
 800079a:	7bba      	ldrb	r2, [r7, #14]
 800079c:	7bfb      	ldrb	r3, [r7, #15]
 800079e:	429a      	cmp	r2, r3
 80007a0:	d006      	beq.n	80007b0 <buttonTask+0x30>
        {
            last_state = current_state;
 80007a2:	7bbb      	ldrb	r3, [r7, #14]
 80007a4:	73fb      	strb	r3, [r7, #15]
            osSemaphoreRelease(buttonSemaphoreHandle); // сигнал об изменении состояния
 80007a6:	4b05      	ldr	r3, [pc, #20]	; (80007bc <buttonTask+0x3c>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f001 ff68 	bl	8002680 <osSemaphoreRelease>
        }
        osDelay(10);
 80007b0:	200a      	movs	r0, #10
 80007b2:	f001 fe35 	bl	8002420 <osDelay>
    {
 80007b6:	e7e9      	b.n	800078c <buttonTask+0xc>
 80007b8:	40010c00 	.word	0x40010c00
 80007bc:	20000100 	.word	0x20000100

080007c0 <ledTask>:
    }
}

void ledTask(void *argument)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
    uint8_t led_on = 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	73fb      	strb	r3, [r7, #15]
    for(;;)
    {
        // Ждем семафор с таймаутом 100 мс
        if(osSemaphoreAcquire(buttonSemaphoreHandle, 100) == osOK)
 80007cc:	4b18      	ldr	r3, [pc, #96]	; (8000830 <ledTask+0x70>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2164      	movs	r1, #100	; 0x64
 80007d2:	4618      	mov	r0, r3
 80007d4:	f001 feee 	bl	80025b4 <osSemaphoreAcquire>
        {
            // получили сигнал об изменении, читаем актуальное состояние кнопки
        }
        uint8_t button_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 80007d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007dc:	4815      	ldr	r0, [pc, #84]	; (8000834 <ledTask+0x74>)
 80007de:	f000 fc8f 	bl	8001100 <HAL_GPIO_ReadPin>
 80007e2:	4603      	mov	r3, r0
 80007e4:	73bb      	strb	r3, [r7, #14]

        if(button_state == GPIO_PIN_RESET)
 80007e6:	7bbb      	ldrb	r3, [r7, #14]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d10c      	bne.n	8000806 <ledTask+0x46>
        {
            // Кнопка нажата — светодиод горит постоянно
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80007ec:	2200      	movs	r2, #0
 80007ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007f2:	4811      	ldr	r0, [pc, #68]	; (8000838 <ledTask+0x78>)
 80007f4:	f000 fc9b 	bl	800112e <HAL_GPIO_WritePin>
            led_on = 1;
 80007f8:	2301      	movs	r3, #1
 80007fa:	73fb      	strb	r3, [r7, #15]

            osDelay(3000);
 80007fc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000800:	f001 fe0e 	bl	8002420 <osDelay>
 8000804:	e7e2      	b.n	80007cc <ledTask+0xc>
        }
        else
        {
            led_on = !led_on;
 8000806:	7bfb      	ldrb	r3, [r7, #15]
 8000808:	2b00      	cmp	r3, #0
 800080a:	bf0c      	ite	eq
 800080c:	2301      	moveq	r3, #1
 800080e:	2300      	movne	r3, #0
 8000810:	b2db      	uxtb	r3, r3
 8000812:	73fb      	strb	r3, [r7, #15]
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, (led_on) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000814:	7bfb      	ldrb	r3, [r7, #15]
 8000816:	2b00      	cmp	r3, #0
 8000818:	bf0c      	ite	eq
 800081a:	2301      	moveq	r3, #1
 800081c:	2300      	movne	r3, #0
 800081e:	b2db      	uxtb	r3, r3
 8000820:	461a      	mov	r2, r3
 8000822:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000826:	4804      	ldr	r0, [pc, #16]	; (8000838 <ledTask+0x78>)
 8000828:	f000 fc81 	bl	800112e <HAL_GPIO_WritePin>
    {
 800082c:	e7ce      	b.n	80007cc <ledTask+0xc>
 800082e:	bf00      	nop
 8000830:	20000100 	.word	0x20000100
 8000834:	40010c00 	.word	0x40010c00
 8000838:	40011000 	.word	0x40011000

0800083c <lcdTask>:
        }
    }
}

void lcdTask(void *argument)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08a      	sub	sp, #40	; 0x28
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
    uint8_t prev_state = 0xFF;
 8000844:	23ff      	movs	r3, #255	; 0xff
 8000846:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    for(;;)
    {
        // Ждем семафор с таймаутом 100 мс
        if(osSemaphoreAcquire(buttonSemaphoreHandle, 100) == osOK)
 800084a:	4b2f      	ldr	r3, [pc, #188]	; (8000908 <lcdTask+0xcc>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	2164      	movs	r1, #100	; 0x64
 8000850:	4618      	mov	r0, r3
 8000852:	f001 feaf 	bl	80025b4 <osSemaphoreAcquire>
        {
            // получили сигнал об изменении, читаем актуальное состояние кнопки
        }
        uint8_t button_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 8000856:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800085a:	482c      	ldr	r0, [pc, #176]	; (800090c <lcdTask+0xd0>)
 800085c:	f000 fc50 	bl	8001100 <HAL_GPIO_ReadPin>
 8000860:	4603      	mov	r3, r0
 8000862:	77fb      	strb	r3, [r7, #31]

        if(button_state != prev_state)
 8000864:	7ffa      	ldrb	r2, [r7, #31]
 8000866:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800086a:	429a      	cmp	r2, r3
 800086c:	d047      	beq.n	80008fe <lcdTask+0xc2>
        {
            HD44780_Clear();
 800086e:	f7ff fcf3 	bl	8000258 <HD44780_Clear>
            HD44780_SetCursor(0,0);
 8000872:	2100      	movs	r1, #0
 8000874:	2000      	movs	r0, #0
 8000876:	f7ff fd05 	bl	8000284 <HD44780_SetCursor>
            if(button_state == GPIO_PIN_RESET) {
 800087a:	7ffb      	ldrb	r3, [r7, #31]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d103      	bne.n	8000888 <lcdTask+0x4c>
                HD44780_PrintStr("door is open");
 8000880:	4823      	ldr	r0, [pc, #140]	; (8000910 <lcdTask+0xd4>)
 8000882:	f7ff fd70 	bl	8000366 <HD44780_PrintStr>
 8000886:	e037      	b.n	80008f8 <lcdTask+0xbc>

        }else {
        	int time = 3;
 8000888:	2303      	movs	r3, #3
 800088a:	623b      	str	r3, [r7, #32]
        	char buffer[20];

        	HD44780_Clear();
 800088c:	f7ff fce4 	bl	8000258 <HD44780_Clear>
        	HD44780_PrintStr("door will be");
 8000890:	4820      	ldr	r0, [pc, #128]	; (8000914 <lcdTask+0xd8>)
 8000892:	f7ff fd68 	bl	8000366 <HD44780_PrintStr>
        	HD44780_SetCursor(0,1);
 8000896:	2101      	movs	r1, #1
 8000898:	2000      	movs	r0, #0
 800089a:	f7ff fcf3 	bl	8000284 <HD44780_SetCursor>

        	for (; time > 0; time--) {
 800089e:	e01f      	b.n	80008e0 <lcdTask+0xa4>
            	HD44780_Clear();
 80008a0:	f7ff fcda 	bl	8000258 <HD44780_Clear>
                HD44780_SetCursor(0,0);
 80008a4:	2100      	movs	r1, #0
 80008a6:	2000      	movs	r0, #0
 80008a8:	f7ff fcec 	bl	8000284 <HD44780_SetCursor>
            	HD44780_PrintStr("door will be");
 80008ac:	4819      	ldr	r0, [pc, #100]	; (8000914 <lcdTask+0xd8>)
 80008ae:	f7ff fd5a 	bl	8000366 <HD44780_PrintStr>
            	HD44780_SetCursor(0,1);
 80008b2:	2101      	movs	r1, #1
 80008b4:	2000      	movs	r0, #0
 80008b6:	f7ff fce5 	bl	8000284 <HD44780_SetCursor>
                sprintf(buffer, "close in: %d", time);
 80008ba:	f107 0308 	add.w	r3, r7, #8
 80008be:	6a3a      	ldr	r2, [r7, #32]
 80008c0:	4915      	ldr	r1, [pc, #84]	; (8000918 <lcdTask+0xdc>)
 80008c2:	4618      	mov	r0, r3
 80008c4:	f004 ff3a 	bl	800573c <siprintf>
                HD44780_PrintStr(buffer);
 80008c8:	f107 0308 	add.w	r3, r7, #8
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff fd4a 	bl	8000366 <HD44780_PrintStr>
                osDelay(900);
 80008d2:	f44f 7061 	mov.w	r0, #900	; 0x384
 80008d6:	f001 fda3 	bl	8002420 <osDelay>
        	for (; time > 0; time--) {
 80008da:	6a3b      	ldr	r3, [r7, #32]
 80008dc:	3b01      	subs	r3, #1
 80008de:	623b      	str	r3, [r7, #32]
 80008e0:	6a3b      	ldr	r3, [r7, #32]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	dcdc      	bgt.n	80008a0 <lcdTask+0x64>
        	}
           	HD44780_Clear();
 80008e6:	f7ff fcb7 	bl	8000258 <HD44780_Clear>
        	HD44780_SetCursor(0,0);
 80008ea:	2100      	movs	r1, #0
 80008ec:	2000      	movs	r0, #0
 80008ee:	f7ff fcc9 	bl	8000284 <HD44780_SetCursor>
        	HD44780_PrintStr("door is close");
 80008f2:	480a      	ldr	r0, [pc, #40]	; (800091c <lcdTask+0xe0>)
 80008f4:	f7ff fd37 	bl	8000366 <HD44780_PrintStr>


        }

            prev_state = button_state;
 80008f8:	7ffb      	ldrb	r3, [r7, #31]
 80008fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        }
        osDelay(50);
 80008fe:	2032      	movs	r0, #50	; 0x32
 8000900:	f001 fd8e 	bl	8002420 <osDelay>
    {
 8000904:	e7a1      	b.n	800084a <lcdTask+0xe>
 8000906:	bf00      	nop
 8000908:	20000100 	.word	0x20000100
 800090c:	40010c00 	.word	0x40010c00
 8000910:	08006080 	.word	0x08006080
 8000914:	08006090 	.word	0x08006090
 8000918:	080060a0 	.word	0x080060a0
 800091c:	080060b0 	.word	0x080060b0

08000920 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000924:	b672      	cpsid	i
}
 8000926:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000928:	e7fe      	b.n	8000928 <Error_Handler+0x8>
	...

0800092c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <HAL_MspInit+0x4c>)
 8000934:	699b      	ldr	r3, [r3, #24]
 8000936:	4a10      	ldr	r2, [pc, #64]	; (8000978 <HAL_MspInit+0x4c>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	6193      	str	r3, [r2, #24]
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <HAL_MspInit+0x4c>)
 8000940:	699b      	ldr	r3, [r3, #24]
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <HAL_MspInit+0x4c>)
 800094c:	69db      	ldr	r3, [r3, #28]
 800094e:	4a0a      	ldr	r2, [pc, #40]	; (8000978 <HAL_MspInit+0x4c>)
 8000950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000954:	61d3      	str	r3, [r2, #28]
 8000956:	4b08      	ldr	r3, [pc, #32]	; (8000978 <HAL_MspInit+0x4c>)
 8000958:	69db      	ldr	r3, [r3, #28]
 800095a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000962:	2200      	movs	r2, #0
 8000964:	210f      	movs	r1, #15
 8000966:	f06f 0001 	mvn.w	r0, #1
 800096a:	f000 fa1c 	bl	8000da6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40021000 	.word	0x40021000

0800097c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08a      	sub	sp, #40	; 0x28
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a1d      	ldr	r2, [pc, #116]	; (8000a0c <HAL_I2C_MspInit+0x90>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d132      	bne.n	8000a02 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800099c:	4b1c      	ldr	r3, [pc, #112]	; (8000a10 <HAL_I2C_MspInit+0x94>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	4a1b      	ldr	r2, [pc, #108]	; (8000a10 <HAL_I2C_MspInit+0x94>)
 80009a2:	f043 0308 	orr.w	r3, r3, #8
 80009a6:	6193      	str	r3, [r2, #24]
 80009a8:	4b19      	ldr	r3, [pc, #100]	; (8000a10 <HAL_I2C_MspInit+0x94>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	f003 0308 	and.w	r3, r3, #8
 80009b0:	613b      	str	r3, [r7, #16]
 80009b2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ba:	2312      	movs	r3, #18
 80009bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009be:	2303      	movs	r3, #3
 80009c0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	4619      	mov	r1, r3
 80009c8:	4812      	ldr	r0, [pc, #72]	; (8000a14 <HAL_I2C_MspInit+0x98>)
 80009ca:	f000 fa15 	bl	8000df8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80009ce:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <HAL_I2C_MspInit+0x9c>)
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
 80009d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
 80009dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009de:	f043 0302 	orr.w	r3, r3, #2
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
 80009e4:	4a0c      	ldr	r2, [pc, #48]	; (8000a18 <HAL_I2C_MspInit+0x9c>)
 80009e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e8:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <HAL_I2C_MspInit+0x94>)
 80009ec:	69db      	ldr	r3, [r3, #28]
 80009ee:	4a08      	ldr	r2, [pc, #32]	; (8000a10 <HAL_I2C_MspInit+0x94>)
 80009f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009f4:	61d3      	str	r3, [r2, #28]
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <HAL_I2C_MspInit+0x94>)
 80009f8:	69db      	ldr	r3, [r3, #28]
 80009fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a02:	bf00      	nop
 8000a04:	3728      	adds	r7, #40	; 0x28
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40005400 	.word	0x40005400
 8000a10:	40021000 	.word	0x40021000
 8000a14:	40010c00 	.word	0x40010c00
 8000a18:	40010000 	.word	0x40010000

08000a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <NMI_Handler+0x4>

08000a22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a26:	e7fe      	b.n	8000a26 <HardFault_Handler+0x4>

08000a28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <MemManage_Handler+0x4>

08000a2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a32:	e7fe      	b.n	8000a32 <BusFault_Handler+0x4>

08000a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <UsageFault_Handler+0x4>

08000a3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bc80      	pop	{r7}
 8000a44:	4770      	bx	lr

08000a46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a4a:	f000 f8b1 	bl	8000bb0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a4e:	f003 fd73 	bl	8004538 <xTaskGetSchedulerState>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d001      	beq.n	8000a5c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a58:	f004 fbd6 	bl	8005208 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a68:	4a14      	ldr	r2, [pc, #80]	; (8000abc <_sbrk+0x5c>)
 8000a6a:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <_sbrk+0x60>)
 8000a6c:	1ad3      	subs	r3, r2, r3
 8000a6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a74:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <_sbrk+0x64>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d102      	bne.n	8000a82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a7c:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <_sbrk+0x64>)
 8000a7e:	4a12      	ldr	r2, [pc, #72]	; (8000ac8 <_sbrk+0x68>)
 8000a80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a82:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <_sbrk+0x64>)
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4413      	add	r3, r2
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d207      	bcs.n	8000aa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a90:	f004 fe14 	bl	80056bc <__errno>
 8000a94:	4603      	mov	r3, r0
 8000a96:	220c      	movs	r2, #12
 8000a98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9e:	e009      	b.n	8000ab4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000aa0:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <_sbrk+0x64>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aa6:	4b07      	ldr	r3, [pc, #28]	; (8000ac4 <_sbrk+0x64>)
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4413      	add	r3, r2
 8000aae:	4a05      	ldr	r2, [pc, #20]	; (8000ac4 <_sbrk+0x64>)
 8000ab0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ab2:	68fb      	ldr	r3, [r7, #12]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3718      	adds	r7, #24
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20005000 	.word	0x20005000
 8000ac0:	00000400 	.word	0x00000400
 8000ac4:	20000110 	.word	0x20000110
 8000ac8:	20001a70 	.word	0x20001a70

08000acc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr

08000ad8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ad8:	480c      	ldr	r0, [pc, #48]	; (8000b0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ada:	490d      	ldr	r1, [pc, #52]	; (8000b10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000adc:	4a0d      	ldr	r2, [pc, #52]	; (8000b14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ade:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae0:	e002      	b.n	8000ae8 <LoopCopyDataInit>

08000ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ae6:	3304      	adds	r3, #4

08000ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aec:	d3f9      	bcc.n	8000ae2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aee:	4a0a      	ldr	r2, [pc, #40]	; (8000b18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000af0:	4c0a      	ldr	r4, [pc, #40]	; (8000b1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af4:	e001      	b.n	8000afa <LoopFillZerobss>

08000af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af8:	3204      	adds	r2, #4

08000afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000afc:	d3fb      	bcc.n	8000af6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000afe:	f7ff ffe5 	bl	8000acc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b02:	f004 fde1 	bl	80056c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b06:	f7ff fd19 	bl	800053c <main>
  bx lr
 8000b0a:	4770      	bx	lr
  ldr r0, =_sdata
 8000b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b10:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000b14:	080061dc 	.word	0x080061dc
  ldr r2, =_sbss
 8000b18:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000b1c:	20001a70 	.word	0x20001a70

08000b20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b20:	e7fe      	b.n	8000b20 <ADC1_2_IRQHandler>
	...

08000b24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b28:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <HAL_Init+0x28>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a07      	ldr	r2, [pc, #28]	; (8000b4c <HAL_Init+0x28>)
 8000b2e:	f043 0310 	orr.w	r3, r3, #16
 8000b32:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b34:	2003      	movs	r0, #3
 8000b36:	f000 f92b 	bl	8000d90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b3a:	200f      	movs	r0, #15
 8000b3c:	f000 f808 	bl	8000b50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b40:	f7ff fef4 	bl	800092c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b44:	2300      	movs	r3, #0
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40022000 	.word	0x40022000

08000b50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b58:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <HAL_InitTick+0x54>)
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <HAL_InitTick+0x58>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	4619      	mov	r1, r3
 8000b62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f000 f935 	bl	8000dde <HAL_SYSTICK_Config>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e00e      	b.n	8000b9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2b0f      	cmp	r3, #15
 8000b82:	d80a      	bhi.n	8000b9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b84:	2200      	movs	r2, #0
 8000b86:	6879      	ldr	r1, [r7, #4]
 8000b88:	f04f 30ff 	mov.w	r0, #4294967295
 8000b8c:	f000 f90b 	bl	8000da6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b90:	4a06      	ldr	r2, [pc, #24]	; (8000bac <HAL_InitTick+0x5c>)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b96:	2300      	movs	r3, #0
 8000b98:	e000      	b.n	8000b9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20000010 	.word	0x20000010
 8000ba8:	20000018 	.word	0x20000018
 8000bac:	20000014 	.word	0x20000014

08000bb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb4:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <HAL_IncTick+0x1c>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <HAL_IncTick+0x20>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	4a03      	ldr	r2, [pc, #12]	; (8000bd0 <HAL_IncTick+0x20>)
 8000bc2:	6013      	str	r3, [r2, #0]
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bc80      	pop	{r7}
 8000bca:	4770      	bx	lr
 8000bcc:	20000018 	.word	0x20000018
 8000bd0:	20000114 	.word	0x20000114

08000bd4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd8:	4b02      	ldr	r3, [pc, #8]	; (8000be4 <HAL_GetTick+0x10>)
 8000bda:	681b      	ldr	r3, [r3, #0]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr
 8000be4:	20000114 	.word	0x20000114

08000be8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bf0:	f7ff fff0 	bl	8000bd4 <HAL_GetTick>
 8000bf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c00:	d005      	beq.n	8000c0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c02:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <HAL_Delay+0x44>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	461a      	mov	r2, r3
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c0e:	bf00      	nop
 8000c10:	f7ff ffe0 	bl	8000bd4 <HAL_GetTick>
 8000c14:	4602      	mov	r2, r0
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	68fa      	ldr	r2, [r7, #12]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d8f7      	bhi.n	8000c10 <HAL_Delay+0x28>
  {
  }
}
 8000c20:	bf00      	nop
 8000c22:	bf00      	nop
 8000c24:	3710      	adds	r7, #16
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000018 	.word	0x20000018

08000c30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f003 0307 	and.w	r3, r3, #7
 8000c3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <__NVIC_SetPriorityGrouping+0x44>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c46:	68ba      	ldr	r2, [r7, #8]
 8000c48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c62:	4a04      	ldr	r2, [pc, #16]	; (8000c74 <__NVIC_SetPriorityGrouping+0x44>)
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	60d3      	str	r3, [r2, #12]
}
 8000c68:	bf00      	nop
 8000c6a:	3714      	adds	r7, #20
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bc80      	pop	{r7}
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c7c:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <__NVIC_GetPriorityGrouping+0x18>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	0a1b      	lsrs	r3, r3, #8
 8000c82:	f003 0307 	and.w	r3, r3, #7
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bc80      	pop	{r7}
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	6039      	str	r1, [r7, #0]
 8000c9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	db0a      	blt.n	8000cbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	490c      	ldr	r1, [pc, #48]	; (8000ce0 <__NVIC_SetPriority+0x4c>)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	0112      	lsls	r2, r2, #4
 8000cb4:	b2d2      	uxtb	r2, r2
 8000cb6:	440b      	add	r3, r1
 8000cb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cbc:	e00a      	b.n	8000cd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	4908      	ldr	r1, [pc, #32]	; (8000ce4 <__NVIC_SetPriority+0x50>)
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	f003 030f 	and.w	r3, r3, #15
 8000cca:	3b04      	subs	r3, #4
 8000ccc:	0112      	lsls	r2, r2, #4
 8000cce:	b2d2      	uxtb	r2, r2
 8000cd0:	440b      	add	r3, r1
 8000cd2:	761a      	strb	r2, [r3, #24]
}
 8000cd4:	bf00      	nop
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bc80      	pop	{r7}
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	e000e100 	.word	0xe000e100
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b089      	sub	sp, #36	; 0x24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	f003 0307 	and.w	r3, r3, #7
 8000cfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	f1c3 0307 	rsb	r3, r3, #7
 8000d02:	2b04      	cmp	r3, #4
 8000d04:	bf28      	it	cs
 8000d06:	2304      	movcs	r3, #4
 8000d08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	2b06      	cmp	r3, #6
 8000d10:	d902      	bls.n	8000d18 <NVIC_EncodePriority+0x30>
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	3b03      	subs	r3, #3
 8000d16:	e000      	b.n	8000d1a <NVIC_EncodePriority+0x32>
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	43da      	mvns	r2, r3
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	401a      	ands	r2, r3
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d30:	f04f 31ff 	mov.w	r1, #4294967295
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3a:	43d9      	mvns	r1, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d40:	4313      	orrs	r3, r2
         );
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3724      	adds	r7, #36	; 0x24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bc80      	pop	{r7}
 8000d4a:	4770      	bx	lr

08000d4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3b01      	subs	r3, #1
 8000d58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d5c:	d301      	bcc.n	8000d62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e00f      	b.n	8000d82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d62:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <SysTick_Config+0x40>)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3b01      	subs	r3, #1
 8000d68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d6a:	210f      	movs	r1, #15
 8000d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d70:	f7ff ff90 	bl	8000c94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d74:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <SysTick_Config+0x40>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d7a:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <SysTick_Config+0x40>)
 8000d7c:	2207      	movs	r2, #7
 8000d7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	e000e010 	.word	0xe000e010

08000d90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f7ff ff49 	bl	8000c30 <__NVIC_SetPriorityGrouping>
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b086      	sub	sp, #24
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	4603      	mov	r3, r0
 8000dae:	60b9      	str	r1, [r7, #8]
 8000db0:	607a      	str	r2, [r7, #4]
 8000db2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000db8:	f7ff ff5e 	bl	8000c78 <__NVIC_GetPriorityGrouping>
 8000dbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	68b9      	ldr	r1, [r7, #8]
 8000dc2:	6978      	ldr	r0, [r7, #20]
 8000dc4:	f7ff ff90 	bl	8000ce8 <NVIC_EncodePriority>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dce:	4611      	mov	r1, r2
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ff5f 	bl	8000c94 <__NVIC_SetPriority>
}
 8000dd6:	bf00      	nop
 8000dd8:	3718      	adds	r7, #24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff ffb0 	bl	8000d4c <SysTick_Config>
 8000dec:	4603      	mov	r3, r0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
	...

08000df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b08b      	sub	sp, #44	; 0x2c
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e02:	2300      	movs	r3, #0
 8000e04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e06:	2300      	movs	r3, #0
 8000e08:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e0a:	e169      	b.n	80010e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	69fa      	ldr	r2, [r7, #28]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	f040 8158 	bne.w	80010da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	4a9a      	ldr	r2, [pc, #616]	; (8001098 <HAL_GPIO_Init+0x2a0>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d05e      	beq.n	8000ef2 <HAL_GPIO_Init+0xfa>
 8000e34:	4a98      	ldr	r2, [pc, #608]	; (8001098 <HAL_GPIO_Init+0x2a0>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d875      	bhi.n	8000f26 <HAL_GPIO_Init+0x12e>
 8000e3a:	4a98      	ldr	r2, [pc, #608]	; (800109c <HAL_GPIO_Init+0x2a4>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d058      	beq.n	8000ef2 <HAL_GPIO_Init+0xfa>
 8000e40:	4a96      	ldr	r2, [pc, #600]	; (800109c <HAL_GPIO_Init+0x2a4>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d86f      	bhi.n	8000f26 <HAL_GPIO_Init+0x12e>
 8000e46:	4a96      	ldr	r2, [pc, #600]	; (80010a0 <HAL_GPIO_Init+0x2a8>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d052      	beq.n	8000ef2 <HAL_GPIO_Init+0xfa>
 8000e4c:	4a94      	ldr	r2, [pc, #592]	; (80010a0 <HAL_GPIO_Init+0x2a8>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d869      	bhi.n	8000f26 <HAL_GPIO_Init+0x12e>
 8000e52:	4a94      	ldr	r2, [pc, #592]	; (80010a4 <HAL_GPIO_Init+0x2ac>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d04c      	beq.n	8000ef2 <HAL_GPIO_Init+0xfa>
 8000e58:	4a92      	ldr	r2, [pc, #584]	; (80010a4 <HAL_GPIO_Init+0x2ac>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d863      	bhi.n	8000f26 <HAL_GPIO_Init+0x12e>
 8000e5e:	4a92      	ldr	r2, [pc, #584]	; (80010a8 <HAL_GPIO_Init+0x2b0>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d046      	beq.n	8000ef2 <HAL_GPIO_Init+0xfa>
 8000e64:	4a90      	ldr	r2, [pc, #576]	; (80010a8 <HAL_GPIO_Init+0x2b0>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d85d      	bhi.n	8000f26 <HAL_GPIO_Init+0x12e>
 8000e6a:	2b12      	cmp	r3, #18
 8000e6c:	d82a      	bhi.n	8000ec4 <HAL_GPIO_Init+0xcc>
 8000e6e:	2b12      	cmp	r3, #18
 8000e70:	d859      	bhi.n	8000f26 <HAL_GPIO_Init+0x12e>
 8000e72:	a201      	add	r2, pc, #4	; (adr r2, 8000e78 <HAL_GPIO_Init+0x80>)
 8000e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e78:	08000ef3 	.word	0x08000ef3
 8000e7c:	08000ecd 	.word	0x08000ecd
 8000e80:	08000edf 	.word	0x08000edf
 8000e84:	08000f21 	.word	0x08000f21
 8000e88:	08000f27 	.word	0x08000f27
 8000e8c:	08000f27 	.word	0x08000f27
 8000e90:	08000f27 	.word	0x08000f27
 8000e94:	08000f27 	.word	0x08000f27
 8000e98:	08000f27 	.word	0x08000f27
 8000e9c:	08000f27 	.word	0x08000f27
 8000ea0:	08000f27 	.word	0x08000f27
 8000ea4:	08000f27 	.word	0x08000f27
 8000ea8:	08000f27 	.word	0x08000f27
 8000eac:	08000f27 	.word	0x08000f27
 8000eb0:	08000f27 	.word	0x08000f27
 8000eb4:	08000f27 	.word	0x08000f27
 8000eb8:	08000f27 	.word	0x08000f27
 8000ebc:	08000ed5 	.word	0x08000ed5
 8000ec0:	08000ee9 	.word	0x08000ee9
 8000ec4:	4a79      	ldr	r2, [pc, #484]	; (80010ac <HAL_GPIO_Init+0x2b4>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d013      	beq.n	8000ef2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000eca:	e02c      	b.n	8000f26 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	623b      	str	r3, [r7, #32]
          break;
 8000ed2:	e029      	b.n	8000f28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	3304      	adds	r3, #4
 8000eda:	623b      	str	r3, [r7, #32]
          break;
 8000edc:	e024      	b.n	8000f28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	68db      	ldr	r3, [r3, #12]
 8000ee2:	3308      	adds	r3, #8
 8000ee4:	623b      	str	r3, [r7, #32]
          break;
 8000ee6:	e01f      	b.n	8000f28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	330c      	adds	r3, #12
 8000eee:	623b      	str	r3, [r7, #32]
          break;
 8000ef0:	e01a      	b.n	8000f28 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d102      	bne.n	8000f00 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000efa:	2304      	movs	r3, #4
 8000efc:	623b      	str	r3, [r7, #32]
          break;
 8000efe:	e013      	b.n	8000f28 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d105      	bne.n	8000f14 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f08:	2308      	movs	r3, #8
 8000f0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	69fa      	ldr	r2, [r7, #28]
 8000f10:	611a      	str	r2, [r3, #16]
          break;
 8000f12:	e009      	b.n	8000f28 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f14:	2308      	movs	r3, #8
 8000f16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	69fa      	ldr	r2, [r7, #28]
 8000f1c:	615a      	str	r2, [r3, #20]
          break;
 8000f1e:	e003      	b.n	8000f28 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f20:	2300      	movs	r3, #0
 8000f22:	623b      	str	r3, [r7, #32]
          break;
 8000f24:	e000      	b.n	8000f28 <HAL_GPIO_Init+0x130>
          break;
 8000f26:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	2bff      	cmp	r3, #255	; 0xff
 8000f2c:	d801      	bhi.n	8000f32 <HAL_GPIO_Init+0x13a>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	e001      	b.n	8000f36 <HAL_GPIO_Init+0x13e>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	3304      	adds	r3, #4
 8000f36:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	2bff      	cmp	r3, #255	; 0xff
 8000f3c:	d802      	bhi.n	8000f44 <HAL_GPIO_Init+0x14c>
 8000f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	e002      	b.n	8000f4a <HAL_GPIO_Init+0x152>
 8000f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f46:	3b08      	subs	r3, #8
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	210f      	movs	r1, #15
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	fa01 f303 	lsl.w	r3, r1, r3
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	401a      	ands	r2, r3
 8000f5c:	6a39      	ldr	r1, [r7, #32]
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	fa01 f303 	lsl.w	r3, r1, r3
 8000f64:	431a      	orrs	r2, r3
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	f000 80b1 	beq.w	80010da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f78:	4b4d      	ldr	r3, [pc, #308]	; (80010b0 <HAL_GPIO_Init+0x2b8>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	4a4c      	ldr	r2, [pc, #304]	; (80010b0 <HAL_GPIO_Init+0x2b8>)
 8000f7e:	f043 0301 	orr.w	r3, r3, #1
 8000f82:	6193      	str	r3, [r2, #24]
 8000f84:	4b4a      	ldr	r3, [pc, #296]	; (80010b0 <HAL_GPIO_Init+0x2b8>)
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	f003 0301 	and.w	r3, r3, #1
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f90:	4a48      	ldr	r2, [pc, #288]	; (80010b4 <HAL_GPIO_Init+0x2bc>)
 8000f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f94:	089b      	lsrs	r3, r3, #2
 8000f96:	3302      	adds	r3, #2
 8000f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f9c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa0:	f003 0303 	and.w	r3, r3, #3
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	220f      	movs	r2, #15
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	68fa      	ldr	r2, [r7, #12]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4a40      	ldr	r2, [pc, #256]	; (80010b8 <HAL_GPIO_Init+0x2c0>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d013      	beq.n	8000fe4 <HAL_GPIO_Init+0x1ec>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4a3f      	ldr	r2, [pc, #252]	; (80010bc <HAL_GPIO_Init+0x2c4>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d00d      	beq.n	8000fe0 <HAL_GPIO_Init+0x1e8>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a3e      	ldr	r2, [pc, #248]	; (80010c0 <HAL_GPIO_Init+0x2c8>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d007      	beq.n	8000fdc <HAL_GPIO_Init+0x1e4>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4a3d      	ldr	r2, [pc, #244]	; (80010c4 <HAL_GPIO_Init+0x2cc>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d101      	bne.n	8000fd8 <HAL_GPIO_Init+0x1e0>
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	e006      	b.n	8000fe6 <HAL_GPIO_Init+0x1ee>
 8000fd8:	2304      	movs	r3, #4
 8000fda:	e004      	b.n	8000fe6 <HAL_GPIO_Init+0x1ee>
 8000fdc:	2302      	movs	r3, #2
 8000fde:	e002      	b.n	8000fe6 <HAL_GPIO_Init+0x1ee>
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e000      	b.n	8000fe6 <HAL_GPIO_Init+0x1ee>
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fe8:	f002 0203 	and.w	r2, r2, #3
 8000fec:	0092      	lsls	r2, r2, #2
 8000fee:	4093      	lsls	r3, r2
 8000ff0:	68fa      	ldr	r2, [r7, #12]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ff6:	492f      	ldr	r1, [pc, #188]	; (80010b4 <HAL_GPIO_Init+0x2bc>)
 8000ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffa:	089b      	lsrs	r3, r3, #2
 8000ffc:	3302      	adds	r3, #2
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800100c:	2b00      	cmp	r3, #0
 800100e:	d006      	beq.n	800101e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001010:	4b2d      	ldr	r3, [pc, #180]	; (80010c8 <HAL_GPIO_Init+0x2d0>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	492c      	ldr	r1, [pc, #176]	; (80010c8 <HAL_GPIO_Init+0x2d0>)
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	4313      	orrs	r3, r2
 800101a:	600b      	str	r3, [r1, #0]
 800101c:	e006      	b.n	800102c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800101e:	4b2a      	ldr	r3, [pc, #168]	; (80010c8 <HAL_GPIO_Init+0x2d0>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	43db      	mvns	r3, r3
 8001026:	4928      	ldr	r1, [pc, #160]	; (80010c8 <HAL_GPIO_Init+0x2d0>)
 8001028:	4013      	ands	r3, r2
 800102a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001034:	2b00      	cmp	r3, #0
 8001036:	d006      	beq.n	8001046 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001038:	4b23      	ldr	r3, [pc, #140]	; (80010c8 <HAL_GPIO_Init+0x2d0>)
 800103a:	685a      	ldr	r2, [r3, #4]
 800103c:	4922      	ldr	r1, [pc, #136]	; (80010c8 <HAL_GPIO_Init+0x2d0>)
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	4313      	orrs	r3, r2
 8001042:	604b      	str	r3, [r1, #4]
 8001044:	e006      	b.n	8001054 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001046:	4b20      	ldr	r3, [pc, #128]	; (80010c8 <HAL_GPIO_Init+0x2d0>)
 8001048:	685a      	ldr	r2, [r3, #4]
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	43db      	mvns	r3, r3
 800104e:	491e      	ldr	r1, [pc, #120]	; (80010c8 <HAL_GPIO_Init+0x2d0>)
 8001050:	4013      	ands	r3, r2
 8001052:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800105c:	2b00      	cmp	r3, #0
 800105e:	d006      	beq.n	800106e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001060:	4b19      	ldr	r3, [pc, #100]	; (80010c8 <HAL_GPIO_Init+0x2d0>)
 8001062:	689a      	ldr	r2, [r3, #8]
 8001064:	4918      	ldr	r1, [pc, #96]	; (80010c8 <HAL_GPIO_Init+0x2d0>)
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	4313      	orrs	r3, r2
 800106a:	608b      	str	r3, [r1, #8]
 800106c:	e006      	b.n	800107c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800106e:	4b16      	ldr	r3, [pc, #88]	; (80010c8 <HAL_GPIO_Init+0x2d0>)
 8001070:	689a      	ldr	r2, [r3, #8]
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	43db      	mvns	r3, r3
 8001076:	4914      	ldr	r1, [pc, #80]	; (80010c8 <HAL_GPIO_Init+0x2d0>)
 8001078:	4013      	ands	r3, r2
 800107a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d021      	beq.n	80010cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001088:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <HAL_GPIO_Init+0x2d0>)
 800108a:	68da      	ldr	r2, [r3, #12]
 800108c:	490e      	ldr	r1, [pc, #56]	; (80010c8 <HAL_GPIO_Init+0x2d0>)
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	4313      	orrs	r3, r2
 8001092:	60cb      	str	r3, [r1, #12]
 8001094:	e021      	b.n	80010da <HAL_GPIO_Init+0x2e2>
 8001096:	bf00      	nop
 8001098:	10320000 	.word	0x10320000
 800109c:	10310000 	.word	0x10310000
 80010a0:	10220000 	.word	0x10220000
 80010a4:	10210000 	.word	0x10210000
 80010a8:	10120000 	.word	0x10120000
 80010ac:	10110000 	.word	0x10110000
 80010b0:	40021000 	.word	0x40021000
 80010b4:	40010000 	.word	0x40010000
 80010b8:	40010800 	.word	0x40010800
 80010bc:	40010c00 	.word	0x40010c00
 80010c0:	40011000 	.word	0x40011000
 80010c4:	40011400 	.word	0x40011400
 80010c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010cc:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <HAL_GPIO_Init+0x304>)
 80010ce:	68da      	ldr	r2, [r3, #12]
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	43db      	mvns	r3, r3
 80010d4:	4909      	ldr	r1, [pc, #36]	; (80010fc <HAL_GPIO_Init+0x304>)
 80010d6:	4013      	ands	r3, r2
 80010d8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80010da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010dc:	3301      	adds	r3, #1
 80010de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e6:	fa22 f303 	lsr.w	r3, r2, r3
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	f47f ae8e 	bne.w	8000e0c <HAL_GPIO_Init+0x14>
  }
}
 80010f0:	bf00      	nop
 80010f2:	bf00      	nop
 80010f4:	372c      	adds	r7, #44	; 0x2c
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr
 80010fc:	40010400 	.word	0x40010400

08001100 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	460b      	mov	r3, r1
 800110a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	689a      	ldr	r2, [r3, #8]
 8001110:	887b      	ldrh	r3, [r7, #2]
 8001112:	4013      	ands	r3, r2
 8001114:	2b00      	cmp	r3, #0
 8001116:	d002      	beq.n	800111e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001118:	2301      	movs	r3, #1
 800111a:	73fb      	strb	r3, [r7, #15]
 800111c:	e001      	b.n	8001122 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800111e:	2300      	movs	r3, #0
 8001120:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001122:	7bfb      	ldrb	r3, [r7, #15]
}
 8001124:	4618      	mov	r0, r3
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	bc80      	pop	{r7}
 800112c:	4770      	bx	lr

0800112e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800112e:	b480      	push	{r7}
 8001130:	b083      	sub	sp, #12
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
 8001136:	460b      	mov	r3, r1
 8001138:	807b      	strh	r3, [r7, #2]
 800113a:	4613      	mov	r3, r2
 800113c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800113e:	787b      	ldrb	r3, [r7, #1]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d003      	beq.n	800114c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001144:	887a      	ldrh	r2, [r7, #2]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800114a:	e003      	b.n	8001154 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800114c:	887b      	ldrh	r3, [r7, #2]
 800114e:	041a      	lsls	r2, r3, #16
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	611a      	str	r2, [r3, #16]
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	bc80      	pop	{r7}
 800115c:	4770      	bx	lr
	...

08001160 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d101      	bne.n	8001172 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e12b      	b.n	80013ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001178:	b2db      	uxtb	r3, r3
 800117a:	2b00      	cmp	r3, #0
 800117c:	d106      	bne.n	800118c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff fbf8 	bl	800097c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2224      	movs	r2, #36	; 0x24
 8001190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f022 0201 	bic.w	r2, r2, #1
 80011a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80011c4:	f000 ffea 	bl	800219c <HAL_RCC_GetPCLK1Freq>
 80011c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	4a81      	ldr	r2, [pc, #516]	; (80013d4 <HAL_I2C_Init+0x274>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d807      	bhi.n	80011e4 <HAL_I2C_Init+0x84>
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	4a80      	ldr	r2, [pc, #512]	; (80013d8 <HAL_I2C_Init+0x278>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	bf94      	ite	ls
 80011dc:	2301      	movls	r3, #1
 80011de:	2300      	movhi	r3, #0
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	e006      	b.n	80011f2 <HAL_I2C_Init+0x92>
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	4a7d      	ldr	r2, [pc, #500]	; (80013dc <HAL_I2C_Init+0x27c>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	bf94      	ite	ls
 80011ec:	2301      	movls	r3, #1
 80011ee:	2300      	movhi	r3, #0
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e0e7      	b.n	80013ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	4a78      	ldr	r2, [pc, #480]	; (80013e0 <HAL_I2C_Init+0x280>)
 80011fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001202:	0c9b      	lsrs	r3, r3, #18
 8001204:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	68ba      	ldr	r2, [r7, #8]
 8001216:	430a      	orrs	r2, r1
 8001218:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	6a1b      	ldr	r3, [r3, #32]
 8001220:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	4a6a      	ldr	r2, [pc, #424]	; (80013d4 <HAL_I2C_Init+0x274>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d802      	bhi.n	8001234 <HAL_I2C_Init+0xd4>
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	3301      	adds	r3, #1
 8001232:	e009      	b.n	8001248 <HAL_I2C_Init+0xe8>
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800123a:	fb02 f303 	mul.w	r3, r2, r3
 800123e:	4a69      	ldr	r2, [pc, #420]	; (80013e4 <HAL_I2C_Init+0x284>)
 8001240:	fba2 2303 	umull	r2, r3, r2, r3
 8001244:	099b      	lsrs	r3, r3, #6
 8001246:	3301      	adds	r3, #1
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	6812      	ldr	r2, [r2, #0]
 800124c:	430b      	orrs	r3, r1
 800124e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800125a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	495c      	ldr	r1, [pc, #368]	; (80013d4 <HAL_I2C_Init+0x274>)
 8001264:	428b      	cmp	r3, r1
 8001266:	d819      	bhi.n	800129c <HAL_I2C_Init+0x13c>
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	1e59      	subs	r1, r3, #1
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	fbb1 f3f3 	udiv	r3, r1, r3
 8001276:	1c59      	adds	r1, r3, #1
 8001278:	f640 73fc 	movw	r3, #4092	; 0xffc
 800127c:	400b      	ands	r3, r1
 800127e:	2b00      	cmp	r3, #0
 8001280:	d00a      	beq.n	8001298 <HAL_I2C_Init+0x138>
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	1e59      	subs	r1, r3, #1
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001290:	3301      	adds	r3, #1
 8001292:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001296:	e051      	b.n	800133c <HAL_I2C_Init+0x1dc>
 8001298:	2304      	movs	r3, #4
 800129a:	e04f      	b.n	800133c <HAL_I2C_Init+0x1dc>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d111      	bne.n	80012c8 <HAL_I2C_Init+0x168>
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	1e58      	subs	r0, r3, #1
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6859      	ldr	r1, [r3, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	440b      	add	r3, r1
 80012b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80012b6:	3301      	adds	r3, #1
 80012b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012bc:	2b00      	cmp	r3, #0
 80012be:	bf0c      	ite	eq
 80012c0:	2301      	moveq	r3, #1
 80012c2:	2300      	movne	r3, #0
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	e012      	b.n	80012ee <HAL_I2C_Init+0x18e>
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	1e58      	subs	r0, r3, #1
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6859      	ldr	r1, [r3, #4]
 80012d0:	460b      	mov	r3, r1
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	440b      	add	r3, r1
 80012d6:	0099      	lsls	r1, r3, #2
 80012d8:	440b      	add	r3, r1
 80012da:	fbb0 f3f3 	udiv	r3, r0, r3
 80012de:	3301      	adds	r3, #1
 80012e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	bf0c      	ite	eq
 80012e8:	2301      	moveq	r3, #1
 80012ea:	2300      	movne	r3, #0
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <HAL_I2C_Init+0x196>
 80012f2:	2301      	movs	r3, #1
 80012f4:	e022      	b.n	800133c <HAL_I2C_Init+0x1dc>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d10e      	bne.n	800131c <HAL_I2C_Init+0x1bc>
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	1e58      	subs	r0, r3, #1
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6859      	ldr	r1, [r3, #4]
 8001306:	460b      	mov	r3, r1
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	440b      	add	r3, r1
 800130c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001310:	3301      	adds	r3, #1
 8001312:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001316:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800131a:	e00f      	b.n	800133c <HAL_I2C_Init+0x1dc>
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	1e58      	subs	r0, r3, #1
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6859      	ldr	r1, [r3, #4]
 8001324:	460b      	mov	r3, r1
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	440b      	add	r3, r1
 800132a:	0099      	lsls	r1, r3, #2
 800132c:	440b      	add	r3, r1
 800132e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001332:	3301      	adds	r3, #1
 8001334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001338:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800133c:	6879      	ldr	r1, [r7, #4]
 800133e:	6809      	ldr	r1, [r1, #0]
 8001340:	4313      	orrs	r3, r2
 8001342:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	69da      	ldr	r2, [r3, #28]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a1b      	ldr	r3, [r3, #32]
 8001356:	431a      	orrs	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	430a      	orrs	r2, r1
 800135e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800136a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	6911      	ldr	r1, [r2, #16]
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	68d2      	ldr	r2, [r2, #12]
 8001376:	4311      	orrs	r1, r2
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	6812      	ldr	r2, [r2, #0]
 800137c:	430b      	orrs	r3, r1
 800137e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	695a      	ldr	r2, [r3, #20]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	431a      	orrs	r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	430a      	orrs	r2, r1
 800139a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f042 0201 	orr.w	r2, r2, #1
 80013aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2220      	movs	r2, #32
 80013b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	000186a0 	.word	0x000186a0
 80013d8:	001e847f 	.word	0x001e847f
 80013dc:	003d08ff 	.word	0x003d08ff
 80013e0:	431bde83 	.word	0x431bde83
 80013e4:	10624dd3 	.word	0x10624dd3

080013e8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b088      	sub	sp, #32
 80013ec:	af02      	add	r7, sp, #8
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	607a      	str	r2, [r7, #4]
 80013f2:	461a      	mov	r2, r3
 80013f4:	460b      	mov	r3, r1
 80013f6:	817b      	strh	r3, [r7, #10]
 80013f8:	4613      	mov	r3, r2
 80013fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80013fc:	f7ff fbea 	bl	8000bd4 <HAL_GetTick>
 8001400:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001408:	b2db      	uxtb	r3, r3
 800140a:	2b20      	cmp	r3, #32
 800140c:	f040 80e0 	bne.w	80015d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	2319      	movs	r3, #25
 8001416:	2201      	movs	r2, #1
 8001418:	4970      	ldr	r1, [pc, #448]	; (80015dc <HAL_I2C_Master_Transmit+0x1f4>)
 800141a:	68f8      	ldr	r0, [r7, #12]
 800141c:	f000 f964 	bl	80016e8 <I2C_WaitOnFlagUntilTimeout>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001426:	2302      	movs	r3, #2
 8001428:	e0d3      	b.n	80015d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001430:	2b01      	cmp	r3, #1
 8001432:	d101      	bne.n	8001438 <HAL_I2C_Master_Transmit+0x50>
 8001434:	2302      	movs	r3, #2
 8001436:	e0cc      	b.n	80015d2 <HAL_I2C_Master_Transmit+0x1ea>
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2201      	movs	r2, #1
 800143c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	2b01      	cmp	r3, #1
 800144c:	d007      	beq.n	800145e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f042 0201 	orr.w	r2, r2, #1
 800145c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800146c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2221      	movs	r2, #33	; 0x21
 8001472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2210      	movs	r2, #16
 800147a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2200      	movs	r2, #0
 8001482:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	893a      	ldrh	r2, [r7, #8]
 800148e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001494:	b29a      	uxth	r2, r3
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	4a50      	ldr	r2, [pc, #320]	; (80015e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800149e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80014a0:	8979      	ldrh	r1, [r7, #10]
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	6a3a      	ldr	r2, [r7, #32]
 80014a6:	68f8      	ldr	r0, [r7, #12]
 80014a8:	f000 f89c 	bl	80015e4 <I2C_MasterRequestWrite>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e08d      	b.n	80015d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	695b      	ldr	r3, [r3, #20]
 80014c0:	613b      	str	r3, [r7, #16]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80014cc:	e066      	b.n	800159c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014ce:	697a      	ldr	r2, [r7, #20]
 80014d0:	6a39      	ldr	r1, [r7, #32]
 80014d2:	68f8      	ldr	r0, [r7, #12]
 80014d4:	f000 f9de 	bl	8001894 <I2C_WaitOnTXEFlagUntilTimeout>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d00d      	beq.n	80014fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	2b04      	cmp	r3, #4
 80014e4:	d107      	bne.n	80014f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e06b      	b.n	80015d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fe:	781a      	ldrb	r2, [r3, #0]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150a:	1c5a      	adds	r2, r3, #1
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001514:	b29b      	uxth	r3, r3
 8001516:	3b01      	subs	r3, #1
 8001518:	b29a      	uxth	r2, r3
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001522:	3b01      	subs	r3, #1
 8001524:	b29a      	uxth	r2, r3
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	695b      	ldr	r3, [r3, #20]
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	2b04      	cmp	r3, #4
 8001536:	d11b      	bne.n	8001570 <HAL_I2C_Master_Transmit+0x188>
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800153c:	2b00      	cmp	r3, #0
 800153e:	d017      	beq.n	8001570 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001544:	781a      	ldrb	r2, [r3, #0]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001550:	1c5a      	adds	r2, r3, #1
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800155a:	b29b      	uxth	r3, r3
 800155c:	3b01      	subs	r3, #1
 800155e:	b29a      	uxth	r2, r3
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001568:	3b01      	subs	r3, #1
 800156a:	b29a      	uxth	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001570:	697a      	ldr	r2, [r7, #20]
 8001572:	6a39      	ldr	r1, [r7, #32]
 8001574:	68f8      	ldr	r0, [r7, #12]
 8001576:	f000 f9ce 	bl	8001916 <I2C_WaitOnBTFFlagUntilTimeout>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d00d      	beq.n	800159c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001584:	2b04      	cmp	r3, #4
 8001586:	d107      	bne.n	8001598 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001596:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e01a      	b.n	80015d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d194      	bne.n	80014ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2220      	movs	r2, #32
 80015b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2200      	movs	r2, #0
 80015c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2200      	movs	r2, #0
 80015c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80015cc:	2300      	movs	r3, #0
 80015ce:	e000      	b.n	80015d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80015d0:	2302      	movs	r3, #2
  }
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	00100002 	.word	0x00100002
 80015e0:	ffff0000 	.word	0xffff0000

080015e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b088      	sub	sp, #32
 80015e8:	af02      	add	r7, sp, #8
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	607a      	str	r2, [r7, #4]
 80015ee:	603b      	str	r3, [r7, #0]
 80015f0:	460b      	mov	r3, r1
 80015f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	2b08      	cmp	r3, #8
 80015fe:	d006      	beq.n	800160e <I2C_MasterRequestWrite+0x2a>
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d003      	beq.n	800160e <I2C_MasterRequestWrite+0x2a>
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800160c:	d108      	bne.n	8001620 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	e00b      	b.n	8001638 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001624:	2b12      	cmp	r3, #18
 8001626:	d107      	bne.n	8001638 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001636:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001644:	68f8      	ldr	r0, [r7, #12]
 8001646:	f000 f84f 	bl	80016e8 <I2C_WaitOnFlagUntilTimeout>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d00d      	beq.n	800166c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800165a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800165e:	d103      	bne.n	8001668 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001666:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e035      	b.n	80016d8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	691b      	ldr	r3, [r3, #16]
 8001670:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001674:	d108      	bne.n	8001688 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001676:	897b      	ldrh	r3, [r7, #10]
 8001678:	b2db      	uxtb	r3, r3
 800167a:	461a      	mov	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001684:	611a      	str	r2, [r3, #16]
 8001686:	e01b      	b.n	80016c0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001688:	897b      	ldrh	r3, [r7, #10]
 800168a:	11db      	asrs	r3, r3, #7
 800168c:	b2db      	uxtb	r3, r3
 800168e:	f003 0306 	and.w	r3, r3, #6
 8001692:	b2db      	uxtb	r3, r3
 8001694:	f063 030f 	orn	r3, r3, #15
 8001698:	b2da      	uxtb	r2, r3
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	490e      	ldr	r1, [pc, #56]	; (80016e0 <I2C_MasterRequestWrite+0xfc>)
 80016a6:	68f8      	ldr	r0, [r7, #12]
 80016a8:	f000 f875 	bl	8001796 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e010      	b.n	80016d8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80016b6:	897b      	ldrh	r3, [r7, #10]
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	4907      	ldr	r1, [pc, #28]	; (80016e4 <I2C_MasterRequestWrite+0x100>)
 80016c6:	68f8      	ldr	r0, [r7, #12]
 80016c8:	f000 f865 	bl	8001796 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e000      	b.n	80016d8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80016d6:	2300      	movs	r3, #0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3718      	adds	r7, #24
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	00010008 	.word	0x00010008
 80016e4:	00010002 	.word	0x00010002

080016e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	603b      	str	r3, [r7, #0]
 80016f4:	4613      	mov	r3, r2
 80016f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016f8:	e025      	b.n	8001746 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001700:	d021      	beq.n	8001746 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001702:	f7ff fa67 	bl	8000bd4 <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	683a      	ldr	r2, [r7, #0]
 800170e:	429a      	cmp	r2, r3
 8001710:	d302      	bcc.n	8001718 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d116      	bne.n	8001746 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2200      	movs	r2, #0
 800171c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2220      	movs	r2, #32
 8001722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	f043 0220 	orr.w	r2, r3, #32
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e023      	b.n	800178e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	0c1b      	lsrs	r3, r3, #16
 800174a:	b2db      	uxtb	r3, r3
 800174c:	2b01      	cmp	r3, #1
 800174e:	d10d      	bne.n	800176c <I2C_WaitOnFlagUntilTimeout+0x84>
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	43da      	mvns	r2, r3
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	4013      	ands	r3, r2
 800175c:	b29b      	uxth	r3, r3
 800175e:	2b00      	cmp	r3, #0
 8001760:	bf0c      	ite	eq
 8001762:	2301      	moveq	r3, #1
 8001764:	2300      	movne	r3, #0
 8001766:	b2db      	uxtb	r3, r3
 8001768:	461a      	mov	r2, r3
 800176a:	e00c      	b.n	8001786 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	43da      	mvns	r2, r3
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	4013      	ands	r3, r2
 8001778:	b29b      	uxth	r3, r3
 800177a:	2b00      	cmp	r3, #0
 800177c:	bf0c      	ite	eq
 800177e:	2301      	moveq	r3, #1
 8001780:	2300      	movne	r3, #0
 8001782:	b2db      	uxtb	r3, r3
 8001784:	461a      	mov	r2, r3
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	429a      	cmp	r2, r3
 800178a:	d0b6      	beq.n	80016fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b084      	sub	sp, #16
 800179a:	af00      	add	r7, sp, #0
 800179c:	60f8      	str	r0, [r7, #12]
 800179e:	60b9      	str	r1, [r7, #8]
 80017a0:	607a      	str	r2, [r7, #4]
 80017a2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80017a4:	e051      	b.n	800184a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	695b      	ldr	r3, [r3, #20]
 80017ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017b4:	d123      	bne.n	80017fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017c4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80017ce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2200      	movs	r2, #0
 80017d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2220      	movs	r2, #32
 80017da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2200      	movs	r2, #0
 80017e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	f043 0204 	orr.w	r2, r3, #4
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e046      	b.n	800188c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001804:	d021      	beq.n	800184a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001806:	f7ff f9e5 	bl	8000bd4 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	429a      	cmp	r2, r3
 8001814:	d302      	bcc.n	800181c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d116      	bne.n	800184a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2200      	movs	r2, #0
 8001820:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2220      	movs	r2, #32
 8001826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2200      	movs	r2, #0
 800182e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	f043 0220 	orr.w	r2, r3, #32
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e020      	b.n	800188c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	0c1b      	lsrs	r3, r3, #16
 800184e:	b2db      	uxtb	r3, r3
 8001850:	2b01      	cmp	r3, #1
 8001852:	d10c      	bne.n	800186e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	43da      	mvns	r2, r3
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	4013      	ands	r3, r2
 8001860:	b29b      	uxth	r3, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	bf14      	ite	ne
 8001866:	2301      	movne	r3, #1
 8001868:	2300      	moveq	r3, #0
 800186a:	b2db      	uxtb	r3, r3
 800186c:	e00b      	b.n	8001886 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	43da      	mvns	r2, r3
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	4013      	ands	r3, r2
 800187a:	b29b      	uxth	r3, r3
 800187c:	2b00      	cmp	r3, #0
 800187e:	bf14      	ite	ne
 8001880:	2301      	movne	r3, #1
 8001882:	2300      	moveq	r3, #0
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	d18d      	bne.n	80017a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800188a:	2300      	movs	r3, #0
}
 800188c:	4618      	mov	r0, r3
 800188e:	3710      	adds	r7, #16
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80018a0:	e02d      	b.n	80018fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80018a2:	68f8      	ldr	r0, [r7, #12]
 80018a4:	f000 f878 	bl	8001998 <I2C_IsAcknowledgeFailed>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e02d      	b.n	800190e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b8:	d021      	beq.n	80018fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018ba:	f7ff f98b 	bl	8000bd4 <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	68ba      	ldr	r2, [r7, #8]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d302      	bcc.n	80018d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d116      	bne.n	80018fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2200      	movs	r2, #0
 80018d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2220      	movs	r2, #32
 80018da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	f043 0220 	orr.w	r2, r3, #32
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e007      	b.n	800190e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	695b      	ldr	r3, [r3, #20]
 8001904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001908:	2b80      	cmp	r3, #128	; 0x80
 800190a:	d1ca      	bne.n	80018a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b084      	sub	sp, #16
 800191a:	af00      	add	r7, sp, #0
 800191c:	60f8      	str	r0, [r7, #12]
 800191e:	60b9      	str	r1, [r7, #8]
 8001920:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001922:	e02d      	b.n	8001980 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001924:	68f8      	ldr	r0, [r7, #12]
 8001926:	f000 f837 	bl	8001998 <I2C_IsAcknowledgeFailed>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e02d      	b.n	8001990 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800193a:	d021      	beq.n	8001980 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800193c:	f7ff f94a 	bl	8000bd4 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	68ba      	ldr	r2, [r7, #8]
 8001948:	429a      	cmp	r2, r3
 800194a:	d302      	bcc.n	8001952 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d116      	bne.n	8001980 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2200      	movs	r2, #0
 8001956:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2220      	movs	r2, #32
 800195c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2200      	movs	r2, #0
 8001964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196c:	f043 0220 	orr.w	r2, r3, #32
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e007      	b.n	8001990 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	695b      	ldr	r3, [r3, #20]
 8001986:	f003 0304 	and.w	r3, r3, #4
 800198a:	2b04      	cmp	r3, #4
 800198c:	d1ca      	bne.n	8001924 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800198e:	2300      	movs	r3, #0
}
 8001990:	4618      	mov	r0, r3
 8001992:	3710      	adds	r7, #16
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019ae:	d11b      	bne.n	80019e8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80019b8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2220      	movs	r2, #32
 80019c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d4:	f043 0204 	orr.w	r2, r3, #4
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e000      	b.n	80019ea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr

080019f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e272      	b.n	8001eec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f000 8087 	beq.w	8001b22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a14:	4b92      	ldr	r3, [pc, #584]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f003 030c 	and.w	r3, r3, #12
 8001a1c:	2b04      	cmp	r3, #4
 8001a1e:	d00c      	beq.n	8001a3a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a20:	4b8f      	ldr	r3, [pc, #572]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f003 030c 	and.w	r3, r3, #12
 8001a28:	2b08      	cmp	r3, #8
 8001a2a:	d112      	bne.n	8001a52 <HAL_RCC_OscConfig+0x5e>
 8001a2c:	4b8c      	ldr	r3, [pc, #560]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a38:	d10b      	bne.n	8001a52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a3a:	4b89      	ldr	r3, [pc, #548]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d06c      	beq.n	8001b20 <HAL_RCC_OscConfig+0x12c>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d168      	bne.n	8001b20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e24c      	b.n	8001eec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a5a:	d106      	bne.n	8001a6a <HAL_RCC_OscConfig+0x76>
 8001a5c:	4b80      	ldr	r3, [pc, #512]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a7f      	ldr	r2, [pc, #508]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001a62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a66:	6013      	str	r3, [r2, #0]
 8001a68:	e02e      	b.n	8001ac8 <HAL_RCC_OscConfig+0xd4>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d10c      	bne.n	8001a8c <HAL_RCC_OscConfig+0x98>
 8001a72:	4b7b      	ldr	r3, [pc, #492]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a7a      	ldr	r2, [pc, #488]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001a78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a7c:	6013      	str	r3, [r2, #0]
 8001a7e:	4b78      	ldr	r3, [pc, #480]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a77      	ldr	r2, [pc, #476]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001a84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a88:	6013      	str	r3, [r2, #0]
 8001a8a:	e01d      	b.n	8001ac8 <HAL_RCC_OscConfig+0xd4>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a94:	d10c      	bne.n	8001ab0 <HAL_RCC_OscConfig+0xbc>
 8001a96:	4b72      	ldr	r3, [pc, #456]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a71      	ldr	r2, [pc, #452]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001a9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aa0:	6013      	str	r3, [r2, #0]
 8001aa2:	4b6f      	ldr	r3, [pc, #444]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a6e      	ldr	r2, [pc, #440]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aac:	6013      	str	r3, [r2, #0]
 8001aae:	e00b      	b.n	8001ac8 <HAL_RCC_OscConfig+0xd4>
 8001ab0:	4b6b      	ldr	r3, [pc, #428]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a6a      	ldr	r2, [pc, #424]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001ab6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aba:	6013      	str	r3, [r2, #0]
 8001abc:	4b68      	ldr	r3, [pc, #416]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a67      	ldr	r2, [pc, #412]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001ac2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ac6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d013      	beq.n	8001af8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad0:	f7ff f880 	bl	8000bd4 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ad8:	f7ff f87c 	bl	8000bd4 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b64      	cmp	r3, #100	; 0x64
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e200      	b.n	8001eec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aea:	4b5d      	ldr	r3, [pc, #372]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0f0      	beq.n	8001ad8 <HAL_RCC_OscConfig+0xe4>
 8001af6:	e014      	b.n	8001b22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af8:	f7ff f86c 	bl	8000bd4 <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b00:	f7ff f868 	bl	8000bd4 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b64      	cmp	r3, #100	; 0x64
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e1ec      	b.n	8001eec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b12:	4b53      	ldr	r3, [pc, #332]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1f0      	bne.n	8001b00 <HAL_RCC_OscConfig+0x10c>
 8001b1e:	e000      	b.n	8001b22 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d063      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b2e:	4b4c      	ldr	r3, [pc, #304]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f003 030c 	and.w	r3, r3, #12
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d00b      	beq.n	8001b52 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b3a:	4b49      	ldr	r3, [pc, #292]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f003 030c 	and.w	r3, r3, #12
 8001b42:	2b08      	cmp	r3, #8
 8001b44:	d11c      	bne.n	8001b80 <HAL_RCC_OscConfig+0x18c>
 8001b46:	4b46      	ldr	r3, [pc, #280]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d116      	bne.n	8001b80 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b52:	4b43      	ldr	r3, [pc, #268]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d005      	beq.n	8001b6a <HAL_RCC_OscConfig+0x176>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d001      	beq.n	8001b6a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e1c0      	b.n	8001eec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b6a:	4b3d      	ldr	r3, [pc, #244]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	695b      	ldr	r3, [r3, #20]
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	4939      	ldr	r1, [pc, #228]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b7e:	e03a      	b.n	8001bf6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d020      	beq.n	8001bca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b88:	4b36      	ldr	r3, [pc, #216]	; (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8e:	f7ff f821 	bl	8000bd4 <HAL_GetTick>
 8001b92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b94:	e008      	b.n	8001ba8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b96:	f7ff f81d 	bl	8000bd4 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e1a1      	b.n	8001eec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba8:	4b2d      	ldr	r3, [pc, #180]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d0f0      	beq.n	8001b96 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bb4:	4b2a      	ldr	r3, [pc, #168]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	695b      	ldr	r3, [r3, #20]
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	4927      	ldr	r1, [pc, #156]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	600b      	str	r3, [r1, #0]
 8001bc8:	e015      	b.n	8001bf6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bca:	4b26      	ldr	r3, [pc, #152]	; (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd0:	f7ff f800 	bl	8000bd4 <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bd8:	f7fe fffc 	bl	8000bd4 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e180      	b.n	8001eec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bea:	4b1d      	ldr	r3, [pc, #116]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1f0      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0308 	and.w	r3, r3, #8
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d03a      	beq.n	8001c78 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d019      	beq.n	8001c3e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c0a:	4b17      	ldr	r3, [pc, #92]	; (8001c68 <HAL_RCC_OscConfig+0x274>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c10:	f7fe ffe0 	bl	8000bd4 <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c18:	f7fe ffdc 	bl	8000bd4 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e160      	b.n	8001eec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c2a:	4b0d      	ldr	r3, [pc, #52]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d0f0      	beq.n	8001c18 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c36:	2001      	movs	r0, #1
 8001c38:	f000 fac4 	bl	80021c4 <RCC_Delay>
 8001c3c:	e01c      	b.n	8001c78 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c3e:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <HAL_RCC_OscConfig+0x274>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c44:	f7fe ffc6 	bl	8000bd4 <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c4a:	e00f      	b.n	8001c6c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c4c:	f7fe ffc2 	bl	8000bd4 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d908      	bls.n	8001c6c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e146      	b.n	8001eec <HAL_RCC_OscConfig+0x4f8>
 8001c5e:	bf00      	nop
 8001c60:	40021000 	.word	0x40021000
 8001c64:	42420000 	.word	0x42420000
 8001c68:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c6c:	4b92      	ldr	r3, [pc, #584]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1e9      	bne.n	8001c4c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0304 	and.w	r3, r3, #4
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f000 80a6 	beq.w	8001dd2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c86:	2300      	movs	r3, #0
 8001c88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c8a:	4b8b      	ldr	r3, [pc, #556]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d10d      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c96:	4b88      	ldr	r3, [pc, #544]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	4a87      	ldr	r2, [pc, #540]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca0:	61d3      	str	r3, [r2, #28]
 8001ca2:	4b85      	ldr	r3, [pc, #532]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb2:	4b82      	ldr	r3, [pc, #520]	; (8001ebc <HAL_RCC_OscConfig+0x4c8>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d118      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cbe:	4b7f      	ldr	r3, [pc, #508]	; (8001ebc <HAL_RCC_OscConfig+0x4c8>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a7e      	ldr	r2, [pc, #504]	; (8001ebc <HAL_RCC_OscConfig+0x4c8>)
 8001cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cca:	f7fe ff83 	bl	8000bd4 <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cd2:	f7fe ff7f 	bl	8000bd4 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b64      	cmp	r3, #100	; 0x64
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e103      	b.n	8001eec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce4:	4b75      	ldr	r3, [pc, #468]	; (8001ebc <HAL_RCC_OscConfig+0x4c8>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0f0      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d106      	bne.n	8001d06 <HAL_RCC_OscConfig+0x312>
 8001cf8:	4b6f      	ldr	r3, [pc, #444]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	4a6e      	ldr	r2, [pc, #440]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001cfe:	f043 0301 	orr.w	r3, r3, #1
 8001d02:	6213      	str	r3, [r2, #32]
 8001d04:	e02d      	b.n	8001d62 <HAL_RCC_OscConfig+0x36e>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d10c      	bne.n	8001d28 <HAL_RCC_OscConfig+0x334>
 8001d0e:	4b6a      	ldr	r3, [pc, #424]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001d10:	6a1b      	ldr	r3, [r3, #32]
 8001d12:	4a69      	ldr	r2, [pc, #420]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001d14:	f023 0301 	bic.w	r3, r3, #1
 8001d18:	6213      	str	r3, [r2, #32]
 8001d1a:	4b67      	ldr	r3, [pc, #412]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001d1c:	6a1b      	ldr	r3, [r3, #32]
 8001d1e:	4a66      	ldr	r2, [pc, #408]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001d20:	f023 0304 	bic.w	r3, r3, #4
 8001d24:	6213      	str	r3, [r2, #32]
 8001d26:	e01c      	b.n	8001d62 <HAL_RCC_OscConfig+0x36e>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	2b05      	cmp	r3, #5
 8001d2e:	d10c      	bne.n	8001d4a <HAL_RCC_OscConfig+0x356>
 8001d30:	4b61      	ldr	r3, [pc, #388]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001d32:	6a1b      	ldr	r3, [r3, #32]
 8001d34:	4a60      	ldr	r2, [pc, #384]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001d36:	f043 0304 	orr.w	r3, r3, #4
 8001d3a:	6213      	str	r3, [r2, #32]
 8001d3c:	4b5e      	ldr	r3, [pc, #376]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	4a5d      	ldr	r2, [pc, #372]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001d42:	f043 0301 	orr.w	r3, r3, #1
 8001d46:	6213      	str	r3, [r2, #32]
 8001d48:	e00b      	b.n	8001d62 <HAL_RCC_OscConfig+0x36e>
 8001d4a:	4b5b      	ldr	r3, [pc, #364]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001d4c:	6a1b      	ldr	r3, [r3, #32]
 8001d4e:	4a5a      	ldr	r2, [pc, #360]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001d50:	f023 0301 	bic.w	r3, r3, #1
 8001d54:	6213      	str	r3, [r2, #32]
 8001d56:	4b58      	ldr	r3, [pc, #352]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001d58:	6a1b      	ldr	r3, [r3, #32]
 8001d5a:	4a57      	ldr	r2, [pc, #348]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001d5c:	f023 0304 	bic.w	r3, r3, #4
 8001d60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d015      	beq.n	8001d96 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d6a:	f7fe ff33 	bl	8000bd4 <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d70:	e00a      	b.n	8001d88 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d72:	f7fe ff2f 	bl	8000bd4 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e0b1      	b.n	8001eec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d88:	4b4b      	ldr	r3, [pc, #300]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001d8a:	6a1b      	ldr	r3, [r3, #32]
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0ee      	beq.n	8001d72 <HAL_RCC_OscConfig+0x37e>
 8001d94:	e014      	b.n	8001dc0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d96:	f7fe ff1d 	bl	8000bd4 <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d9c:	e00a      	b.n	8001db4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d9e:	f7fe ff19 	bl	8000bd4 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e09b      	b.n	8001eec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001db4:	4b40      	ldr	r3, [pc, #256]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001db6:	6a1b      	ldr	r3, [r3, #32]
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1ee      	bne.n	8001d9e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001dc0:	7dfb      	ldrb	r3, [r7, #23]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d105      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dc6:	4b3c      	ldr	r3, [pc, #240]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	4a3b      	ldr	r2, [pc, #236]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001dcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dd0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f000 8087 	beq.w	8001eea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ddc:	4b36      	ldr	r3, [pc, #216]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f003 030c 	and.w	r3, r3, #12
 8001de4:	2b08      	cmp	r3, #8
 8001de6:	d061      	beq.n	8001eac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	69db      	ldr	r3, [r3, #28]
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d146      	bne.n	8001e7e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001df0:	4b33      	ldr	r3, [pc, #204]	; (8001ec0 <HAL_RCC_OscConfig+0x4cc>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df6:	f7fe feed 	bl	8000bd4 <HAL_GetTick>
 8001dfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dfc:	e008      	b.n	8001e10 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dfe:	f7fe fee9 	bl	8000bd4 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e06d      	b.n	8001eec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e10:	4b29      	ldr	r3, [pc, #164]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1f0      	bne.n	8001dfe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a1b      	ldr	r3, [r3, #32]
 8001e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e24:	d108      	bne.n	8001e38 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e26:	4b24      	ldr	r3, [pc, #144]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	4921      	ldr	r1, [pc, #132]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001e34:	4313      	orrs	r3, r2
 8001e36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e38:	4b1f      	ldr	r3, [pc, #124]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a19      	ldr	r1, [r3, #32]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e48:	430b      	orrs	r3, r1
 8001e4a:	491b      	ldr	r1, [pc, #108]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e50:	4b1b      	ldr	r3, [pc, #108]	; (8001ec0 <HAL_RCC_OscConfig+0x4cc>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e56:	f7fe febd 	bl	8000bd4 <HAL_GetTick>
 8001e5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e5c:	e008      	b.n	8001e70 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e5e:	f7fe feb9 	bl	8000bd4 <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e03d      	b.n	8001eec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e70:	4b11      	ldr	r3, [pc, #68]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d0f0      	beq.n	8001e5e <HAL_RCC_OscConfig+0x46a>
 8001e7c:	e035      	b.n	8001eea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e7e:	4b10      	ldr	r3, [pc, #64]	; (8001ec0 <HAL_RCC_OscConfig+0x4cc>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e84:	f7fe fea6 	bl	8000bd4 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e8c:	f7fe fea2 	bl	8000bd4 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e026      	b.n	8001eec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e9e:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1f0      	bne.n	8001e8c <HAL_RCC_OscConfig+0x498>
 8001eaa:	e01e      	b.n	8001eea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	69db      	ldr	r3, [r3, #28]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d107      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e019      	b.n	8001eec <HAL_RCC_OscConfig+0x4f8>
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	40007000 	.word	0x40007000
 8001ec0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ec4:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <HAL_RCC_OscConfig+0x500>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d106      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d001      	beq.n	8001eea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e000      	b.n	8001eec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3718      	adds	r7, #24
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40021000 	.word	0x40021000

08001ef8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d101      	bne.n	8001f0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e0d0      	b.n	80020ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f0c:	4b6a      	ldr	r3, [pc, #424]	; (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d910      	bls.n	8001f3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1a:	4b67      	ldr	r3, [pc, #412]	; (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f023 0207 	bic.w	r2, r3, #7
 8001f22:	4965      	ldr	r1, [pc, #404]	; (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f2a:	4b63      	ldr	r3, [pc, #396]	; (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d001      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e0b8      	b.n	80020ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d020      	beq.n	8001f8a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0304 	and.w	r3, r3, #4
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d005      	beq.n	8001f60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f54:	4b59      	ldr	r3, [pc, #356]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	4a58      	ldr	r2, [pc, #352]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001f5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f5e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0308 	and.w	r3, r3, #8
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d005      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f6c:	4b53      	ldr	r3, [pc, #332]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	4a52      	ldr	r2, [pc, #328]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001f72:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f76:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f78:	4b50      	ldr	r3, [pc, #320]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	494d      	ldr	r1, [pc, #308]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d040      	beq.n	8002018 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d107      	bne.n	8001fae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9e:	4b47      	ldr	r3, [pc, #284]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d115      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e07f      	b.n	80020ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d107      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fb6:	4b41      	ldr	r3, [pc, #260]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d109      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e073      	b.n	80020ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc6:	4b3d      	ldr	r3, [pc, #244]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e06b      	b.n	80020ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fd6:	4b39      	ldr	r3, [pc, #228]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f023 0203 	bic.w	r2, r3, #3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	4936      	ldr	r1, [pc, #216]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fe8:	f7fe fdf4 	bl	8000bd4 <HAL_GetTick>
 8001fec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fee:	e00a      	b.n	8002006 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ff0:	f7fe fdf0 	bl	8000bd4 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e053      	b.n	80020ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002006:	4b2d      	ldr	r3, [pc, #180]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f003 020c 	and.w	r2, r3, #12
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	429a      	cmp	r2, r3
 8002016:	d1eb      	bne.n	8001ff0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002018:	4b27      	ldr	r3, [pc, #156]	; (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	429a      	cmp	r2, r3
 8002024:	d210      	bcs.n	8002048 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002026:	4b24      	ldr	r3, [pc, #144]	; (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f023 0207 	bic.w	r2, r3, #7
 800202e:	4922      	ldr	r1, [pc, #136]	; (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	4313      	orrs	r3, r2
 8002034:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002036:	4b20      	ldr	r3, [pc, #128]	; (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	429a      	cmp	r2, r3
 8002042:	d001      	beq.n	8002048 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e032      	b.n	80020ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0304 	and.w	r3, r3, #4
 8002050:	2b00      	cmp	r3, #0
 8002052:	d008      	beq.n	8002066 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002054:	4b19      	ldr	r3, [pc, #100]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	4916      	ldr	r1, [pc, #88]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8002062:	4313      	orrs	r3, r2
 8002064:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0308 	and.w	r3, r3, #8
 800206e:	2b00      	cmp	r3, #0
 8002070:	d009      	beq.n	8002086 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002072:	4b12      	ldr	r3, [pc, #72]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	490e      	ldr	r1, [pc, #56]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8002082:	4313      	orrs	r3, r2
 8002084:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002086:	f000 f821 	bl	80020cc <HAL_RCC_GetSysClockFreq>
 800208a:	4602      	mov	r2, r0
 800208c:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	091b      	lsrs	r3, r3, #4
 8002092:	f003 030f 	and.w	r3, r3, #15
 8002096:	490a      	ldr	r1, [pc, #40]	; (80020c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002098:	5ccb      	ldrb	r3, [r1, r3]
 800209a:	fa22 f303 	lsr.w	r3, r2, r3
 800209e:	4a09      	ldr	r2, [pc, #36]	; (80020c4 <HAL_RCC_ClockConfig+0x1cc>)
 80020a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020a2:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <HAL_RCC_ClockConfig+0x1d0>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7fe fd52 	bl	8000b50 <HAL_InitTick>

  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40022000 	.word	0x40022000
 80020bc:	40021000 	.word	0x40021000
 80020c0:	08006188 	.word	0x08006188
 80020c4:	20000010 	.word	0x20000010
 80020c8:	20000014 	.word	0x20000014

080020cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020cc:	b490      	push	{r4, r7}
 80020ce:	b08a      	sub	sp, #40	; 0x28
 80020d0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80020d2:	4b29      	ldr	r3, [pc, #164]	; (8002178 <HAL_RCC_GetSysClockFreq+0xac>)
 80020d4:	1d3c      	adds	r4, r7, #4
 80020d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80020dc:	f240 2301 	movw	r3, #513	; 0x201
 80020e0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	61fb      	str	r3, [r7, #28]
 80020e6:	2300      	movs	r3, #0
 80020e8:	61bb      	str	r3, [r7, #24]
 80020ea:	2300      	movs	r3, #0
 80020ec:	627b      	str	r3, [r7, #36]	; 0x24
 80020ee:	2300      	movs	r3, #0
 80020f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020f2:	2300      	movs	r3, #0
 80020f4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020f6:	4b21      	ldr	r3, [pc, #132]	; (800217c <HAL_RCC_GetSysClockFreq+0xb0>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	f003 030c 	and.w	r3, r3, #12
 8002102:	2b04      	cmp	r3, #4
 8002104:	d002      	beq.n	800210c <HAL_RCC_GetSysClockFreq+0x40>
 8002106:	2b08      	cmp	r3, #8
 8002108:	d003      	beq.n	8002112 <HAL_RCC_GetSysClockFreq+0x46>
 800210a:	e02b      	b.n	8002164 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800210c:	4b1c      	ldr	r3, [pc, #112]	; (8002180 <HAL_RCC_GetSysClockFreq+0xb4>)
 800210e:	623b      	str	r3, [r7, #32]
      break;
 8002110:	e02b      	b.n	800216a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	0c9b      	lsrs	r3, r3, #18
 8002116:	f003 030f 	and.w	r3, r3, #15
 800211a:	3328      	adds	r3, #40	; 0x28
 800211c:	443b      	add	r3, r7
 800211e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002122:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d012      	beq.n	8002154 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800212e:	4b13      	ldr	r3, [pc, #76]	; (800217c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	0c5b      	lsrs	r3, r3, #17
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	3328      	adds	r3, #40	; 0x28
 800213a:	443b      	add	r3, r7
 800213c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002140:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	4a0e      	ldr	r2, [pc, #56]	; (8002180 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002146:	fb03 f202 	mul.w	r2, r3, r2
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
 8002152:	e004      	b.n	800215e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	4a0b      	ldr	r2, [pc, #44]	; (8002184 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002158:	fb02 f303 	mul.w	r3, r2, r3
 800215c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002160:	623b      	str	r3, [r7, #32]
      break;
 8002162:	e002      	b.n	800216a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002164:	4b06      	ldr	r3, [pc, #24]	; (8002180 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002166:	623b      	str	r3, [r7, #32]
      break;
 8002168:	bf00      	nop
    }
  }
  return sysclockfreq;
 800216a:	6a3b      	ldr	r3, [r7, #32]
}
 800216c:	4618      	mov	r0, r3
 800216e:	3728      	adds	r7, #40	; 0x28
 8002170:	46bd      	mov	sp, r7
 8002172:	bc90      	pop	{r4, r7}
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	080060c0 	.word	0x080060c0
 800217c:	40021000 	.word	0x40021000
 8002180:	007a1200 	.word	0x007a1200
 8002184:	003d0900 	.word	0x003d0900

08002188 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800218c:	4b02      	ldr	r3, [pc, #8]	; (8002198 <HAL_RCC_GetHCLKFreq+0x10>)
 800218e:	681b      	ldr	r3, [r3, #0]
}
 8002190:	4618      	mov	r0, r3
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr
 8002198:	20000010 	.word	0x20000010

0800219c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021a0:	f7ff fff2 	bl	8002188 <HAL_RCC_GetHCLKFreq>
 80021a4:	4602      	mov	r2, r0
 80021a6:	4b05      	ldr	r3, [pc, #20]	; (80021bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	0a1b      	lsrs	r3, r3, #8
 80021ac:	f003 0307 	and.w	r3, r3, #7
 80021b0:	4903      	ldr	r1, [pc, #12]	; (80021c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021b2:	5ccb      	ldrb	r3, [r1, r3]
 80021b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40021000 	.word	0x40021000
 80021c0:	08006198 	.word	0x08006198

080021c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021cc:	4b0a      	ldr	r3, [pc, #40]	; (80021f8 <RCC_Delay+0x34>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a0a      	ldr	r2, [pc, #40]	; (80021fc <RCC_Delay+0x38>)
 80021d2:	fba2 2303 	umull	r2, r3, r2, r3
 80021d6:	0a5b      	lsrs	r3, r3, #9
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	fb02 f303 	mul.w	r3, r2, r3
 80021de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021e0:	bf00      	nop
  }
  while (Delay --);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	1e5a      	subs	r2, r3, #1
 80021e6:	60fa      	str	r2, [r7, #12]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1f9      	bne.n	80021e0 <RCC_Delay+0x1c>
}
 80021ec:	bf00      	nop
 80021ee:	bf00      	nop
 80021f0:	3714      	adds	r7, #20
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bc80      	pop	{r7}
 80021f6:	4770      	bx	lr
 80021f8:	20000010 	.word	0x20000010
 80021fc:	10624dd3 	.word	0x10624dd3

08002200 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002206:	f3ef 8305 	mrs	r3, IPSR
 800220a:	60bb      	str	r3, [r7, #8]
  return(result);
 800220c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800220e:	2b00      	cmp	r3, #0
 8002210:	d10f      	bne.n	8002232 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002212:	f3ef 8310 	mrs	r3, PRIMASK
 8002216:	607b      	str	r3, [r7, #4]
  return(result);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d109      	bne.n	8002232 <osKernelInitialize+0x32>
 800221e:	4b10      	ldr	r3, [pc, #64]	; (8002260 <osKernelInitialize+0x60>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2b02      	cmp	r3, #2
 8002224:	d109      	bne.n	800223a <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002226:	f3ef 8311 	mrs	r3, BASEPRI
 800222a:	603b      	str	r3, [r7, #0]
  return(result);
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d003      	beq.n	800223a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002232:	f06f 0305 	mvn.w	r3, #5
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	e00c      	b.n	8002254 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800223a:	4b09      	ldr	r3, [pc, #36]	; (8002260 <osKernelInitialize+0x60>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d105      	bne.n	800224e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002242:	4b07      	ldr	r3, [pc, #28]	; (8002260 <osKernelInitialize+0x60>)
 8002244:	2201      	movs	r2, #1
 8002246:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002248:	2300      	movs	r3, #0
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	e002      	b.n	8002254 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800224e:	f04f 33ff 	mov.w	r3, #4294967295
 8002252:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002254:	68fb      	ldr	r3, [r7, #12]
}
 8002256:	4618      	mov	r0, r3
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	bc80      	pop	{r7}
 800225e:	4770      	bx	lr
 8002260:	20000118 	.word	0x20000118

08002264 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800226a:	f3ef 8305 	mrs	r3, IPSR
 800226e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002270:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10f      	bne.n	8002296 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002276:	f3ef 8310 	mrs	r3, PRIMASK
 800227a:	607b      	str	r3, [r7, #4]
  return(result);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d109      	bne.n	8002296 <osKernelStart+0x32>
 8002282:	4b11      	ldr	r3, [pc, #68]	; (80022c8 <osKernelStart+0x64>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2b02      	cmp	r3, #2
 8002288:	d109      	bne.n	800229e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800228a:	f3ef 8311 	mrs	r3, BASEPRI
 800228e:	603b      	str	r3, [r7, #0]
  return(result);
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <osKernelStart+0x3a>
    stat = osErrorISR;
 8002296:	f06f 0305 	mvn.w	r3, #5
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	e00e      	b.n	80022bc <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800229e:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <osKernelStart+0x64>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d107      	bne.n	80022b6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80022a6:	4b08      	ldr	r3, [pc, #32]	; (80022c8 <osKernelStart+0x64>)
 80022a8:	2202      	movs	r2, #2
 80022aa:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80022ac:	f001 fcf8 	bl	8003ca0 <vTaskStartScheduler>
      stat = osOK;
 80022b0:	2300      	movs	r3, #0
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	e002      	b.n	80022bc <osKernelStart+0x58>
    } else {
      stat = osError;
 80022b6:	f04f 33ff 	mov.w	r3, #4294967295
 80022ba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80022bc:	68fb      	ldr	r3, [r7, #12]
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	20000118 	.word	0x20000118

080022cc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b092      	sub	sp, #72	; 0x48
 80022d0:	af04      	add	r7, sp, #16
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022dc:	f3ef 8305 	mrs	r3, IPSR
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f040 8094 	bne.w	8002412 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022ea:	f3ef 8310 	mrs	r3, PRIMASK
 80022ee:	623b      	str	r3, [r7, #32]
  return(result);
 80022f0:	6a3b      	ldr	r3, [r7, #32]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f040 808d 	bne.w	8002412 <osThreadNew+0x146>
 80022f8:	4b48      	ldr	r3, [pc, #288]	; (800241c <osThreadNew+0x150>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d106      	bne.n	800230e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002300:	f3ef 8311 	mrs	r3, BASEPRI
 8002304:	61fb      	str	r3, [r7, #28]
  return(result);
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	2b00      	cmp	r3, #0
 800230a:	f040 8082 	bne.w	8002412 <osThreadNew+0x146>
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d07e      	beq.n	8002412 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002314:	2380      	movs	r3, #128	; 0x80
 8002316:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002318:	2318      	movs	r3, #24
 800231a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800231c:	2300      	movs	r3, #0
 800231e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002320:	f107 031b 	add.w	r3, r7, #27
 8002324:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002326:	f04f 33ff 	mov.w	r3, #4294967295
 800232a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d045      	beq.n	80023be <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d002      	beq.n	8002340 <osThreadNew+0x74>
        name = attr->name;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d002      	beq.n	800234e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800234e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002350:	2b00      	cmp	r3, #0
 8002352:	d008      	beq.n	8002366 <osThreadNew+0x9a>
 8002354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002356:	2b38      	cmp	r3, #56	; 0x38
 8002358:	d805      	bhi.n	8002366 <osThreadNew+0x9a>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <osThreadNew+0x9e>
        return (NULL);
 8002366:	2300      	movs	r3, #0
 8002368:	e054      	b.n	8002414 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	089b      	lsrs	r3, r3, #2
 8002378:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00e      	beq.n	80023a0 <osThreadNew+0xd4>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	2b5b      	cmp	r3, #91	; 0x5b
 8002388:	d90a      	bls.n	80023a0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800238e:	2b00      	cmp	r3, #0
 8002390:	d006      	beq.n	80023a0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d002      	beq.n	80023a0 <osThreadNew+0xd4>
        mem = 1;
 800239a:	2301      	movs	r3, #1
 800239c:	62bb      	str	r3, [r7, #40]	; 0x28
 800239e:	e010      	b.n	80023c2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d10c      	bne.n	80023c2 <osThreadNew+0xf6>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d108      	bne.n	80023c2 <osThreadNew+0xf6>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d104      	bne.n	80023c2 <osThreadNew+0xf6>
          mem = 0;
 80023b8:	2300      	movs	r3, #0
 80023ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80023bc:	e001      	b.n	80023c2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80023be:	2300      	movs	r3, #0
 80023c0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80023c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d110      	bne.n	80023ea <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80023d0:	9202      	str	r2, [sp, #8]
 80023d2:	9301      	str	r3, [sp, #4]
 80023d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d6:	9300      	str	r3, [sp, #0]
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80023de:	68f8      	ldr	r0, [r7, #12]
 80023e0:	f001 fa92 	bl	8003908 <xTaskCreateStatic>
 80023e4:	4603      	mov	r3, r0
 80023e6:	617b      	str	r3, [r7, #20]
 80023e8:	e013      	b.n	8002412 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80023ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d110      	bne.n	8002412 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80023f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	f107 0314 	add.w	r3, r7, #20
 80023f8:	9301      	str	r3, [sp, #4]
 80023fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023fc:	9300      	str	r3, [sp, #0]
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	f001 fadc 	bl	80039c0 <xTaskCreate>
 8002408:	4603      	mov	r3, r0
 800240a:	2b01      	cmp	r3, #1
 800240c:	d001      	beq.n	8002412 <osThreadNew+0x146>
          hTask = NULL;
 800240e:	2300      	movs	r3, #0
 8002410:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002412:	697b      	ldr	r3, [r7, #20]
}
 8002414:	4618      	mov	r0, r3
 8002416:	3738      	adds	r7, #56	; 0x38
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	20000118 	.word	0x20000118

08002420 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002428:	f3ef 8305 	mrs	r3, IPSR
 800242c:	613b      	str	r3, [r7, #16]
  return(result);
 800242e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002430:	2b00      	cmp	r3, #0
 8002432:	d10f      	bne.n	8002454 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002434:	f3ef 8310 	mrs	r3, PRIMASK
 8002438:	60fb      	str	r3, [r7, #12]
  return(result);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d109      	bne.n	8002454 <osDelay+0x34>
 8002440:	4b0d      	ldr	r3, [pc, #52]	; (8002478 <osDelay+0x58>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2b02      	cmp	r3, #2
 8002446:	d109      	bne.n	800245c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002448:	f3ef 8311 	mrs	r3, BASEPRI
 800244c:	60bb      	str	r3, [r7, #8]
  return(result);
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d003      	beq.n	800245c <osDelay+0x3c>
    stat = osErrorISR;
 8002454:	f06f 0305 	mvn.w	r3, #5
 8002458:	617b      	str	r3, [r7, #20]
 800245a:	e007      	b.n	800246c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800245c:	2300      	movs	r3, #0
 800245e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d002      	beq.n	800246c <osDelay+0x4c>
      vTaskDelay(ticks);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f001 fbe6 	bl	8003c38 <vTaskDelay>
    }
  }

  return (stat);
 800246c:	697b      	ldr	r3, [r7, #20]
}
 800246e:	4618      	mov	r0, r3
 8002470:	3718      	adds	r7, #24
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	20000118 	.word	0x20000118

0800247c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800247c:	b580      	push	{r7, lr}
 800247e:	b08c      	sub	sp, #48	; 0x30
 8002480:	af02      	add	r7, sp, #8
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8002488:	2300      	movs	r3, #0
 800248a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800248c:	f3ef 8305 	mrs	r3, IPSR
 8002490:	61bb      	str	r3, [r7, #24]
  return(result);
 8002492:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8002494:	2b00      	cmp	r3, #0
 8002496:	f040 8086 	bne.w	80025a6 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800249a:	f3ef 8310 	mrs	r3, PRIMASK
 800249e:	617b      	str	r3, [r7, #20]
  return(result);
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d17f      	bne.n	80025a6 <osSemaphoreNew+0x12a>
 80024a6:	4b42      	ldr	r3, [pc, #264]	; (80025b0 <osSemaphoreNew+0x134>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d105      	bne.n	80024ba <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80024ae:	f3ef 8311 	mrs	r3, BASEPRI
 80024b2:	613b      	str	r3, [r7, #16]
  return(result);
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d175      	bne.n	80025a6 <osSemaphoreNew+0x12a>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d072      	beq.n	80025a6 <osSemaphoreNew+0x12a>
 80024c0:	68ba      	ldr	r2, [r7, #8]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d86e      	bhi.n	80025a6 <osSemaphoreNew+0x12a>
    mem = -1;
 80024c8:	f04f 33ff 	mov.w	r3, #4294967295
 80024cc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d015      	beq.n	8002500 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d006      	beq.n	80024ea <osSemaphoreNew+0x6e>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	2b4f      	cmp	r3, #79	; 0x4f
 80024e2:	d902      	bls.n	80024ea <osSemaphoreNew+0x6e>
        mem = 1;
 80024e4:	2301      	movs	r3, #1
 80024e6:	623b      	str	r3, [r7, #32]
 80024e8:	e00c      	b.n	8002504 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d108      	bne.n	8002504 <osSemaphoreNew+0x88>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d104      	bne.n	8002504 <osSemaphoreNew+0x88>
          mem = 0;
 80024fa:	2300      	movs	r3, #0
 80024fc:	623b      	str	r3, [r7, #32]
 80024fe:	e001      	b.n	8002504 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8002500:	2300      	movs	r3, #0
 8002502:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8002504:	6a3b      	ldr	r3, [r7, #32]
 8002506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800250a:	d04c      	beq.n	80025a6 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d128      	bne.n	8002564 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8002512:	6a3b      	ldr	r3, [r7, #32]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d10a      	bne.n	800252e <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	2203      	movs	r2, #3
 800251e:	9200      	str	r2, [sp, #0]
 8002520:	2200      	movs	r2, #0
 8002522:	2100      	movs	r1, #0
 8002524:	2001      	movs	r0, #1
 8002526:	f000 fa4d 	bl	80029c4 <xQueueGenericCreateStatic>
 800252a:	6278      	str	r0, [r7, #36]	; 0x24
 800252c:	e005      	b.n	800253a <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800252e:	2203      	movs	r2, #3
 8002530:	2100      	movs	r1, #0
 8002532:	2001      	movs	r0, #1
 8002534:	f000 fabd 	bl	8002ab2 <xQueueGenericCreate>
 8002538:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253c:	2b00      	cmp	r3, #0
 800253e:	d022      	beq.n	8002586 <osSemaphoreNew+0x10a>
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d01f      	beq.n	8002586 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002546:	2300      	movs	r3, #0
 8002548:	2200      	movs	r2, #0
 800254a:	2100      	movs	r1, #0
 800254c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800254e:	f000 fb7b 	bl	8002c48 <xQueueGenericSend>
 8002552:	4603      	mov	r3, r0
 8002554:	2b01      	cmp	r3, #1
 8002556:	d016      	beq.n	8002586 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8002558:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800255a:	f001 f805 	bl	8003568 <vQueueDelete>
            hSemaphore = NULL;
 800255e:	2300      	movs	r3, #0
 8002560:	627b      	str	r3, [r7, #36]	; 0x24
 8002562:	e010      	b.n	8002586 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8002564:	6a3b      	ldr	r3, [r7, #32]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d108      	bne.n	800257c <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	461a      	mov	r2, r3
 8002570:	68b9      	ldr	r1, [r7, #8]
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f000 fafe 	bl	8002b74 <xQueueCreateCountingSemaphoreStatic>
 8002578:	6278      	str	r0, [r7, #36]	; 0x24
 800257a:	e004      	b.n	8002586 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800257c:	68b9      	ldr	r1, [r7, #8]
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	f000 fb2f 	bl	8002be2 <xQueueCreateCountingSemaphore>
 8002584:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00c      	beq.n	80025a6 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <osSemaphoreNew+0x11e>
          name = attr->name;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	61fb      	str	r3, [r7, #28]
 8002598:	e001      	b.n	800259e <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800259a:	2300      	movs	r3, #0
 800259c:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800259e:	69f9      	ldr	r1, [r7, #28]
 80025a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025a2:	f001 f92b 	bl	80037fc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3728      	adds	r7, #40	; 0x28
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	20000118 	.word	0x20000118

080025b4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b088      	sub	sp, #32
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80025c2:	2300      	movs	r3, #0
 80025c4:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d103      	bne.n	80025d4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80025cc:	f06f 0303 	mvn.w	r3, #3
 80025d0:	61fb      	str	r3, [r7, #28]
 80025d2:	e04b      	b.n	800266c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025d4:	f3ef 8305 	mrs	r3, IPSR
 80025d8:	617b      	str	r3, [r7, #20]
  return(result);
 80025da:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10f      	bne.n	8002600 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025e0:	f3ef 8310 	mrs	r3, PRIMASK
 80025e4:	613b      	str	r3, [r7, #16]
  return(result);
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d109      	bne.n	8002600 <osSemaphoreAcquire+0x4c>
 80025ec:	4b22      	ldr	r3, [pc, #136]	; (8002678 <osSemaphoreAcquire+0xc4>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d128      	bne.n	8002646 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80025f4:	f3ef 8311 	mrs	r3, BASEPRI
 80025f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d022      	beq.n	8002646 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8002606:	f06f 0303 	mvn.w	r3, #3
 800260a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800260c:	e02d      	b.n	800266a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800260e:	2300      	movs	r3, #0
 8002610:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8002612:	f107 0308 	add.w	r3, r7, #8
 8002616:	461a      	mov	r2, r3
 8002618:	2100      	movs	r1, #0
 800261a:	69b8      	ldr	r0, [r7, #24]
 800261c:	f000 ff24 	bl	8003468 <xQueueReceiveFromISR>
 8002620:	4603      	mov	r3, r0
 8002622:	2b01      	cmp	r3, #1
 8002624:	d003      	beq.n	800262e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8002626:	f06f 0302 	mvn.w	r3, #2
 800262a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800262c:	e01d      	b.n	800266a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d01a      	beq.n	800266a <osSemaphoreAcquire+0xb6>
 8002634:	4b11      	ldr	r3, [pc, #68]	; (800267c <osSemaphoreAcquire+0xc8>)
 8002636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	f3bf 8f4f 	dsb	sy
 8002640:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8002644:	e011      	b.n	800266a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8002646:	6839      	ldr	r1, [r7, #0]
 8002648:	69b8      	ldr	r0, [r7, #24]
 800264a:	f000 fe01 	bl	8003250 <xQueueSemaphoreTake>
 800264e:	4603      	mov	r3, r0
 8002650:	2b01      	cmp	r3, #1
 8002652:	d00b      	beq.n	800266c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d003      	beq.n	8002662 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800265a:	f06f 0301 	mvn.w	r3, #1
 800265e:	61fb      	str	r3, [r7, #28]
 8002660:	e004      	b.n	800266c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8002662:	f06f 0302 	mvn.w	r3, #2
 8002666:	61fb      	str	r3, [r7, #28]
 8002668:	e000      	b.n	800266c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800266a:	bf00      	nop
      }
    }
  }

  return (stat);
 800266c:	69fb      	ldr	r3, [r7, #28]
}
 800266e:	4618      	mov	r0, r3
 8002670:	3720      	adds	r7, #32
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	20000118 	.word	0x20000118
 800267c:	e000ed04 	.word	0xe000ed04

08002680 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8002680:	b580      	push	{r7, lr}
 8002682:	b088      	sub	sp, #32
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800268c:	2300      	movs	r3, #0
 800268e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d103      	bne.n	800269e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8002696:	f06f 0303 	mvn.w	r3, #3
 800269a:	61fb      	str	r3, [r7, #28]
 800269c:	e03e      	b.n	800271c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800269e:	f3ef 8305 	mrs	r3, IPSR
 80026a2:	617b      	str	r3, [r7, #20]
  return(result);
 80026a4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d10f      	bne.n	80026ca <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026aa:	f3ef 8310 	mrs	r3, PRIMASK
 80026ae:	613b      	str	r3, [r7, #16]
  return(result);
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d109      	bne.n	80026ca <osSemaphoreRelease+0x4a>
 80026b6:	4b1c      	ldr	r3, [pc, #112]	; (8002728 <osSemaphoreRelease+0xa8>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d120      	bne.n	8002700 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80026be:	f3ef 8311 	mrs	r3, BASEPRI
 80026c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d01a      	beq.n	8002700 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80026ca:	2300      	movs	r3, #0
 80026cc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80026ce:	f107 0308 	add.w	r3, r7, #8
 80026d2:	4619      	mov	r1, r3
 80026d4:	69b8      	ldr	r0, [r7, #24]
 80026d6:	f000 fc4d 	bl	8002f74 <xQueueGiveFromISR>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d003      	beq.n	80026e8 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80026e0:	f06f 0302 	mvn.w	r3, #2
 80026e4:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80026e6:	e018      	b.n	800271a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d015      	beq.n	800271a <osSemaphoreRelease+0x9a>
 80026ee:	4b0f      	ldr	r3, [pc, #60]	; (800272c <osSemaphoreRelease+0xac>)
 80026f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	f3bf 8f4f 	dsb	sy
 80026fa:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80026fe:	e00c      	b.n	800271a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002700:	2300      	movs	r3, #0
 8002702:	2200      	movs	r2, #0
 8002704:	2100      	movs	r1, #0
 8002706:	69b8      	ldr	r0, [r7, #24]
 8002708:	f000 fa9e 	bl	8002c48 <xQueueGenericSend>
 800270c:	4603      	mov	r3, r0
 800270e:	2b01      	cmp	r3, #1
 8002710:	d004      	beq.n	800271c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8002712:	f06f 0302 	mvn.w	r3, #2
 8002716:	61fb      	str	r3, [r7, #28]
 8002718:	e000      	b.n	800271c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800271a:	bf00      	nop
    }
  }

  return (stat);
 800271c:	69fb      	ldr	r3, [r7, #28]
}
 800271e:	4618      	mov	r0, r3
 8002720:	3720      	adds	r7, #32
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	20000118 	.word	0x20000118
 800272c:	e000ed04 	.word	0xe000ed04

08002730 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	4a06      	ldr	r2, [pc, #24]	; (8002758 <vApplicationGetIdleTaskMemory+0x28>)
 8002740:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	4a05      	ldr	r2, [pc, #20]	; (800275c <vApplicationGetIdleTaskMemory+0x2c>)
 8002746:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2280      	movs	r2, #128	; 0x80
 800274c:	601a      	str	r2, [r3, #0]
}
 800274e:	bf00      	nop
 8002750:	3714      	adds	r7, #20
 8002752:	46bd      	mov	sp, r7
 8002754:	bc80      	pop	{r7}
 8002756:	4770      	bx	lr
 8002758:	2000011c 	.word	0x2000011c
 800275c:	20000178 	.word	0x20000178

08002760 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	4a07      	ldr	r2, [pc, #28]	; (800278c <vApplicationGetTimerTaskMemory+0x2c>)
 8002770:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	4a06      	ldr	r2, [pc, #24]	; (8002790 <vApplicationGetTimerTaskMemory+0x30>)
 8002776:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800277e:	601a      	str	r2, [r3, #0]
}
 8002780:	bf00      	nop
 8002782:	3714      	adds	r7, #20
 8002784:	46bd      	mov	sp, r7
 8002786:	bc80      	pop	{r7}
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	20000378 	.word	0x20000378
 8002790:	200003d4 	.word	0x200003d4

08002794 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f103 0208 	add.w	r2, r3, #8
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f04f 32ff 	mov.w	r2, #4294967295
 80027ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f103 0208 	add.w	r2, r3, #8
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f103 0208 	add.w	r2, r3, #8
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bc80      	pop	{r7}
 80027d0:	4770      	bx	lr

080027d2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80027d2:	b480      	push	{r7}
 80027d4:	b083      	sub	sp, #12
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bc80      	pop	{r7}
 80027e8:	4770      	bx	lr

080027ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027ea:	b480      	push	{r7}
 80027ec:	b085      	sub	sp, #20
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
 80027f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	1c5a      	adds	r2, r3, #1
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	601a      	str	r2, [r3, #0]
}
 8002826:	bf00      	nop
 8002828:	3714      	adds	r7, #20
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr

08002830 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002846:	d103      	bne.n	8002850 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	60fb      	str	r3, [r7, #12]
 800284e:	e00c      	b.n	800286a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3308      	adds	r3, #8
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	e002      	b.n	800285e <vListInsert+0x2e>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68ba      	ldr	r2, [r7, #8]
 8002866:	429a      	cmp	r2, r3
 8002868:	d2f6      	bcs.n	8002858 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	1c5a      	adds	r2, r3, #1
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	601a      	str	r2, [r3, #0]
}
 8002896:	bf00      	nop
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr

080028a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	6892      	ldr	r2, [r2, #8]
 80028b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6852      	ldr	r2, [r2, #4]
 80028c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d103      	bne.n	80028d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	1e5a      	subs	r2, r3, #1
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bc80      	pop	{r7}
 80028f0:	4770      	bx	lr
	...

080028f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10a      	bne.n	800291e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800290c:	f383 8811 	msr	BASEPRI, r3
 8002910:	f3bf 8f6f 	isb	sy
 8002914:	f3bf 8f4f 	dsb	sy
 8002918:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800291a:	bf00      	nop
 800291c:	e7fe      	b.n	800291c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800291e:	f002 fbf5 	bl	800510c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800292a:	68f9      	ldr	r1, [r7, #12]
 800292c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800292e:	fb01 f303 	mul.w	r3, r1, r3
 8002932:	441a      	add	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294e:	3b01      	subs	r3, #1
 8002950:	68f9      	ldr	r1, [r7, #12]
 8002952:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002954:	fb01 f303 	mul.w	r3, r1, r3
 8002958:	441a      	add	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	22ff      	movs	r2, #255	; 0xff
 8002962:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	22ff      	movs	r2, #255	; 0xff
 800296a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d114      	bne.n	800299e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d01a      	beq.n	80029b2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	3310      	adds	r3, #16
 8002980:	4618      	mov	r0, r3
 8002982:	f001 fc17 	bl	80041b4 <xTaskRemoveFromEventList>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d012      	beq.n	80029b2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800298c:	4b0c      	ldr	r3, [pc, #48]	; (80029c0 <xQueueGenericReset+0xcc>)
 800298e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	f3bf 8f4f 	dsb	sy
 8002998:	f3bf 8f6f 	isb	sy
 800299c:	e009      	b.n	80029b2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	3310      	adds	r3, #16
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff fef6 	bl	8002794 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	3324      	adds	r3, #36	; 0x24
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff fef1 	bl	8002794 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80029b2:	f002 fbdb 	bl	800516c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80029b6:	2301      	movs	r3, #1
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	e000ed04 	.word	0xe000ed04

080029c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b08e      	sub	sp, #56	; 0x38
 80029c8:	af02      	add	r7, sp, #8
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
 80029d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d10a      	bne.n	80029ee <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80029d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029dc:	f383 8811 	msr	BASEPRI, r3
 80029e0:	f3bf 8f6f 	isb	sy
 80029e4:	f3bf 8f4f 	dsb	sy
 80029e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80029ea:	bf00      	nop
 80029ec:	e7fe      	b.n	80029ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10a      	bne.n	8002a0a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80029f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f8:	f383 8811 	msr	BASEPRI, r3
 80029fc:	f3bf 8f6f 	isb	sy
 8002a00:	f3bf 8f4f 	dsb	sy
 8002a04:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002a06:	bf00      	nop
 8002a08:	e7fe      	b.n	8002a08 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d002      	beq.n	8002a16 <xQueueGenericCreateStatic+0x52>
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <xQueueGenericCreateStatic+0x56>
 8002a16:	2301      	movs	r3, #1
 8002a18:	e000      	b.n	8002a1c <xQueueGenericCreateStatic+0x58>
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10a      	bne.n	8002a36 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a24:	f383 8811 	msr	BASEPRI, r3
 8002a28:	f3bf 8f6f 	isb	sy
 8002a2c:	f3bf 8f4f 	dsb	sy
 8002a30:	623b      	str	r3, [r7, #32]
}
 8002a32:	bf00      	nop
 8002a34:	e7fe      	b.n	8002a34 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d102      	bne.n	8002a42 <xQueueGenericCreateStatic+0x7e>
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <xQueueGenericCreateStatic+0x82>
 8002a42:	2301      	movs	r3, #1
 8002a44:	e000      	b.n	8002a48 <xQueueGenericCreateStatic+0x84>
 8002a46:	2300      	movs	r3, #0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d10a      	bne.n	8002a62 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a50:	f383 8811 	msr	BASEPRI, r3
 8002a54:	f3bf 8f6f 	isb	sy
 8002a58:	f3bf 8f4f 	dsb	sy
 8002a5c:	61fb      	str	r3, [r7, #28]
}
 8002a5e:	bf00      	nop
 8002a60:	e7fe      	b.n	8002a60 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002a62:	2350      	movs	r3, #80	; 0x50
 8002a64:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	2b50      	cmp	r3, #80	; 0x50
 8002a6a:	d00a      	beq.n	8002a82 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a70:	f383 8811 	msr	BASEPRI, r3
 8002a74:	f3bf 8f6f 	isb	sy
 8002a78:	f3bf 8f4f 	dsb	sy
 8002a7c:	61bb      	str	r3, [r7, #24]
}
 8002a7e:	bf00      	nop
 8002a80:	e7fe      	b.n	8002a80 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00d      	beq.n	8002aa8 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002a94:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	68b9      	ldr	r1, [r7, #8]
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f000 f843 	bl	8002b2e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3730      	adds	r7, #48	; 0x30
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b08a      	sub	sp, #40	; 0x28
 8002ab6:	af02      	add	r7, sp, #8
 8002ab8:	60f8      	str	r0, [r7, #12]
 8002aba:	60b9      	str	r1, [r7, #8]
 8002abc:	4613      	mov	r3, r2
 8002abe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10a      	bne.n	8002adc <xQueueGenericCreate+0x2a>
	__asm volatile
 8002ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aca:	f383 8811 	msr	BASEPRI, r3
 8002ace:	f3bf 8f6f 	isb	sy
 8002ad2:	f3bf 8f4f 	dsb	sy
 8002ad6:	613b      	str	r3, [r7, #16]
}
 8002ad8:	bf00      	nop
 8002ada:	e7fe      	b.n	8002ada <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d102      	bne.n	8002ae8 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61fb      	str	r3, [r7, #28]
 8002ae6:	e004      	b.n	8002af2 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	68ba      	ldr	r2, [r7, #8]
 8002aec:	fb02 f303 	mul.w	r3, r2, r3
 8002af0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	3350      	adds	r3, #80	; 0x50
 8002af6:	4618      	mov	r0, r3
 8002af8:	f002 fc08 	bl	800530c <pvPortMalloc>
 8002afc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00f      	beq.n	8002b24 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	3350      	adds	r3, #80	; 0x50
 8002b08:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b12:	79fa      	ldrb	r2, [r7, #7]
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	9300      	str	r3, [sp, #0]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	68b9      	ldr	r1, [r7, #8]
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f000 f805 	bl	8002b2e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002b24:	69bb      	ldr	r3, [r7, #24]
	}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3720      	adds	r7, #32
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b084      	sub	sp, #16
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	60f8      	str	r0, [r7, #12]
 8002b36:	60b9      	str	r1, [r7, #8]
 8002b38:	607a      	str	r2, [r7, #4]
 8002b3a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d103      	bne.n	8002b4a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	e002      	b.n	8002b50 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	68ba      	ldr	r2, [r7, #8]
 8002b5a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002b5c:	2101      	movs	r1, #1
 8002b5e:	69b8      	ldr	r0, [r7, #24]
 8002b60:	f7ff fec8 	bl	80028f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	78fa      	ldrb	r2, [r7, #3]
 8002b68:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002b6c:	bf00      	nop
 8002b6e:	3710      	adds	r7, #16
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b08a      	sub	sp, #40	; 0x28
 8002b78:	af02      	add	r7, sp, #8
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10a      	bne.n	8002b9c <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8002b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b8a:	f383 8811 	msr	BASEPRI, r3
 8002b8e:	f3bf 8f6f 	isb	sy
 8002b92:	f3bf 8f4f 	dsb	sy
 8002b96:	61bb      	str	r3, [r7, #24]
}
 8002b98:	bf00      	nop
 8002b9a:	e7fe      	b.n	8002b9a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002b9c:	68ba      	ldr	r2, [r7, #8]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d90a      	bls.n	8002bba <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8002ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba8:	f383 8811 	msr	BASEPRI, r3
 8002bac:	f3bf 8f6f 	isb	sy
 8002bb0:	f3bf 8f4f 	dsb	sy
 8002bb4:	617b      	str	r3, [r7, #20]
}
 8002bb6:	bf00      	nop
 8002bb8:	e7fe      	b.n	8002bb8 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002bba:	2302      	movs	r3, #2
 8002bbc:	9300      	str	r3, [sp, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f7ff fefd 	bl	80029c4 <xQueueGenericCreateStatic>
 8002bca:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d002      	beq.n	8002bd8 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	68ba      	ldr	r2, [r7, #8]
 8002bd6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002bd8:	69fb      	ldr	r3, [r7, #28]
	}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3720      	adds	r7, #32
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b086      	sub	sp, #24
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
 8002bea:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10a      	bne.n	8002c08 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8002bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf6:	f383 8811 	msr	BASEPRI, r3
 8002bfa:	f3bf 8f6f 	isb	sy
 8002bfe:	f3bf 8f4f 	dsb	sy
 8002c02:	613b      	str	r3, [r7, #16]
}
 8002c04:	bf00      	nop
 8002c06:	e7fe      	b.n	8002c06 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002c08:	683a      	ldr	r2, [r7, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d90a      	bls.n	8002c26 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8002c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c14:	f383 8811 	msr	BASEPRI, r3
 8002c18:	f3bf 8f6f 	isb	sy
 8002c1c:	f3bf 8f4f 	dsb	sy
 8002c20:	60fb      	str	r3, [r7, #12]
}
 8002c22:	bf00      	nop
 8002c24:	e7fe      	b.n	8002c24 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002c26:	2202      	movs	r2, #2
 8002c28:	2100      	movs	r1, #0
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f7ff ff41 	bl	8002ab2 <xQueueGenericCreate>
 8002c30:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d002      	beq.n	8002c3e <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	683a      	ldr	r2, [r7, #0]
 8002c3c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002c3e:	697b      	ldr	r3, [r7, #20]
	}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3718      	adds	r7, #24
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b08e      	sub	sp, #56	; 0x38
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
 8002c54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002c56:	2300      	movs	r3, #0
 8002c58:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d10a      	bne.n	8002c7a <xQueueGenericSend+0x32>
	__asm volatile
 8002c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c68:	f383 8811 	msr	BASEPRI, r3
 8002c6c:	f3bf 8f6f 	isb	sy
 8002c70:	f3bf 8f4f 	dsb	sy
 8002c74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002c76:	bf00      	nop
 8002c78:	e7fe      	b.n	8002c78 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d103      	bne.n	8002c88 <xQueueGenericSend+0x40>
 8002c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d101      	bne.n	8002c8c <xQueueGenericSend+0x44>
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e000      	b.n	8002c8e <xQueueGenericSend+0x46>
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10a      	bne.n	8002ca8 <xQueueGenericSend+0x60>
	__asm volatile
 8002c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c96:	f383 8811 	msr	BASEPRI, r3
 8002c9a:	f3bf 8f6f 	isb	sy
 8002c9e:	f3bf 8f4f 	dsb	sy
 8002ca2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002ca4:	bf00      	nop
 8002ca6:	e7fe      	b.n	8002ca6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d103      	bne.n	8002cb6 <xQueueGenericSend+0x6e>
 8002cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d101      	bne.n	8002cba <xQueueGenericSend+0x72>
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e000      	b.n	8002cbc <xQueueGenericSend+0x74>
 8002cba:	2300      	movs	r3, #0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d10a      	bne.n	8002cd6 <xQueueGenericSend+0x8e>
	__asm volatile
 8002cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc4:	f383 8811 	msr	BASEPRI, r3
 8002cc8:	f3bf 8f6f 	isb	sy
 8002ccc:	f3bf 8f4f 	dsb	sy
 8002cd0:	623b      	str	r3, [r7, #32]
}
 8002cd2:	bf00      	nop
 8002cd4:	e7fe      	b.n	8002cd4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002cd6:	f001 fc2f 	bl	8004538 <xTaskGetSchedulerState>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d102      	bne.n	8002ce6 <xQueueGenericSend+0x9e>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <xQueueGenericSend+0xa2>
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e000      	b.n	8002cec <xQueueGenericSend+0xa4>
 8002cea:	2300      	movs	r3, #0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10a      	bne.n	8002d06 <xQueueGenericSend+0xbe>
	__asm volatile
 8002cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf4:	f383 8811 	msr	BASEPRI, r3
 8002cf8:	f3bf 8f6f 	isb	sy
 8002cfc:	f3bf 8f4f 	dsb	sy
 8002d00:	61fb      	str	r3, [r7, #28]
}
 8002d02:	bf00      	nop
 8002d04:	e7fe      	b.n	8002d04 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d06:	f002 fa01 	bl	800510c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d302      	bcc.n	8002d1c <xQueueGenericSend+0xd4>
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d129      	bne.n	8002d70 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	68b9      	ldr	r1, [r7, #8]
 8002d20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d22:	f000 fc5b 	bl	80035dc <prvCopyDataToQueue>
 8002d26:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d010      	beq.n	8002d52 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d32:	3324      	adds	r3, #36	; 0x24
 8002d34:	4618      	mov	r0, r3
 8002d36:	f001 fa3d 	bl	80041b4 <xTaskRemoveFromEventList>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d013      	beq.n	8002d68 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002d40:	4b3f      	ldr	r3, [pc, #252]	; (8002e40 <xQueueGenericSend+0x1f8>)
 8002d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	f3bf 8f4f 	dsb	sy
 8002d4c:	f3bf 8f6f 	isb	sy
 8002d50:	e00a      	b.n	8002d68 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d007      	beq.n	8002d68 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002d58:	4b39      	ldr	r3, [pc, #228]	; (8002e40 <xQueueGenericSend+0x1f8>)
 8002d5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	f3bf 8f4f 	dsb	sy
 8002d64:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002d68:	f002 fa00 	bl	800516c <vPortExitCritical>
				return pdPASS;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e063      	b.n	8002e38 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d103      	bne.n	8002d7e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d76:	f002 f9f9 	bl	800516c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	e05c      	b.n	8002e38 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d106      	bne.n	8002d92 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d84:	f107 0314 	add.w	r3, r7, #20
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f001 fa77 	bl	800427c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d92:	f002 f9eb 	bl	800516c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d96:	f000 ffe9 	bl	8003d6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d9a:	f002 f9b7 	bl	800510c <vPortEnterCritical>
 8002d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002da4:	b25b      	sxtb	r3, r3
 8002da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002daa:	d103      	bne.n	8002db4 <xQueueGenericSend+0x16c>
 8002dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002dba:	b25b      	sxtb	r3, r3
 8002dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc0:	d103      	bne.n	8002dca <xQueueGenericSend+0x182>
 8002dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002dca:	f002 f9cf 	bl	800516c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002dce:	1d3a      	adds	r2, r7, #4
 8002dd0:	f107 0314 	add.w	r3, r7, #20
 8002dd4:	4611      	mov	r1, r2
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f001 fa66 	bl	80042a8 <xTaskCheckForTimeOut>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d124      	bne.n	8002e2c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002de2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002de4:	f000 fcf2 	bl	80037cc <prvIsQueueFull>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d018      	beq.n	8002e20 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df0:	3310      	adds	r3, #16
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	4611      	mov	r1, r2
 8002df6:	4618      	mov	r0, r3
 8002df8:	f001 f98c 	bl	8004114 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002dfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dfe:	f000 fc7d 	bl	80036fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002e02:	f000 ffc1 	bl	8003d88 <xTaskResumeAll>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f47f af7c 	bne.w	8002d06 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002e0e:	4b0c      	ldr	r3, [pc, #48]	; (8002e40 <xQueueGenericSend+0x1f8>)
 8002e10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e14:	601a      	str	r2, [r3, #0]
 8002e16:	f3bf 8f4f 	dsb	sy
 8002e1a:	f3bf 8f6f 	isb	sy
 8002e1e:	e772      	b.n	8002d06 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002e20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e22:	f000 fc6b 	bl	80036fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e26:	f000 ffaf 	bl	8003d88 <xTaskResumeAll>
 8002e2a:	e76c      	b.n	8002d06 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002e2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e2e:	f000 fc65 	bl	80036fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e32:	f000 ffa9 	bl	8003d88 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002e36:	2300      	movs	r3, #0
		}
	}
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3738      	adds	r7, #56	; 0x38
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	e000ed04 	.word	0xe000ed04

08002e44 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b08e      	sub	sp, #56	; 0x38
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
 8002e50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d10a      	bne.n	8002e72 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e60:	f383 8811 	msr	BASEPRI, r3
 8002e64:	f3bf 8f6f 	isb	sy
 8002e68:	f3bf 8f4f 	dsb	sy
 8002e6c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002e6e:	bf00      	nop
 8002e70:	e7fe      	b.n	8002e70 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d103      	bne.n	8002e80 <xQueueGenericSendFromISR+0x3c>
 8002e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d101      	bne.n	8002e84 <xQueueGenericSendFromISR+0x40>
 8002e80:	2301      	movs	r3, #1
 8002e82:	e000      	b.n	8002e86 <xQueueGenericSendFromISR+0x42>
 8002e84:	2300      	movs	r3, #0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10a      	bne.n	8002ea0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e8e:	f383 8811 	msr	BASEPRI, r3
 8002e92:	f3bf 8f6f 	isb	sy
 8002e96:	f3bf 8f4f 	dsb	sy
 8002e9a:	623b      	str	r3, [r7, #32]
}
 8002e9c:	bf00      	nop
 8002e9e:	e7fe      	b.n	8002e9e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d103      	bne.n	8002eae <xQueueGenericSendFromISR+0x6a>
 8002ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d101      	bne.n	8002eb2 <xQueueGenericSendFromISR+0x6e>
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e000      	b.n	8002eb4 <xQueueGenericSendFromISR+0x70>
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10a      	bne.n	8002ece <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ebc:	f383 8811 	msr	BASEPRI, r3
 8002ec0:	f3bf 8f6f 	isb	sy
 8002ec4:	f3bf 8f4f 	dsb	sy
 8002ec8:	61fb      	str	r3, [r7, #28]
}
 8002eca:	bf00      	nop
 8002ecc:	e7fe      	b.n	8002ecc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002ece:	f002 f9df 	bl	8005290 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002ed2:	f3ef 8211 	mrs	r2, BASEPRI
 8002ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eda:	f383 8811 	msr	BASEPRI, r3
 8002ede:	f3bf 8f6f 	isb	sy
 8002ee2:	f3bf 8f4f 	dsb	sy
 8002ee6:	61ba      	str	r2, [r7, #24]
 8002ee8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002eea:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002eec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d302      	bcc.n	8002f00 <xQueueGenericSendFromISR+0xbc>
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d12c      	bne.n	8002f5a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	68b9      	ldr	r1, [r7, #8]
 8002f0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f10:	f000 fb64 	bl	80035dc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002f14:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f1c:	d112      	bne.n	8002f44 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d016      	beq.n	8002f54 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f28:	3324      	adds	r3, #36	; 0x24
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f001 f942 	bl	80041b4 <xTaskRemoveFromEventList>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00e      	beq.n	8002f54 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d00b      	beq.n	8002f54 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	e007      	b.n	8002f54 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002f44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002f48:	3301      	adds	r3, #1
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	b25a      	sxtb	r2, r3
 8002f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002f54:	2301      	movs	r3, #1
 8002f56:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002f58:	e001      	b.n	8002f5e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	637b      	str	r3, [r7, #52]	; 0x34
 8002f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f60:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002f68:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3738      	adds	r7, #56	; 0x38
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b08e      	sub	sp, #56	; 0x38
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10a      	bne.n	8002f9e <xQueueGiveFromISR+0x2a>
	__asm volatile
 8002f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f8c:	f383 8811 	msr	BASEPRI, r3
 8002f90:	f3bf 8f6f 	isb	sy
 8002f94:	f3bf 8f4f 	dsb	sy
 8002f98:	623b      	str	r3, [r7, #32]
}
 8002f9a:	bf00      	nop
 8002f9c:	e7fe      	b.n	8002f9c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00a      	beq.n	8002fbc <xQueueGiveFromISR+0x48>
	__asm volatile
 8002fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002faa:	f383 8811 	msr	BASEPRI, r3
 8002fae:	f3bf 8f6f 	isb	sy
 8002fb2:	f3bf 8f4f 	dsb	sy
 8002fb6:	61fb      	str	r3, [r7, #28]
}
 8002fb8:	bf00      	nop
 8002fba:	e7fe      	b.n	8002fba <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8002fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d103      	bne.n	8002fcc <xQueueGiveFromISR+0x58>
 8002fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <xQueueGiveFromISR+0x5c>
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e000      	b.n	8002fd2 <xQueueGiveFromISR+0x5e>
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10a      	bne.n	8002fec <xQueueGiveFromISR+0x78>
	__asm volatile
 8002fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fda:	f383 8811 	msr	BASEPRI, r3
 8002fde:	f3bf 8f6f 	isb	sy
 8002fe2:	f3bf 8f4f 	dsb	sy
 8002fe6:	61bb      	str	r3, [r7, #24]
}
 8002fe8:	bf00      	nop
 8002fea:	e7fe      	b.n	8002fea <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002fec:	f002 f950 	bl	8005290 <vPortValidateInterruptPriority>
	__asm volatile
 8002ff0:	f3ef 8211 	mrs	r2, BASEPRI
 8002ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff8:	f383 8811 	msr	BASEPRI, r3
 8002ffc:	f3bf 8f6f 	isb	sy
 8003000:	f3bf 8f4f 	dsb	sy
 8003004:	617a      	str	r2, [r7, #20]
 8003006:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003008:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800300a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800300c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003010:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003016:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003018:	429a      	cmp	r2, r3
 800301a:	d22b      	bcs.n	8003074 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800301c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003022:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003028:	1c5a      	adds	r2, r3, #1
 800302a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800302e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003036:	d112      	bne.n	800305e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	2b00      	cmp	r3, #0
 800303e:	d016      	beq.n	800306e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003042:	3324      	adds	r3, #36	; 0x24
 8003044:	4618      	mov	r0, r3
 8003046:	f001 f8b5 	bl	80041b4 <xTaskRemoveFromEventList>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00e      	beq.n	800306e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00b      	beq.n	800306e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	2201      	movs	r2, #1
 800305a:	601a      	str	r2, [r3, #0]
 800305c:	e007      	b.n	800306e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800305e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003062:	3301      	adds	r3, #1
 8003064:	b2db      	uxtb	r3, r3
 8003066:	b25a      	sxtb	r2, r3
 8003068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800306a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800306e:	2301      	movs	r3, #1
 8003070:	637b      	str	r3, [r7, #52]	; 0x34
 8003072:	e001      	b.n	8003078 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003074:	2300      	movs	r3, #0
 8003076:	637b      	str	r3, [r7, #52]	; 0x34
 8003078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800307a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f383 8811 	msr	BASEPRI, r3
}
 8003082:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003086:	4618      	mov	r0, r3
 8003088:	3738      	adds	r7, #56	; 0x38
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
	...

08003090 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b08c      	sub	sp, #48	; 0x30
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800309c:	2300      	movs	r3, #0
 800309e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80030a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10a      	bne.n	80030c0 <xQueueReceive+0x30>
	__asm volatile
 80030aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ae:	f383 8811 	msr	BASEPRI, r3
 80030b2:	f3bf 8f6f 	isb	sy
 80030b6:	f3bf 8f4f 	dsb	sy
 80030ba:	623b      	str	r3, [r7, #32]
}
 80030bc:	bf00      	nop
 80030be:	e7fe      	b.n	80030be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d103      	bne.n	80030ce <xQueueReceive+0x3e>
 80030c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <xQueueReceive+0x42>
 80030ce:	2301      	movs	r3, #1
 80030d0:	e000      	b.n	80030d4 <xQueueReceive+0x44>
 80030d2:	2300      	movs	r3, #0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10a      	bne.n	80030ee <xQueueReceive+0x5e>
	__asm volatile
 80030d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030dc:	f383 8811 	msr	BASEPRI, r3
 80030e0:	f3bf 8f6f 	isb	sy
 80030e4:	f3bf 8f4f 	dsb	sy
 80030e8:	61fb      	str	r3, [r7, #28]
}
 80030ea:	bf00      	nop
 80030ec:	e7fe      	b.n	80030ec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030ee:	f001 fa23 	bl	8004538 <xTaskGetSchedulerState>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d102      	bne.n	80030fe <xQueueReceive+0x6e>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <xQueueReceive+0x72>
 80030fe:	2301      	movs	r3, #1
 8003100:	e000      	b.n	8003104 <xQueueReceive+0x74>
 8003102:	2300      	movs	r3, #0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d10a      	bne.n	800311e <xQueueReceive+0x8e>
	__asm volatile
 8003108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800310c:	f383 8811 	msr	BASEPRI, r3
 8003110:	f3bf 8f6f 	isb	sy
 8003114:	f3bf 8f4f 	dsb	sy
 8003118:	61bb      	str	r3, [r7, #24]
}
 800311a:	bf00      	nop
 800311c:	e7fe      	b.n	800311c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800311e:	f001 fff5 	bl	800510c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003126:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312a:	2b00      	cmp	r3, #0
 800312c:	d01f      	beq.n	800316e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800312e:	68b9      	ldr	r1, [r7, #8]
 8003130:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003132:	f000 fabd 	bl	80036b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	1e5a      	subs	r2, r3, #1
 800313a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800313e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00f      	beq.n	8003166 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003148:	3310      	adds	r3, #16
 800314a:	4618      	mov	r0, r3
 800314c:	f001 f832 	bl	80041b4 <xTaskRemoveFromEventList>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d007      	beq.n	8003166 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003156:	4b3d      	ldr	r3, [pc, #244]	; (800324c <xQueueReceive+0x1bc>)
 8003158:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800315c:	601a      	str	r2, [r3, #0]
 800315e:	f3bf 8f4f 	dsb	sy
 8003162:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003166:	f002 f801 	bl	800516c <vPortExitCritical>
				return pdPASS;
 800316a:	2301      	movs	r3, #1
 800316c:	e069      	b.n	8003242 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d103      	bne.n	800317c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003174:	f001 fffa 	bl	800516c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003178:	2300      	movs	r3, #0
 800317a:	e062      	b.n	8003242 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800317c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800317e:	2b00      	cmp	r3, #0
 8003180:	d106      	bne.n	8003190 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003182:	f107 0310 	add.w	r3, r7, #16
 8003186:	4618      	mov	r0, r3
 8003188:	f001 f878 	bl	800427c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800318c:	2301      	movs	r3, #1
 800318e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003190:	f001 ffec 	bl	800516c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003194:	f000 fdea 	bl	8003d6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003198:	f001 ffb8 	bl	800510c <vPortEnterCritical>
 800319c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800319e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031a2:	b25b      	sxtb	r3, r3
 80031a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a8:	d103      	bne.n	80031b2 <xQueueReceive+0x122>
 80031aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031b8:	b25b      	sxtb	r3, r3
 80031ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031be:	d103      	bne.n	80031c8 <xQueueReceive+0x138>
 80031c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031c8:	f001 ffd0 	bl	800516c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80031cc:	1d3a      	adds	r2, r7, #4
 80031ce:	f107 0310 	add.w	r3, r7, #16
 80031d2:	4611      	mov	r1, r2
 80031d4:	4618      	mov	r0, r3
 80031d6:	f001 f867 	bl	80042a8 <xTaskCheckForTimeOut>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d123      	bne.n	8003228 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031e2:	f000 fadd 	bl	80037a0 <prvIsQueueEmpty>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d017      	beq.n	800321c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80031ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ee:	3324      	adds	r3, #36	; 0x24
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	4611      	mov	r1, r2
 80031f4:	4618      	mov	r0, r3
 80031f6:	f000 ff8d 	bl	8004114 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80031fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031fc:	f000 fa7e 	bl	80036fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003200:	f000 fdc2 	bl	8003d88 <xTaskResumeAll>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d189      	bne.n	800311e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800320a:	4b10      	ldr	r3, [pc, #64]	; (800324c <xQueueReceive+0x1bc>)
 800320c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003210:	601a      	str	r2, [r3, #0]
 8003212:	f3bf 8f4f 	dsb	sy
 8003216:	f3bf 8f6f 	isb	sy
 800321a:	e780      	b.n	800311e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800321c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800321e:	f000 fa6d 	bl	80036fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003222:	f000 fdb1 	bl	8003d88 <xTaskResumeAll>
 8003226:	e77a      	b.n	800311e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003228:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800322a:	f000 fa67 	bl	80036fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800322e:	f000 fdab 	bl	8003d88 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003232:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003234:	f000 fab4 	bl	80037a0 <prvIsQueueEmpty>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	f43f af6f 	beq.w	800311e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003240:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003242:	4618      	mov	r0, r3
 8003244:	3730      	adds	r7, #48	; 0x30
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	e000ed04 	.word	0xe000ed04

08003250 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b08e      	sub	sp, #56	; 0x38
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800325a:	2300      	movs	r3, #0
 800325c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003262:	2300      	movs	r3, #0
 8003264:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10a      	bne.n	8003282 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800326c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003270:	f383 8811 	msr	BASEPRI, r3
 8003274:	f3bf 8f6f 	isb	sy
 8003278:	f3bf 8f4f 	dsb	sy
 800327c:	623b      	str	r3, [r7, #32]
}
 800327e:	bf00      	nop
 8003280:	e7fe      	b.n	8003280 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00a      	beq.n	80032a0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800328a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800328e:	f383 8811 	msr	BASEPRI, r3
 8003292:	f3bf 8f6f 	isb	sy
 8003296:	f3bf 8f4f 	dsb	sy
 800329a:	61fb      	str	r3, [r7, #28]
}
 800329c:	bf00      	nop
 800329e:	e7fe      	b.n	800329e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80032a0:	f001 f94a 	bl	8004538 <xTaskGetSchedulerState>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d102      	bne.n	80032b0 <xQueueSemaphoreTake+0x60>
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d101      	bne.n	80032b4 <xQueueSemaphoreTake+0x64>
 80032b0:	2301      	movs	r3, #1
 80032b2:	e000      	b.n	80032b6 <xQueueSemaphoreTake+0x66>
 80032b4:	2300      	movs	r3, #0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10a      	bne.n	80032d0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80032ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032be:	f383 8811 	msr	BASEPRI, r3
 80032c2:	f3bf 8f6f 	isb	sy
 80032c6:	f3bf 8f4f 	dsb	sy
 80032ca:	61bb      	str	r3, [r7, #24]
}
 80032cc:	bf00      	nop
 80032ce:	e7fe      	b.n	80032ce <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80032d0:	f001 ff1c 	bl	800510c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80032d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80032da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d024      	beq.n	800332a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80032e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e2:	1e5a      	subs	r2, r3, #1
 80032e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80032e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d104      	bne.n	80032fa <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80032f0:	f001 faa2 	bl	8004838 <pvTaskIncrementMutexHeldCount>
 80032f4:	4602      	mov	r2, r0
 80032f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f8:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00f      	beq.n	8003322 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003304:	3310      	adds	r3, #16
 8003306:	4618      	mov	r0, r3
 8003308:	f000 ff54 	bl	80041b4 <xTaskRemoveFromEventList>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d007      	beq.n	8003322 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003312:	4b54      	ldr	r3, [pc, #336]	; (8003464 <xQueueSemaphoreTake+0x214>)
 8003314:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	f3bf 8f4f 	dsb	sy
 800331e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003322:	f001 ff23 	bl	800516c <vPortExitCritical>
				return pdPASS;
 8003326:	2301      	movs	r3, #1
 8003328:	e097      	b.n	800345a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d111      	bne.n	8003354 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00a      	beq.n	800334c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800333a:	f383 8811 	msr	BASEPRI, r3
 800333e:	f3bf 8f6f 	isb	sy
 8003342:	f3bf 8f4f 	dsb	sy
 8003346:	617b      	str	r3, [r7, #20]
}
 8003348:	bf00      	nop
 800334a:	e7fe      	b.n	800334a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800334c:	f001 ff0e 	bl	800516c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003350:	2300      	movs	r3, #0
 8003352:	e082      	b.n	800345a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003356:	2b00      	cmp	r3, #0
 8003358:	d106      	bne.n	8003368 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800335a:	f107 030c 	add.w	r3, r7, #12
 800335e:	4618      	mov	r0, r3
 8003360:	f000 ff8c 	bl	800427c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003364:	2301      	movs	r3, #1
 8003366:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003368:	f001 ff00 	bl	800516c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800336c:	f000 fcfe 	bl	8003d6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003370:	f001 fecc 	bl	800510c <vPortEnterCritical>
 8003374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003376:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800337a:	b25b      	sxtb	r3, r3
 800337c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003380:	d103      	bne.n	800338a <xQueueSemaphoreTake+0x13a>
 8003382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003384:	2200      	movs	r2, #0
 8003386:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800338a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003390:	b25b      	sxtb	r3, r3
 8003392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003396:	d103      	bne.n	80033a0 <xQueueSemaphoreTake+0x150>
 8003398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800339a:	2200      	movs	r2, #0
 800339c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033a0:	f001 fee4 	bl	800516c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80033a4:	463a      	mov	r2, r7
 80033a6:	f107 030c 	add.w	r3, r7, #12
 80033aa:	4611      	mov	r1, r2
 80033ac:	4618      	mov	r0, r3
 80033ae:	f000 ff7b 	bl	80042a8 <xTaskCheckForTimeOut>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d132      	bne.n	800341e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80033ba:	f000 f9f1 	bl	80037a0 <prvIsQueueEmpty>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d026      	beq.n	8003412 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80033c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d109      	bne.n	80033e0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80033cc:	f001 fe9e 	bl	800510c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80033d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f001 f8cd 	bl	8004574 <xTaskPriorityInherit>
 80033da:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80033dc:	f001 fec6 	bl	800516c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80033e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e2:	3324      	adds	r3, #36	; 0x24
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	4611      	mov	r1, r2
 80033e8:	4618      	mov	r0, r3
 80033ea:	f000 fe93 	bl	8004114 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80033ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80033f0:	f000 f984 	bl	80036fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80033f4:	f000 fcc8 	bl	8003d88 <xTaskResumeAll>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f47f af68 	bne.w	80032d0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003400:	4b18      	ldr	r3, [pc, #96]	; (8003464 <xQueueSemaphoreTake+0x214>)
 8003402:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003406:	601a      	str	r2, [r3, #0]
 8003408:	f3bf 8f4f 	dsb	sy
 800340c:	f3bf 8f6f 	isb	sy
 8003410:	e75e      	b.n	80032d0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003412:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003414:	f000 f972 	bl	80036fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003418:	f000 fcb6 	bl	8003d88 <xTaskResumeAll>
 800341c:	e758      	b.n	80032d0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800341e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003420:	f000 f96c 	bl	80036fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003424:	f000 fcb0 	bl	8003d88 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003428:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800342a:	f000 f9b9 	bl	80037a0 <prvIsQueueEmpty>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	f43f af4d 	beq.w	80032d0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00d      	beq.n	8003458 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800343c:	f001 fe66 	bl	800510c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003440:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003442:	f000 f8b4 	bl	80035ae <prvGetDisinheritPriorityAfterTimeout>
 8003446:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8003448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800344e:	4618      	mov	r0, r3
 8003450:	f001 f96c 	bl	800472c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003454:	f001 fe8a 	bl	800516c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003458:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800345a:	4618      	mov	r0, r3
 800345c:	3738      	adds	r7, #56	; 0x38
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	e000ed04 	.word	0xe000ed04

08003468 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b08e      	sub	sp, #56	; 0x38
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10a      	bne.n	8003494 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800347e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003482:	f383 8811 	msr	BASEPRI, r3
 8003486:	f3bf 8f6f 	isb	sy
 800348a:	f3bf 8f4f 	dsb	sy
 800348e:	623b      	str	r3, [r7, #32]
}
 8003490:	bf00      	nop
 8003492:	e7fe      	b.n	8003492 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d103      	bne.n	80034a2 <xQueueReceiveFromISR+0x3a>
 800349a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <xQueueReceiveFromISR+0x3e>
 80034a2:	2301      	movs	r3, #1
 80034a4:	e000      	b.n	80034a8 <xQueueReceiveFromISR+0x40>
 80034a6:	2300      	movs	r3, #0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d10a      	bne.n	80034c2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80034ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b0:	f383 8811 	msr	BASEPRI, r3
 80034b4:	f3bf 8f6f 	isb	sy
 80034b8:	f3bf 8f4f 	dsb	sy
 80034bc:	61fb      	str	r3, [r7, #28]
}
 80034be:	bf00      	nop
 80034c0:	e7fe      	b.n	80034c0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80034c2:	f001 fee5 	bl	8005290 <vPortValidateInterruptPriority>
	__asm volatile
 80034c6:	f3ef 8211 	mrs	r2, BASEPRI
 80034ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ce:	f383 8811 	msr	BASEPRI, r3
 80034d2:	f3bf 8f6f 	isb	sy
 80034d6:	f3bf 8f4f 	dsb	sy
 80034da:	61ba      	str	r2, [r7, #24]
 80034dc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80034de:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80034e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80034e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d02f      	beq.n	800354e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80034ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80034f8:	68b9      	ldr	r1, [r7, #8]
 80034fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034fc:	f000 f8d8 	bl	80036b0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003502:	1e5a      	subs	r2, r3, #1
 8003504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003506:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003508:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800350c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003510:	d112      	bne.n	8003538 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d016      	beq.n	8003548 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800351a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800351c:	3310      	adds	r3, #16
 800351e:	4618      	mov	r0, r3
 8003520:	f000 fe48 	bl	80041b4 <xTaskRemoveFromEventList>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00e      	beq.n	8003548 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00b      	beq.n	8003548 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	601a      	str	r2, [r3, #0]
 8003536:	e007      	b.n	8003548 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003538:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800353c:	3301      	adds	r3, #1
 800353e:	b2db      	uxtb	r3, r3
 8003540:	b25a      	sxtb	r2, r3
 8003542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003544:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003548:	2301      	movs	r3, #1
 800354a:	637b      	str	r3, [r7, #52]	; 0x34
 800354c:	e001      	b.n	8003552 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800354e:	2300      	movs	r3, #0
 8003550:	637b      	str	r3, [r7, #52]	; 0x34
 8003552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003554:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	f383 8811 	msr	BASEPRI, r3
}
 800355c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800355e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003560:	4618      	mov	r0, r3
 8003562:	3738      	adds	r7, #56	; 0x38
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10a      	bne.n	8003590 <vQueueDelete+0x28>
	__asm volatile
 800357a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800357e:	f383 8811 	msr	BASEPRI, r3
 8003582:	f3bf 8f6f 	isb	sy
 8003586:	f3bf 8f4f 	dsb	sy
 800358a:	60bb      	str	r3, [r7, #8]
}
 800358c:	bf00      	nop
 800358e:	e7fe      	b.n	800358e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	f000 f95b 	bl	800384c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800359c:	2b00      	cmp	r3, #0
 800359e:	d102      	bne.n	80035a6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f001 ff77 	bl	8005494 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80035a6:	bf00      	nop
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80035ae:	b480      	push	{r7}
 80035b0:	b085      	sub	sp, #20
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d006      	beq.n	80035cc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80035c8:	60fb      	str	r3, [r7, #12]
 80035ca:	e001      	b.n	80035d0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80035cc:	2300      	movs	r3, #0
 80035ce:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80035d0:	68fb      	ldr	r3, [r7, #12]
	}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bc80      	pop	{r7}
 80035da:	4770      	bx	lr

080035dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80035e8:	2300      	movs	r3, #0
 80035ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10d      	bne.n	8003616 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d14d      	bne.n	800369e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	4618      	mov	r0, r3
 8003608:	f001 f822 	bl	8004650 <xTaskPriorityDisinherit>
 800360c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	605a      	str	r2, [r3, #4]
 8003614:	e043      	b.n	800369e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d119      	bne.n	8003650 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6898      	ldr	r0, [r3, #8]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003624:	461a      	mov	r2, r3
 8003626:	68b9      	ldr	r1, [r7, #8]
 8003628:	f002 f872 	bl	8005710 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003634:	441a      	add	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	689a      	ldr	r2, [r3, #8]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	429a      	cmp	r2, r3
 8003644:	d32b      	bcc.n	800369e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	609a      	str	r2, [r3, #8]
 800364e:	e026      	b.n	800369e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	68d8      	ldr	r0, [r3, #12]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003658:	461a      	mov	r2, r3
 800365a:	68b9      	ldr	r1, [r7, #8]
 800365c:	f002 f858 	bl	8005710 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	68da      	ldr	r2, [r3, #12]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003668:	425b      	negs	r3, r3
 800366a:	441a      	add	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	68da      	ldr	r2, [r3, #12]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	429a      	cmp	r2, r3
 800367a:	d207      	bcs.n	800368c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003684:	425b      	negs	r3, r3
 8003686:	441a      	add	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2b02      	cmp	r3, #2
 8003690:	d105      	bne.n	800369e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d002      	beq.n	800369e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	3b01      	subs	r3, #1
 800369c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1c5a      	adds	r2, r3, #1
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80036a6:	697b      	ldr	r3, [r7, #20]
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3718      	adds	r7, #24
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d018      	beq.n	80036f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68da      	ldr	r2, [r3, #12]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	441a      	add	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	68da      	ldr	r2, [r3, #12]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d303      	bcc.n	80036e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68d9      	ldr	r1, [r3, #12]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ec:	461a      	mov	r2, r3
 80036ee:	6838      	ldr	r0, [r7, #0]
 80036f0:	f002 f80e 	bl	8005710 <memcpy>
	}
}
 80036f4:	bf00      	nop
 80036f6:	3708      	adds	r7, #8
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003704:	f001 fd02 	bl	800510c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800370e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003710:	e011      	b.n	8003736 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003716:	2b00      	cmp	r3, #0
 8003718:	d012      	beq.n	8003740 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	3324      	adds	r3, #36	; 0x24
 800371e:	4618      	mov	r0, r3
 8003720:	f000 fd48 	bl	80041b4 <xTaskRemoveFromEventList>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800372a:	f000 fe1f 	bl	800436c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800372e:	7bfb      	ldrb	r3, [r7, #15]
 8003730:	3b01      	subs	r3, #1
 8003732:	b2db      	uxtb	r3, r3
 8003734:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800373a:	2b00      	cmp	r3, #0
 800373c:	dce9      	bgt.n	8003712 <prvUnlockQueue+0x16>
 800373e:	e000      	b.n	8003742 <prvUnlockQueue+0x46>
					break;
 8003740:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	22ff      	movs	r2, #255	; 0xff
 8003746:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800374a:	f001 fd0f 	bl	800516c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800374e:	f001 fcdd 	bl	800510c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003758:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800375a:	e011      	b.n	8003780 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d012      	beq.n	800378a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	3310      	adds	r3, #16
 8003768:	4618      	mov	r0, r3
 800376a:	f000 fd23 	bl	80041b4 <xTaskRemoveFromEventList>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003774:	f000 fdfa 	bl	800436c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003778:	7bbb      	ldrb	r3, [r7, #14]
 800377a:	3b01      	subs	r3, #1
 800377c:	b2db      	uxtb	r3, r3
 800377e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003780:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003784:	2b00      	cmp	r3, #0
 8003786:	dce9      	bgt.n	800375c <prvUnlockQueue+0x60>
 8003788:	e000      	b.n	800378c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800378a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	22ff      	movs	r2, #255	; 0xff
 8003790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003794:	f001 fcea 	bl	800516c <vPortExitCritical>
}
 8003798:	bf00      	nop
 800379a:	3710      	adds	r7, #16
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80037a8:	f001 fcb0 	bl	800510c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d102      	bne.n	80037ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80037b4:	2301      	movs	r3, #1
 80037b6:	60fb      	str	r3, [r7, #12]
 80037b8:	e001      	b.n	80037be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80037ba:	2300      	movs	r3, #0
 80037bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80037be:	f001 fcd5 	bl	800516c <vPortExitCritical>

	return xReturn;
 80037c2:	68fb      	ldr	r3, [r7, #12]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80037d4:	f001 fc9a 	bl	800510c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d102      	bne.n	80037ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80037e4:	2301      	movs	r3, #1
 80037e6:	60fb      	str	r3, [r7, #12]
 80037e8:	e001      	b.n	80037ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80037ea:	2300      	movs	r3, #0
 80037ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80037ee:	f001 fcbd 	bl	800516c <vPortExitCritical>

	return xReturn;
 80037f2:	68fb      	ldr	r3, [r7, #12]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003806:	2300      	movs	r3, #0
 8003808:	60fb      	str	r3, [r7, #12]
 800380a:	e014      	b.n	8003836 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800380c:	4a0e      	ldr	r2, [pc, #56]	; (8003848 <vQueueAddToRegistry+0x4c>)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d10b      	bne.n	8003830 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003818:	490b      	ldr	r1, [pc, #44]	; (8003848 <vQueueAddToRegistry+0x4c>)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003822:	4a09      	ldr	r2, [pc, #36]	; (8003848 <vQueueAddToRegistry+0x4c>)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	00db      	lsls	r3, r3, #3
 8003828:	4413      	add	r3, r2
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800382e:	e006      	b.n	800383e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	3301      	adds	r3, #1
 8003834:	60fb      	str	r3, [r7, #12]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2b07      	cmp	r3, #7
 800383a:	d9e7      	bls.n	800380c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800383c:	bf00      	nop
 800383e:	bf00      	nop
 8003840:	3714      	adds	r7, #20
 8003842:	46bd      	mov	sp, r7
 8003844:	bc80      	pop	{r7}
 8003846:	4770      	bx	lr
 8003848:	200007d4 	.word	0x200007d4

0800384c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003854:	2300      	movs	r3, #0
 8003856:	60fb      	str	r3, [r7, #12]
 8003858:	e016      	b.n	8003888 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800385a:	4a10      	ldr	r2, [pc, #64]	; (800389c <vQueueUnregisterQueue+0x50>)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	4413      	add	r3, r2
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	429a      	cmp	r2, r3
 8003868:	d10b      	bne.n	8003882 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800386a:	4a0c      	ldr	r2, [pc, #48]	; (800389c <vQueueUnregisterQueue+0x50>)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2100      	movs	r1, #0
 8003870:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003874:	4a09      	ldr	r2, [pc, #36]	; (800389c <vQueueUnregisterQueue+0x50>)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	00db      	lsls	r3, r3, #3
 800387a:	4413      	add	r3, r2
 800387c:	2200      	movs	r2, #0
 800387e:	605a      	str	r2, [r3, #4]
				break;
 8003880:	e006      	b.n	8003890 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	3301      	adds	r3, #1
 8003886:	60fb      	str	r3, [r7, #12]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2b07      	cmp	r3, #7
 800388c:	d9e5      	bls.n	800385a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800388e:	bf00      	nop
 8003890:	bf00      	nop
 8003892:	3714      	adds	r7, #20
 8003894:	46bd      	mov	sp, r7
 8003896:	bc80      	pop	{r7}
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	200007d4 	.word	0x200007d4

080038a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80038b0:	f001 fc2c 	bl	800510c <vPortEnterCritical>
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038ba:	b25b      	sxtb	r3, r3
 80038bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c0:	d103      	bne.n	80038ca <vQueueWaitForMessageRestricted+0x2a>
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038d0:	b25b      	sxtb	r3, r3
 80038d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d6:	d103      	bne.n	80038e0 <vQueueWaitForMessageRestricted+0x40>
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038e0:	f001 fc44 	bl	800516c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d106      	bne.n	80038fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	3324      	adds	r3, #36	; 0x24
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	68b9      	ldr	r1, [r7, #8]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f000 fc31 	bl	800415c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80038fa:	6978      	ldr	r0, [r7, #20]
 80038fc:	f7ff fefe 	bl	80036fc <prvUnlockQueue>
	}
 8003900:	bf00      	nop
 8003902:	3718      	adds	r7, #24
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003908:	b580      	push	{r7, lr}
 800390a:	b08e      	sub	sp, #56	; 0x38
 800390c:	af04      	add	r7, sp, #16
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
 8003914:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003918:	2b00      	cmp	r3, #0
 800391a:	d10a      	bne.n	8003932 <xTaskCreateStatic+0x2a>
	__asm volatile
 800391c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003920:	f383 8811 	msr	BASEPRI, r3
 8003924:	f3bf 8f6f 	isb	sy
 8003928:	f3bf 8f4f 	dsb	sy
 800392c:	623b      	str	r3, [r7, #32]
}
 800392e:	bf00      	nop
 8003930:	e7fe      	b.n	8003930 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10a      	bne.n	800394e <xTaskCreateStatic+0x46>
	__asm volatile
 8003938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800393c:	f383 8811 	msr	BASEPRI, r3
 8003940:	f3bf 8f6f 	isb	sy
 8003944:	f3bf 8f4f 	dsb	sy
 8003948:	61fb      	str	r3, [r7, #28]
}
 800394a:	bf00      	nop
 800394c:	e7fe      	b.n	800394c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800394e:	235c      	movs	r3, #92	; 0x5c
 8003950:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	2b5c      	cmp	r3, #92	; 0x5c
 8003956:	d00a      	beq.n	800396e <xTaskCreateStatic+0x66>
	__asm volatile
 8003958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395c:	f383 8811 	msr	BASEPRI, r3
 8003960:	f3bf 8f6f 	isb	sy
 8003964:	f3bf 8f4f 	dsb	sy
 8003968:	61bb      	str	r3, [r7, #24]
}
 800396a:	bf00      	nop
 800396c:	e7fe      	b.n	800396c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800396e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003970:	2b00      	cmp	r3, #0
 8003972:	d01e      	beq.n	80039b2 <xTaskCreateStatic+0xaa>
 8003974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003976:	2b00      	cmp	r3, #0
 8003978:	d01b      	beq.n	80039b2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800397a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800397c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800397e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003980:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003982:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003986:	2202      	movs	r2, #2
 8003988:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800398c:	2300      	movs	r3, #0
 800398e:	9303      	str	r3, [sp, #12]
 8003990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003992:	9302      	str	r3, [sp, #8]
 8003994:	f107 0314 	add.w	r3, r7, #20
 8003998:	9301      	str	r3, [sp, #4]
 800399a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399c:	9300      	str	r3, [sp, #0]
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	68b9      	ldr	r1, [r7, #8]
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f000 f850 	bl	8003a4a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039ac:	f000 f8d4 	bl	8003b58 <prvAddNewTaskToReadyList>
 80039b0:	e001      	b.n	80039b6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80039b2:	2300      	movs	r3, #0
 80039b4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80039b6:	697b      	ldr	r3, [r7, #20]
	}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3728      	adds	r7, #40	; 0x28
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b08c      	sub	sp, #48	; 0x30
 80039c4:	af04      	add	r7, sp, #16
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	603b      	str	r3, [r7, #0]
 80039cc:	4613      	mov	r3, r2
 80039ce:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039d0:	88fb      	ldrh	r3, [r7, #6]
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	4618      	mov	r0, r3
 80039d6:	f001 fc99 	bl	800530c <pvPortMalloc>
 80039da:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00e      	beq.n	8003a00 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80039e2:	205c      	movs	r0, #92	; 0x5c
 80039e4:	f001 fc92 	bl	800530c <pvPortMalloc>
 80039e8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d003      	beq.n	80039f8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	631a      	str	r2, [r3, #48]	; 0x30
 80039f6:	e005      	b.n	8003a04 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80039f8:	6978      	ldr	r0, [r7, #20]
 80039fa:	f001 fd4b 	bl	8005494 <vPortFree>
 80039fe:	e001      	b.n	8003a04 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a00:	2300      	movs	r3, #0
 8003a02:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d017      	beq.n	8003a3a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a12:	88fa      	ldrh	r2, [r7, #6]
 8003a14:	2300      	movs	r3, #0
 8003a16:	9303      	str	r3, [sp, #12]
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	9302      	str	r3, [sp, #8]
 8003a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a1e:	9301      	str	r3, [sp, #4]
 8003a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a22:	9300      	str	r3, [sp, #0]
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	68b9      	ldr	r1, [r7, #8]
 8003a28:	68f8      	ldr	r0, [r7, #12]
 8003a2a:	f000 f80e 	bl	8003a4a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a2e:	69f8      	ldr	r0, [r7, #28]
 8003a30:	f000 f892 	bl	8003b58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a34:	2301      	movs	r3, #1
 8003a36:	61bb      	str	r3, [r7, #24]
 8003a38:	e002      	b.n	8003a40 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a3e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003a40:	69bb      	ldr	r3, [r7, #24]
	}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3720      	adds	r7, #32
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b088      	sub	sp, #32
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	60f8      	str	r0, [r7, #12]
 8003a52:	60b9      	str	r1, [r7, #8]
 8003a54:	607a      	str	r2, [r7, #4]
 8003a56:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	461a      	mov	r2, r3
 8003a62:	21a5      	movs	r1, #165	; 0xa5
 8003a64:	f001 fe62 	bl	800572c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a72:	3b01      	subs	r3, #1
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	4413      	add	r3, r2
 8003a78:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	f023 0307 	bic.w	r3, r3, #7
 8003a80:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	f003 0307 	and.w	r3, r3, #7
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00a      	beq.n	8003aa2 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a90:	f383 8811 	msr	BASEPRI, r3
 8003a94:	f3bf 8f6f 	isb	sy
 8003a98:	f3bf 8f4f 	dsb	sy
 8003a9c:	617b      	str	r3, [r7, #20]
}
 8003a9e:	bf00      	nop
 8003aa0:	e7fe      	b.n	8003aa0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	61fb      	str	r3, [r7, #28]
 8003aa6:	e012      	b.n	8003ace <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003aa8:	68ba      	ldr	r2, [r7, #8]
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	4413      	add	r3, r2
 8003aae:	7819      	ldrb	r1, [r3, #0]
 8003ab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	3334      	adds	r3, #52	; 0x34
 8003ab8:	460a      	mov	r2, r1
 8003aba:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d006      	beq.n	8003ad6 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	3301      	adds	r3, #1
 8003acc:	61fb      	str	r3, [r7, #28]
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	2b0f      	cmp	r3, #15
 8003ad2:	d9e9      	bls.n	8003aa8 <prvInitialiseNewTask+0x5e>
 8003ad4:	e000      	b.n	8003ad8 <prvInitialiseNewTask+0x8e>
		{
			break;
 8003ad6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae2:	2b37      	cmp	r3, #55	; 0x37
 8003ae4:	d901      	bls.n	8003aea <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003ae6:	2337      	movs	r3, #55	; 0x37
 8003ae8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003aee:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003af4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af8:	2200      	movs	r2, #0
 8003afa:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afe:	3304      	adds	r3, #4
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7fe fe66 	bl	80027d2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b08:	3318      	adds	r3, #24
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7fe fe61 	bl	80027d2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b14:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b18:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b24:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b28:	2200      	movs	r2, #0
 8003b2a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	68f9      	ldr	r1, [r7, #12]
 8003b38:	69b8      	ldr	r0, [r7, #24]
 8003b3a:	f001 f9f7 	bl	8004f2c <pxPortInitialiseStack>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b42:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d002      	beq.n	8003b50 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b4e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b50:	bf00      	nop
 8003b52:	3720      	adds	r7, #32
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003b60:	f001 fad4 	bl	800510c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003b64:	4b2d      	ldr	r3, [pc, #180]	; (8003c1c <prvAddNewTaskToReadyList+0xc4>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	3301      	adds	r3, #1
 8003b6a:	4a2c      	ldr	r2, [pc, #176]	; (8003c1c <prvAddNewTaskToReadyList+0xc4>)
 8003b6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003b6e:	4b2c      	ldr	r3, [pc, #176]	; (8003c20 <prvAddNewTaskToReadyList+0xc8>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d109      	bne.n	8003b8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003b76:	4a2a      	ldr	r2, [pc, #168]	; (8003c20 <prvAddNewTaskToReadyList+0xc8>)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003b7c:	4b27      	ldr	r3, [pc, #156]	; (8003c1c <prvAddNewTaskToReadyList+0xc4>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d110      	bne.n	8003ba6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003b84:	f000 fc16 	bl	80043b4 <prvInitialiseTaskLists>
 8003b88:	e00d      	b.n	8003ba6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003b8a:	4b26      	ldr	r3, [pc, #152]	; (8003c24 <prvAddNewTaskToReadyList+0xcc>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d109      	bne.n	8003ba6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003b92:	4b23      	ldr	r3, [pc, #140]	; (8003c20 <prvAddNewTaskToReadyList+0xc8>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d802      	bhi.n	8003ba6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003ba0:	4a1f      	ldr	r2, [pc, #124]	; (8003c20 <prvAddNewTaskToReadyList+0xc8>)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003ba6:	4b20      	ldr	r3, [pc, #128]	; (8003c28 <prvAddNewTaskToReadyList+0xd0>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	3301      	adds	r3, #1
 8003bac:	4a1e      	ldr	r2, [pc, #120]	; (8003c28 <prvAddNewTaskToReadyList+0xd0>)
 8003bae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003bb0:	4b1d      	ldr	r3, [pc, #116]	; (8003c28 <prvAddNewTaskToReadyList+0xd0>)
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bbc:	4b1b      	ldr	r3, [pc, #108]	; (8003c2c <prvAddNewTaskToReadyList+0xd4>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d903      	bls.n	8003bcc <prvAddNewTaskToReadyList+0x74>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc8:	4a18      	ldr	r2, [pc, #96]	; (8003c2c <prvAddNewTaskToReadyList+0xd4>)
 8003bca:	6013      	str	r3, [r2, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	4413      	add	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	4a15      	ldr	r2, [pc, #84]	; (8003c30 <prvAddNewTaskToReadyList+0xd8>)
 8003bda:	441a      	add	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	3304      	adds	r3, #4
 8003be0:	4619      	mov	r1, r3
 8003be2:	4610      	mov	r0, r2
 8003be4:	f7fe fe01 	bl	80027ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003be8:	f001 fac0 	bl	800516c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003bec:	4b0d      	ldr	r3, [pc, #52]	; (8003c24 <prvAddNewTaskToReadyList+0xcc>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00e      	beq.n	8003c12 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003bf4:	4b0a      	ldr	r3, [pc, #40]	; (8003c20 <prvAddNewTaskToReadyList+0xc8>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d207      	bcs.n	8003c12 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c02:	4b0c      	ldr	r3, [pc, #48]	; (8003c34 <prvAddNewTaskToReadyList+0xdc>)
 8003c04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c08:	601a      	str	r2, [r3, #0]
 8003c0a:	f3bf 8f4f 	dsb	sy
 8003c0e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c12:	bf00      	nop
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	20000ce8 	.word	0x20000ce8
 8003c20:	20000814 	.word	0x20000814
 8003c24:	20000cf4 	.word	0x20000cf4
 8003c28:	20000d04 	.word	0x20000d04
 8003c2c:	20000cf0 	.word	0x20000cf0
 8003c30:	20000818 	.word	0x20000818
 8003c34:	e000ed04 	.word	0xe000ed04

08003c38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003c40:	2300      	movs	r3, #0
 8003c42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d017      	beq.n	8003c7a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003c4a:	4b13      	ldr	r3, [pc, #76]	; (8003c98 <vTaskDelay+0x60>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00a      	beq.n	8003c68 <vTaskDelay+0x30>
	__asm volatile
 8003c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c56:	f383 8811 	msr	BASEPRI, r3
 8003c5a:	f3bf 8f6f 	isb	sy
 8003c5e:	f3bf 8f4f 	dsb	sy
 8003c62:	60bb      	str	r3, [r7, #8]
}
 8003c64:	bf00      	nop
 8003c66:	e7fe      	b.n	8003c66 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003c68:	f000 f880 	bl	8003d6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003c6c:	2100      	movs	r1, #0
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 fdf6 	bl	8004860 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003c74:	f000 f888 	bl	8003d88 <xTaskResumeAll>
 8003c78:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d107      	bne.n	8003c90 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003c80:	4b06      	ldr	r3, [pc, #24]	; (8003c9c <vTaskDelay+0x64>)
 8003c82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	f3bf 8f4f 	dsb	sy
 8003c8c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003c90:	bf00      	nop
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	20000d10 	.word	0x20000d10
 8003c9c:	e000ed04 	.word	0xe000ed04

08003ca0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b08a      	sub	sp, #40	; 0x28
 8003ca4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003caa:	2300      	movs	r3, #0
 8003cac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003cae:	463a      	mov	r2, r7
 8003cb0:	1d39      	adds	r1, r7, #4
 8003cb2:	f107 0308 	add.w	r3, r7, #8
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7fe fd3a 	bl	8002730 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003cbc:	6839      	ldr	r1, [r7, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68ba      	ldr	r2, [r7, #8]
 8003cc2:	9202      	str	r2, [sp, #8]
 8003cc4:	9301      	str	r3, [sp, #4]
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	9300      	str	r3, [sp, #0]
 8003cca:	2300      	movs	r3, #0
 8003ccc:	460a      	mov	r2, r1
 8003cce:	4921      	ldr	r1, [pc, #132]	; (8003d54 <vTaskStartScheduler+0xb4>)
 8003cd0:	4821      	ldr	r0, [pc, #132]	; (8003d58 <vTaskStartScheduler+0xb8>)
 8003cd2:	f7ff fe19 	bl	8003908 <xTaskCreateStatic>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	4a20      	ldr	r2, [pc, #128]	; (8003d5c <vTaskStartScheduler+0xbc>)
 8003cda:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003cdc:	4b1f      	ldr	r3, [pc, #124]	; (8003d5c <vTaskStartScheduler+0xbc>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d002      	beq.n	8003cea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	617b      	str	r3, [r7, #20]
 8003ce8:	e001      	b.n	8003cee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003cea:	2300      	movs	r3, #0
 8003cec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d102      	bne.n	8003cfa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003cf4:	f000 fe08 	bl	8004908 <xTimerCreateTimerTask>
 8003cf8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d116      	bne.n	8003d2e <vTaskStartScheduler+0x8e>
	__asm volatile
 8003d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d04:	f383 8811 	msr	BASEPRI, r3
 8003d08:	f3bf 8f6f 	isb	sy
 8003d0c:	f3bf 8f4f 	dsb	sy
 8003d10:	613b      	str	r3, [r7, #16]
}
 8003d12:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d14:	4b12      	ldr	r3, [pc, #72]	; (8003d60 <vTaskStartScheduler+0xc0>)
 8003d16:	f04f 32ff 	mov.w	r2, #4294967295
 8003d1a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d1c:	4b11      	ldr	r3, [pc, #68]	; (8003d64 <vTaskStartScheduler+0xc4>)
 8003d1e:	2201      	movs	r2, #1
 8003d20:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003d22:	4b11      	ldr	r3, [pc, #68]	; (8003d68 <vTaskStartScheduler+0xc8>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d28:	f001 f97e 	bl	8005028 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d2c:	e00e      	b.n	8003d4c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d34:	d10a      	bne.n	8003d4c <vTaskStartScheduler+0xac>
	__asm volatile
 8003d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d3a:	f383 8811 	msr	BASEPRI, r3
 8003d3e:	f3bf 8f6f 	isb	sy
 8003d42:	f3bf 8f4f 	dsb	sy
 8003d46:	60fb      	str	r3, [r7, #12]
}
 8003d48:	bf00      	nop
 8003d4a:	e7fe      	b.n	8003d4a <vTaskStartScheduler+0xaa>
}
 8003d4c:	bf00      	nop
 8003d4e:	3718      	adds	r7, #24
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	080060d0 	.word	0x080060d0
 8003d58:	08004385 	.word	0x08004385
 8003d5c:	20000d0c 	.word	0x20000d0c
 8003d60:	20000d08 	.word	0x20000d08
 8003d64:	20000cf4 	.word	0x20000cf4
 8003d68:	20000cec 	.word	0x20000cec

08003d6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003d70:	4b04      	ldr	r3, [pc, #16]	; (8003d84 <vTaskSuspendAll+0x18>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	3301      	adds	r3, #1
 8003d76:	4a03      	ldr	r2, [pc, #12]	; (8003d84 <vTaskSuspendAll+0x18>)
 8003d78:	6013      	str	r3, [r2, #0]
}
 8003d7a:	bf00      	nop
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bc80      	pop	{r7}
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	20000d10 	.word	0x20000d10

08003d88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003d92:	2300      	movs	r3, #0
 8003d94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003d96:	4b42      	ldr	r3, [pc, #264]	; (8003ea0 <xTaskResumeAll+0x118>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10a      	bne.n	8003db4 <xTaskResumeAll+0x2c>
	__asm volatile
 8003d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da2:	f383 8811 	msr	BASEPRI, r3
 8003da6:	f3bf 8f6f 	isb	sy
 8003daa:	f3bf 8f4f 	dsb	sy
 8003dae:	603b      	str	r3, [r7, #0]
}
 8003db0:	bf00      	nop
 8003db2:	e7fe      	b.n	8003db2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003db4:	f001 f9aa 	bl	800510c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003db8:	4b39      	ldr	r3, [pc, #228]	; (8003ea0 <xTaskResumeAll+0x118>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	4a38      	ldr	r2, [pc, #224]	; (8003ea0 <xTaskResumeAll+0x118>)
 8003dc0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dc2:	4b37      	ldr	r3, [pc, #220]	; (8003ea0 <xTaskResumeAll+0x118>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d162      	bne.n	8003e90 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003dca:	4b36      	ldr	r3, [pc, #216]	; (8003ea4 <xTaskResumeAll+0x11c>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d05e      	beq.n	8003e90 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003dd2:	e02f      	b.n	8003e34 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003dd4:	4b34      	ldr	r3, [pc, #208]	; (8003ea8 <xTaskResumeAll+0x120>)
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	3318      	adds	r3, #24
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7fe fd5d 	bl	80028a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	3304      	adds	r3, #4
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7fe fd58 	bl	80028a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003df4:	4b2d      	ldr	r3, [pc, #180]	; (8003eac <xTaskResumeAll+0x124>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d903      	bls.n	8003e04 <xTaskResumeAll+0x7c>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e00:	4a2a      	ldr	r2, [pc, #168]	; (8003eac <xTaskResumeAll+0x124>)
 8003e02:	6013      	str	r3, [r2, #0]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e08:	4613      	mov	r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	4413      	add	r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	4a27      	ldr	r2, [pc, #156]	; (8003eb0 <xTaskResumeAll+0x128>)
 8003e12:	441a      	add	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	3304      	adds	r3, #4
 8003e18:	4619      	mov	r1, r3
 8003e1a:	4610      	mov	r0, r2
 8003e1c:	f7fe fce5 	bl	80027ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e24:	4b23      	ldr	r3, [pc, #140]	; (8003eb4 <xTaskResumeAll+0x12c>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d302      	bcc.n	8003e34 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003e2e:	4b22      	ldr	r3, [pc, #136]	; (8003eb8 <xTaskResumeAll+0x130>)
 8003e30:	2201      	movs	r2, #1
 8003e32:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e34:	4b1c      	ldr	r3, [pc, #112]	; (8003ea8 <xTaskResumeAll+0x120>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1cb      	bne.n	8003dd4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003e42:	f000 fb55 	bl	80044f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003e46:	4b1d      	ldr	r3, [pc, #116]	; (8003ebc <xTaskResumeAll+0x134>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d010      	beq.n	8003e74 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003e52:	f000 f845 	bl	8003ee0 <xTaskIncrementTick>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d002      	beq.n	8003e62 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003e5c:	4b16      	ldr	r3, [pc, #88]	; (8003eb8 <xTaskResumeAll+0x130>)
 8003e5e:	2201      	movs	r2, #1
 8003e60:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	3b01      	subs	r3, #1
 8003e66:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1f1      	bne.n	8003e52 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003e6e:	4b13      	ldr	r3, [pc, #76]	; (8003ebc <xTaskResumeAll+0x134>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003e74:	4b10      	ldr	r3, [pc, #64]	; (8003eb8 <xTaskResumeAll+0x130>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d009      	beq.n	8003e90 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003e80:	4b0f      	ldr	r3, [pc, #60]	; (8003ec0 <xTaskResumeAll+0x138>)
 8003e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e86:	601a      	str	r2, [r3, #0]
 8003e88:	f3bf 8f4f 	dsb	sy
 8003e8c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003e90:	f001 f96c 	bl	800516c <vPortExitCritical>

	return xAlreadyYielded;
 8003e94:	68bb      	ldr	r3, [r7, #8]
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	20000d10 	.word	0x20000d10
 8003ea4:	20000ce8 	.word	0x20000ce8
 8003ea8:	20000ca8 	.word	0x20000ca8
 8003eac:	20000cf0 	.word	0x20000cf0
 8003eb0:	20000818 	.word	0x20000818
 8003eb4:	20000814 	.word	0x20000814
 8003eb8:	20000cfc 	.word	0x20000cfc
 8003ebc:	20000cf8 	.word	0x20000cf8
 8003ec0:	e000ed04 	.word	0xe000ed04

08003ec4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003eca:	4b04      	ldr	r3, [pc, #16]	; (8003edc <xTaskGetTickCount+0x18>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003ed0:	687b      	ldr	r3, [r7, #4]
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bc80      	pop	{r7}
 8003eda:	4770      	bx	lr
 8003edc:	20000cec 	.word	0x20000cec

08003ee0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003eea:	4b51      	ldr	r3, [pc, #324]	; (8004030 <xTaskIncrementTick+0x150>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f040 808e 	bne.w	8004010 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ef4:	4b4f      	ldr	r3, [pc, #316]	; (8004034 <xTaskIncrementTick+0x154>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003efc:	4a4d      	ldr	r2, [pc, #308]	; (8004034 <xTaskIncrementTick+0x154>)
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d120      	bne.n	8003f4a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f08:	4b4b      	ldr	r3, [pc, #300]	; (8004038 <xTaskIncrementTick+0x158>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00a      	beq.n	8003f28 <xTaskIncrementTick+0x48>
	__asm volatile
 8003f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f16:	f383 8811 	msr	BASEPRI, r3
 8003f1a:	f3bf 8f6f 	isb	sy
 8003f1e:	f3bf 8f4f 	dsb	sy
 8003f22:	603b      	str	r3, [r7, #0]
}
 8003f24:	bf00      	nop
 8003f26:	e7fe      	b.n	8003f26 <xTaskIncrementTick+0x46>
 8003f28:	4b43      	ldr	r3, [pc, #268]	; (8004038 <xTaskIncrementTick+0x158>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	60fb      	str	r3, [r7, #12]
 8003f2e:	4b43      	ldr	r3, [pc, #268]	; (800403c <xTaskIncrementTick+0x15c>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a41      	ldr	r2, [pc, #260]	; (8004038 <xTaskIncrementTick+0x158>)
 8003f34:	6013      	str	r3, [r2, #0]
 8003f36:	4a41      	ldr	r2, [pc, #260]	; (800403c <xTaskIncrementTick+0x15c>)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6013      	str	r3, [r2, #0]
 8003f3c:	4b40      	ldr	r3, [pc, #256]	; (8004040 <xTaskIncrementTick+0x160>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	3301      	adds	r3, #1
 8003f42:	4a3f      	ldr	r2, [pc, #252]	; (8004040 <xTaskIncrementTick+0x160>)
 8003f44:	6013      	str	r3, [r2, #0]
 8003f46:	f000 fad3 	bl	80044f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f4a:	4b3e      	ldr	r3, [pc, #248]	; (8004044 <xTaskIncrementTick+0x164>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d34e      	bcc.n	8003ff2 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f54:	4b38      	ldr	r3, [pc, #224]	; (8004038 <xTaskIncrementTick+0x158>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <xTaskIncrementTick+0x82>
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e000      	b.n	8003f64 <xTaskIncrementTick+0x84>
 8003f62:	2300      	movs	r3, #0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d004      	beq.n	8003f72 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f68:	4b36      	ldr	r3, [pc, #216]	; (8004044 <xTaskIncrementTick+0x164>)
 8003f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f6e:	601a      	str	r2, [r3, #0]
					break;
 8003f70:	e03f      	b.n	8003ff2 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003f72:	4b31      	ldr	r3, [pc, #196]	; (8004038 <xTaskIncrementTick+0x158>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d203      	bcs.n	8003f92 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003f8a:	4a2e      	ldr	r2, [pc, #184]	; (8004044 <xTaskIncrementTick+0x164>)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6013      	str	r3, [r2, #0]
						break;
 8003f90:	e02f      	b.n	8003ff2 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	3304      	adds	r3, #4
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7fe fc82 	bl	80028a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d004      	beq.n	8003fae <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	3318      	adds	r3, #24
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7fe fc79 	bl	80028a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fb2:	4b25      	ldr	r3, [pc, #148]	; (8004048 <xTaskIncrementTick+0x168>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d903      	bls.n	8003fc2 <xTaskIncrementTick+0xe2>
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fbe:	4a22      	ldr	r2, [pc, #136]	; (8004048 <xTaskIncrementTick+0x168>)
 8003fc0:	6013      	str	r3, [r2, #0]
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	4413      	add	r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	4a1f      	ldr	r2, [pc, #124]	; (800404c <xTaskIncrementTick+0x16c>)
 8003fd0:	441a      	add	r2, r3
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	3304      	adds	r3, #4
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	4610      	mov	r0, r2
 8003fda:	f7fe fc06 	bl	80027ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fe2:	4b1b      	ldr	r3, [pc, #108]	; (8004050 <xTaskIncrementTick+0x170>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d3b3      	bcc.n	8003f54 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003fec:	2301      	movs	r3, #1
 8003fee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ff0:	e7b0      	b.n	8003f54 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003ff2:	4b17      	ldr	r3, [pc, #92]	; (8004050 <xTaskIncrementTick+0x170>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff8:	4914      	ldr	r1, [pc, #80]	; (800404c <xTaskIncrementTick+0x16c>)
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	4413      	add	r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	440b      	add	r3, r1
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d907      	bls.n	800401a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800400a:	2301      	movs	r3, #1
 800400c:	617b      	str	r3, [r7, #20]
 800400e:	e004      	b.n	800401a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004010:	4b10      	ldr	r3, [pc, #64]	; (8004054 <xTaskIncrementTick+0x174>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	3301      	adds	r3, #1
 8004016:	4a0f      	ldr	r2, [pc, #60]	; (8004054 <xTaskIncrementTick+0x174>)
 8004018:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800401a:	4b0f      	ldr	r3, [pc, #60]	; (8004058 <xTaskIncrementTick+0x178>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8004022:	2301      	movs	r3, #1
 8004024:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004026:	697b      	ldr	r3, [r7, #20]
}
 8004028:	4618      	mov	r0, r3
 800402a:	3718      	adds	r7, #24
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	20000d10 	.word	0x20000d10
 8004034:	20000cec 	.word	0x20000cec
 8004038:	20000ca0 	.word	0x20000ca0
 800403c:	20000ca4 	.word	0x20000ca4
 8004040:	20000d00 	.word	0x20000d00
 8004044:	20000d08 	.word	0x20000d08
 8004048:	20000cf0 	.word	0x20000cf0
 800404c:	20000818 	.word	0x20000818
 8004050:	20000814 	.word	0x20000814
 8004054:	20000cf8 	.word	0x20000cf8
 8004058:	20000cfc 	.word	0x20000cfc

0800405c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004062:	4b27      	ldr	r3, [pc, #156]	; (8004100 <vTaskSwitchContext+0xa4>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800406a:	4b26      	ldr	r3, [pc, #152]	; (8004104 <vTaskSwitchContext+0xa8>)
 800406c:	2201      	movs	r2, #1
 800406e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004070:	e041      	b.n	80040f6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004072:	4b24      	ldr	r3, [pc, #144]	; (8004104 <vTaskSwitchContext+0xa8>)
 8004074:	2200      	movs	r2, #0
 8004076:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004078:	4b23      	ldr	r3, [pc, #140]	; (8004108 <vTaskSwitchContext+0xac>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	60fb      	str	r3, [r7, #12]
 800407e:	e010      	b.n	80040a2 <vTaskSwitchContext+0x46>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10a      	bne.n	800409c <vTaskSwitchContext+0x40>
	__asm volatile
 8004086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408a:	f383 8811 	msr	BASEPRI, r3
 800408e:	f3bf 8f6f 	isb	sy
 8004092:	f3bf 8f4f 	dsb	sy
 8004096:	607b      	str	r3, [r7, #4]
}
 8004098:	bf00      	nop
 800409a:	e7fe      	b.n	800409a <vTaskSwitchContext+0x3e>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	3b01      	subs	r3, #1
 80040a0:	60fb      	str	r3, [r7, #12]
 80040a2:	491a      	ldr	r1, [pc, #104]	; (800410c <vTaskSwitchContext+0xb0>)
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	4613      	mov	r3, r2
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	4413      	add	r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	440b      	add	r3, r1
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d0e4      	beq.n	8004080 <vTaskSwitchContext+0x24>
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	4613      	mov	r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	4413      	add	r3, r2
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	4a12      	ldr	r2, [pc, #72]	; (800410c <vTaskSwitchContext+0xb0>)
 80040c2:	4413      	add	r3, r2
 80040c4:	60bb      	str	r3, [r7, #8]
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	685a      	ldr	r2, [r3, #4]
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	605a      	str	r2, [r3, #4]
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	685a      	ldr	r2, [r3, #4]
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	3308      	adds	r3, #8
 80040d8:	429a      	cmp	r2, r3
 80040da:	d104      	bne.n	80040e6 <vTaskSwitchContext+0x8a>
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	685a      	ldr	r2, [r3, #4]
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	605a      	str	r2, [r3, #4]
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	4a08      	ldr	r2, [pc, #32]	; (8004110 <vTaskSwitchContext+0xb4>)
 80040ee:	6013      	str	r3, [r2, #0]
 80040f0:	4a05      	ldr	r2, [pc, #20]	; (8004108 <vTaskSwitchContext+0xac>)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6013      	str	r3, [r2, #0]
}
 80040f6:	bf00      	nop
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bc80      	pop	{r7}
 80040fe:	4770      	bx	lr
 8004100:	20000d10 	.word	0x20000d10
 8004104:	20000cfc 	.word	0x20000cfc
 8004108:	20000cf0 	.word	0x20000cf0
 800410c:	20000818 	.word	0x20000818
 8004110:	20000814 	.word	0x20000814

08004114 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d10a      	bne.n	800413a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004128:	f383 8811 	msr	BASEPRI, r3
 800412c:	f3bf 8f6f 	isb	sy
 8004130:	f3bf 8f4f 	dsb	sy
 8004134:	60fb      	str	r3, [r7, #12]
}
 8004136:	bf00      	nop
 8004138:	e7fe      	b.n	8004138 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800413a:	4b07      	ldr	r3, [pc, #28]	; (8004158 <vTaskPlaceOnEventList+0x44>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	3318      	adds	r3, #24
 8004140:	4619      	mov	r1, r3
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f7fe fb74 	bl	8002830 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004148:	2101      	movs	r1, #1
 800414a:	6838      	ldr	r0, [r7, #0]
 800414c:	f000 fb88 	bl	8004860 <prvAddCurrentTaskToDelayedList>
}
 8004150:	bf00      	nop
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	20000814 	.word	0x20000814

0800415c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d10a      	bne.n	8004184 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800416e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004172:	f383 8811 	msr	BASEPRI, r3
 8004176:	f3bf 8f6f 	isb	sy
 800417a:	f3bf 8f4f 	dsb	sy
 800417e:	617b      	str	r3, [r7, #20]
}
 8004180:	bf00      	nop
 8004182:	e7fe      	b.n	8004182 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004184:	4b0a      	ldr	r3, [pc, #40]	; (80041b0 <vTaskPlaceOnEventListRestricted+0x54>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	3318      	adds	r3, #24
 800418a:	4619      	mov	r1, r3
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f7fe fb2c 	bl	80027ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d002      	beq.n	800419e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004198:	f04f 33ff 	mov.w	r3, #4294967295
 800419c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800419e:	6879      	ldr	r1, [r7, #4]
 80041a0:	68b8      	ldr	r0, [r7, #8]
 80041a2:	f000 fb5d 	bl	8004860 <prvAddCurrentTaskToDelayedList>
	}
 80041a6:	bf00      	nop
 80041a8:	3718      	adds	r7, #24
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	20000814 	.word	0x20000814

080041b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b086      	sub	sp, #24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10a      	bne.n	80041e0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80041ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ce:	f383 8811 	msr	BASEPRI, r3
 80041d2:	f3bf 8f6f 	isb	sy
 80041d6:	f3bf 8f4f 	dsb	sy
 80041da:	60fb      	str	r3, [r7, #12]
}
 80041dc:	bf00      	nop
 80041de:	e7fe      	b.n	80041de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	3318      	adds	r3, #24
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7fe fb5b 	bl	80028a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041ea:	4b1e      	ldr	r3, [pc, #120]	; (8004264 <xTaskRemoveFromEventList+0xb0>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d11d      	bne.n	800422e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	3304      	adds	r3, #4
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7fe fb52 	bl	80028a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004200:	4b19      	ldr	r3, [pc, #100]	; (8004268 <xTaskRemoveFromEventList+0xb4>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	429a      	cmp	r2, r3
 8004206:	d903      	bls.n	8004210 <xTaskRemoveFromEventList+0x5c>
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420c:	4a16      	ldr	r2, [pc, #88]	; (8004268 <xTaskRemoveFromEventList+0xb4>)
 800420e:	6013      	str	r3, [r2, #0]
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004214:	4613      	mov	r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	4413      	add	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4a13      	ldr	r2, [pc, #76]	; (800426c <xTaskRemoveFromEventList+0xb8>)
 800421e:	441a      	add	r2, r3
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	3304      	adds	r3, #4
 8004224:	4619      	mov	r1, r3
 8004226:	4610      	mov	r0, r2
 8004228:	f7fe fadf 	bl	80027ea <vListInsertEnd>
 800422c:	e005      	b.n	800423a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	3318      	adds	r3, #24
 8004232:	4619      	mov	r1, r3
 8004234:	480e      	ldr	r0, [pc, #56]	; (8004270 <xTaskRemoveFromEventList+0xbc>)
 8004236:	f7fe fad8 	bl	80027ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800423e:	4b0d      	ldr	r3, [pc, #52]	; (8004274 <xTaskRemoveFromEventList+0xc0>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004244:	429a      	cmp	r2, r3
 8004246:	d905      	bls.n	8004254 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004248:	2301      	movs	r3, #1
 800424a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800424c:	4b0a      	ldr	r3, [pc, #40]	; (8004278 <xTaskRemoveFromEventList+0xc4>)
 800424e:	2201      	movs	r2, #1
 8004250:	601a      	str	r2, [r3, #0]
 8004252:	e001      	b.n	8004258 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004254:	2300      	movs	r3, #0
 8004256:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004258:	697b      	ldr	r3, [r7, #20]
}
 800425a:	4618      	mov	r0, r3
 800425c:	3718      	adds	r7, #24
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	20000d10 	.word	0x20000d10
 8004268:	20000cf0 	.word	0x20000cf0
 800426c:	20000818 	.word	0x20000818
 8004270:	20000ca8 	.word	0x20000ca8
 8004274:	20000814 	.word	0x20000814
 8004278:	20000cfc 	.word	0x20000cfc

0800427c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004284:	4b06      	ldr	r3, [pc, #24]	; (80042a0 <vTaskInternalSetTimeOutState+0x24>)
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800428c:	4b05      	ldr	r3, [pc, #20]	; (80042a4 <vTaskInternalSetTimeOutState+0x28>)
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	605a      	str	r2, [r3, #4]
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	bc80      	pop	{r7}
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	20000d00 	.word	0x20000d00
 80042a4:	20000cec 	.word	0x20000cec

080042a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b088      	sub	sp, #32
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10a      	bne.n	80042ce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80042b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042bc:	f383 8811 	msr	BASEPRI, r3
 80042c0:	f3bf 8f6f 	isb	sy
 80042c4:	f3bf 8f4f 	dsb	sy
 80042c8:	613b      	str	r3, [r7, #16]
}
 80042ca:	bf00      	nop
 80042cc:	e7fe      	b.n	80042cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d10a      	bne.n	80042ea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80042d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d8:	f383 8811 	msr	BASEPRI, r3
 80042dc:	f3bf 8f6f 	isb	sy
 80042e0:	f3bf 8f4f 	dsb	sy
 80042e4:	60fb      	str	r3, [r7, #12]
}
 80042e6:	bf00      	nop
 80042e8:	e7fe      	b.n	80042e8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80042ea:	f000 ff0f 	bl	800510c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80042ee:	4b1d      	ldr	r3, [pc, #116]	; (8004364 <xTaskCheckForTimeOut+0xbc>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	69ba      	ldr	r2, [r7, #24]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004306:	d102      	bne.n	800430e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004308:	2300      	movs	r3, #0
 800430a:	61fb      	str	r3, [r7, #28]
 800430c:	e023      	b.n	8004356 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	4b15      	ldr	r3, [pc, #84]	; (8004368 <xTaskCheckForTimeOut+0xc0>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	429a      	cmp	r2, r3
 8004318:	d007      	beq.n	800432a <xTaskCheckForTimeOut+0x82>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	69ba      	ldr	r2, [r7, #24]
 8004320:	429a      	cmp	r2, r3
 8004322:	d302      	bcc.n	800432a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004324:	2301      	movs	r3, #1
 8004326:	61fb      	str	r3, [r7, #28]
 8004328:	e015      	b.n	8004356 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	429a      	cmp	r2, r3
 8004332:	d20b      	bcs.n	800434c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	1ad2      	subs	r2, r2, r3
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f7ff ff9b 	bl	800427c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004346:	2300      	movs	r3, #0
 8004348:	61fb      	str	r3, [r7, #28]
 800434a:	e004      	b.n	8004356 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	2200      	movs	r2, #0
 8004350:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004352:	2301      	movs	r3, #1
 8004354:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004356:	f000 ff09 	bl	800516c <vPortExitCritical>

	return xReturn;
 800435a:	69fb      	ldr	r3, [r7, #28]
}
 800435c:	4618      	mov	r0, r3
 800435e:	3720      	adds	r7, #32
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	20000cec 	.word	0x20000cec
 8004368:	20000d00 	.word	0x20000d00

0800436c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004370:	4b03      	ldr	r3, [pc, #12]	; (8004380 <vTaskMissedYield+0x14>)
 8004372:	2201      	movs	r2, #1
 8004374:	601a      	str	r2, [r3, #0]
}
 8004376:	bf00      	nop
 8004378:	46bd      	mov	sp, r7
 800437a:	bc80      	pop	{r7}
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	20000cfc 	.word	0x20000cfc

08004384 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800438c:	f000 f852 	bl	8004434 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004390:	4b06      	ldr	r3, [pc, #24]	; (80043ac <prvIdleTask+0x28>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d9f9      	bls.n	800438c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004398:	4b05      	ldr	r3, [pc, #20]	; (80043b0 <prvIdleTask+0x2c>)
 800439a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800439e:	601a      	str	r2, [r3, #0]
 80043a0:	f3bf 8f4f 	dsb	sy
 80043a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80043a8:	e7f0      	b.n	800438c <prvIdleTask+0x8>
 80043aa:	bf00      	nop
 80043ac:	20000818 	.word	0x20000818
 80043b0:	e000ed04 	.word	0xe000ed04

080043b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043ba:	2300      	movs	r3, #0
 80043bc:	607b      	str	r3, [r7, #4]
 80043be:	e00c      	b.n	80043da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	4613      	mov	r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	4413      	add	r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	4a12      	ldr	r2, [pc, #72]	; (8004414 <prvInitialiseTaskLists+0x60>)
 80043cc:	4413      	add	r3, r2
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7fe f9e0 	bl	8002794 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	3301      	adds	r3, #1
 80043d8:	607b      	str	r3, [r7, #4]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2b37      	cmp	r3, #55	; 0x37
 80043de:	d9ef      	bls.n	80043c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80043e0:	480d      	ldr	r0, [pc, #52]	; (8004418 <prvInitialiseTaskLists+0x64>)
 80043e2:	f7fe f9d7 	bl	8002794 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80043e6:	480d      	ldr	r0, [pc, #52]	; (800441c <prvInitialiseTaskLists+0x68>)
 80043e8:	f7fe f9d4 	bl	8002794 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80043ec:	480c      	ldr	r0, [pc, #48]	; (8004420 <prvInitialiseTaskLists+0x6c>)
 80043ee:	f7fe f9d1 	bl	8002794 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80043f2:	480c      	ldr	r0, [pc, #48]	; (8004424 <prvInitialiseTaskLists+0x70>)
 80043f4:	f7fe f9ce 	bl	8002794 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80043f8:	480b      	ldr	r0, [pc, #44]	; (8004428 <prvInitialiseTaskLists+0x74>)
 80043fa:	f7fe f9cb 	bl	8002794 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80043fe:	4b0b      	ldr	r3, [pc, #44]	; (800442c <prvInitialiseTaskLists+0x78>)
 8004400:	4a05      	ldr	r2, [pc, #20]	; (8004418 <prvInitialiseTaskLists+0x64>)
 8004402:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004404:	4b0a      	ldr	r3, [pc, #40]	; (8004430 <prvInitialiseTaskLists+0x7c>)
 8004406:	4a05      	ldr	r2, [pc, #20]	; (800441c <prvInitialiseTaskLists+0x68>)
 8004408:	601a      	str	r2, [r3, #0]
}
 800440a:	bf00      	nop
 800440c:	3708      	adds	r7, #8
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	20000818 	.word	0x20000818
 8004418:	20000c78 	.word	0x20000c78
 800441c:	20000c8c 	.word	0x20000c8c
 8004420:	20000ca8 	.word	0x20000ca8
 8004424:	20000cbc 	.word	0x20000cbc
 8004428:	20000cd4 	.word	0x20000cd4
 800442c:	20000ca0 	.word	0x20000ca0
 8004430:	20000ca4 	.word	0x20000ca4

08004434 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800443a:	e019      	b.n	8004470 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800443c:	f000 fe66 	bl	800510c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004440:	4b10      	ldr	r3, [pc, #64]	; (8004484 <prvCheckTasksWaitingTermination+0x50>)
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	3304      	adds	r3, #4
 800444c:	4618      	mov	r0, r3
 800444e:	f7fe fa27 	bl	80028a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004452:	4b0d      	ldr	r3, [pc, #52]	; (8004488 <prvCheckTasksWaitingTermination+0x54>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	3b01      	subs	r3, #1
 8004458:	4a0b      	ldr	r2, [pc, #44]	; (8004488 <prvCheckTasksWaitingTermination+0x54>)
 800445a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800445c:	4b0b      	ldr	r3, [pc, #44]	; (800448c <prvCheckTasksWaitingTermination+0x58>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	3b01      	subs	r3, #1
 8004462:	4a0a      	ldr	r2, [pc, #40]	; (800448c <prvCheckTasksWaitingTermination+0x58>)
 8004464:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004466:	f000 fe81 	bl	800516c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 f810 	bl	8004490 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004470:	4b06      	ldr	r3, [pc, #24]	; (800448c <prvCheckTasksWaitingTermination+0x58>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1e1      	bne.n	800443c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004478:	bf00      	nop
 800447a:	bf00      	nop
 800447c:	3708      	adds	r7, #8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	20000cbc 	.word	0x20000cbc
 8004488:	20000ce8 	.word	0x20000ce8
 800448c:	20000cd0 	.word	0x20000cd0

08004490 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d108      	bne.n	80044b4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 fff4 	bl	8005494 <vPortFree>
				vPortFree( pxTCB );
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 fff1 	bl	8005494 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80044b2:	e018      	b.n	80044e6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d103      	bne.n	80044c6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 ffe8 	bl	8005494 <vPortFree>
	}
 80044c4:	e00f      	b.n	80044e6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d00a      	beq.n	80044e6 <prvDeleteTCB+0x56>
	__asm volatile
 80044d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d4:	f383 8811 	msr	BASEPRI, r3
 80044d8:	f3bf 8f6f 	isb	sy
 80044dc:	f3bf 8f4f 	dsb	sy
 80044e0:	60fb      	str	r3, [r7, #12]
}
 80044e2:	bf00      	nop
 80044e4:	e7fe      	b.n	80044e4 <prvDeleteTCB+0x54>
	}
 80044e6:	bf00      	nop
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
	...

080044f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044f6:	4b0e      	ldr	r3, [pc, #56]	; (8004530 <prvResetNextTaskUnblockTime+0x40>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d101      	bne.n	8004504 <prvResetNextTaskUnblockTime+0x14>
 8004500:	2301      	movs	r3, #1
 8004502:	e000      	b.n	8004506 <prvResetNextTaskUnblockTime+0x16>
 8004504:	2300      	movs	r3, #0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d004      	beq.n	8004514 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800450a:	4b0a      	ldr	r3, [pc, #40]	; (8004534 <prvResetNextTaskUnblockTime+0x44>)
 800450c:	f04f 32ff 	mov.w	r2, #4294967295
 8004510:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004512:	e008      	b.n	8004526 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004514:	4b06      	ldr	r3, [pc, #24]	; (8004530 <prvResetNextTaskUnblockTime+0x40>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	4a04      	ldr	r2, [pc, #16]	; (8004534 <prvResetNextTaskUnblockTime+0x44>)
 8004524:	6013      	str	r3, [r2, #0]
}
 8004526:	bf00      	nop
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	bc80      	pop	{r7}
 800452e:	4770      	bx	lr
 8004530:	20000ca0 	.word	0x20000ca0
 8004534:	20000d08 	.word	0x20000d08

08004538 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800453e:	4b0b      	ldr	r3, [pc, #44]	; (800456c <xTaskGetSchedulerState+0x34>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d102      	bne.n	800454c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004546:	2301      	movs	r3, #1
 8004548:	607b      	str	r3, [r7, #4]
 800454a:	e008      	b.n	800455e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800454c:	4b08      	ldr	r3, [pc, #32]	; (8004570 <xTaskGetSchedulerState+0x38>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d102      	bne.n	800455a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004554:	2302      	movs	r3, #2
 8004556:	607b      	str	r3, [r7, #4]
 8004558:	e001      	b.n	800455e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800455a:	2300      	movs	r3, #0
 800455c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800455e:	687b      	ldr	r3, [r7, #4]
	}
 8004560:	4618      	mov	r0, r3
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	bc80      	pop	{r7}
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	20000cf4 	.word	0x20000cf4
 8004570:	20000d10 	.word	0x20000d10

08004574 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004580:	2300      	movs	r3, #0
 8004582:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d056      	beq.n	8004638 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800458e:	4b2d      	ldr	r3, [pc, #180]	; (8004644 <xTaskPriorityInherit+0xd0>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004594:	429a      	cmp	r2, r3
 8004596:	d246      	bcs.n	8004626 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	2b00      	cmp	r3, #0
 800459e:	db06      	blt.n	80045ae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045a0:	4b28      	ldr	r3, [pc, #160]	; (8004644 <xTaskPriorityInherit+0xd0>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	6959      	ldr	r1, [r3, #20]
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b6:	4613      	mov	r3, r2
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	4413      	add	r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	4a22      	ldr	r2, [pc, #136]	; (8004648 <xTaskPriorityInherit+0xd4>)
 80045c0:	4413      	add	r3, r2
 80045c2:	4299      	cmp	r1, r3
 80045c4:	d101      	bne.n	80045ca <xTaskPriorityInherit+0x56>
 80045c6:	2301      	movs	r3, #1
 80045c8:	e000      	b.n	80045cc <xTaskPriorityInherit+0x58>
 80045ca:	2300      	movs	r3, #0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d022      	beq.n	8004616 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	3304      	adds	r3, #4
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7fe f963 	bl	80028a0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80045da:	4b1a      	ldr	r3, [pc, #104]	; (8004644 <xTaskPriorityInherit+0xd0>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e8:	4b18      	ldr	r3, [pc, #96]	; (800464c <xTaskPriorityInherit+0xd8>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d903      	bls.n	80045f8 <xTaskPriorityInherit+0x84>
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f4:	4a15      	ldr	r2, [pc, #84]	; (800464c <xTaskPriorityInherit+0xd8>)
 80045f6:	6013      	str	r3, [r2, #0]
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045fc:	4613      	mov	r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4413      	add	r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	4a10      	ldr	r2, [pc, #64]	; (8004648 <xTaskPriorityInherit+0xd4>)
 8004606:	441a      	add	r2, r3
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	3304      	adds	r3, #4
 800460c:	4619      	mov	r1, r3
 800460e:	4610      	mov	r0, r2
 8004610:	f7fe f8eb 	bl	80027ea <vListInsertEnd>
 8004614:	e004      	b.n	8004620 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004616:	4b0b      	ldr	r3, [pc, #44]	; (8004644 <xTaskPriorityInherit+0xd0>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004620:	2301      	movs	r3, #1
 8004622:	60fb      	str	r3, [r7, #12]
 8004624:	e008      	b.n	8004638 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800462a:	4b06      	ldr	r3, [pc, #24]	; (8004644 <xTaskPriorityInherit+0xd0>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004630:	429a      	cmp	r2, r3
 8004632:	d201      	bcs.n	8004638 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004634:	2301      	movs	r3, #1
 8004636:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004638:	68fb      	ldr	r3, [r7, #12]
	}
 800463a:	4618      	mov	r0, r3
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	20000814 	.word	0x20000814
 8004648:	20000818 	.word	0x20000818
 800464c:	20000cf0 	.word	0x20000cf0

08004650 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004650:	b580      	push	{r7, lr}
 8004652:	b086      	sub	sp, #24
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800465c:	2300      	movs	r3, #0
 800465e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d056      	beq.n	8004714 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004666:	4b2e      	ldr	r3, [pc, #184]	; (8004720 <xTaskPriorityDisinherit+0xd0>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	429a      	cmp	r2, r3
 800466e:	d00a      	beq.n	8004686 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004674:	f383 8811 	msr	BASEPRI, r3
 8004678:	f3bf 8f6f 	isb	sy
 800467c:	f3bf 8f4f 	dsb	sy
 8004680:	60fb      	str	r3, [r7, #12]
}
 8004682:	bf00      	nop
 8004684:	e7fe      	b.n	8004684 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10a      	bne.n	80046a4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800468e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004692:	f383 8811 	msr	BASEPRI, r3
 8004696:	f3bf 8f6f 	isb	sy
 800469a:	f3bf 8f4f 	dsb	sy
 800469e:	60bb      	str	r3, [r7, #8]
}
 80046a0:	bf00      	nop
 80046a2:	e7fe      	b.n	80046a2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046a8:	1e5a      	subs	r2, r3, #1
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d02c      	beq.n	8004714 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d128      	bne.n	8004714 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	3304      	adds	r3, #4
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7fe f8ea 	bl	80028a0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046e4:	4b0f      	ldr	r3, [pc, #60]	; (8004724 <xTaskPriorityDisinherit+0xd4>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d903      	bls.n	80046f4 <xTaskPriorityDisinherit+0xa4>
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f0:	4a0c      	ldr	r2, [pc, #48]	; (8004724 <xTaskPriorityDisinherit+0xd4>)
 80046f2:	6013      	str	r3, [r2, #0]
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046f8:	4613      	mov	r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	4413      	add	r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	4a09      	ldr	r2, [pc, #36]	; (8004728 <xTaskPriorityDisinherit+0xd8>)
 8004702:	441a      	add	r2, r3
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	3304      	adds	r3, #4
 8004708:	4619      	mov	r1, r3
 800470a:	4610      	mov	r0, r2
 800470c:	f7fe f86d 	bl	80027ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004710:	2301      	movs	r3, #1
 8004712:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004714:	697b      	ldr	r3, [r7, #20]
	}
 8004716:	4618      	mov	r0, r3
 8004718:	3718      	adds	r7, #24
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	20000814 	.word	0x20000814
 8004724:	20000cf0 	.word	0x20000cf0
 8004728:	20000818 	.word	0x20000818

0800472c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800472c:	b580      	push	{r7, lr}
 800472e:	b088      	sub	sp, #32
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800473a:	2301      	movs	r3, #1
 800473c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d06f      	beq.n	8004824 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004748:	2b00      	cmp	r3, #0
 800474a:	d10a      	bne.n	8004762 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800474c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004750:	f383 8811 	msr	BASEPRI, r3
 8004754:	f3bf 8f6f 	isb	sy
 8004758:	f3bf 8f4f 	dsb	sy
 800475c:	60fb      	str	r3, [r7, #12]
}
 800475e:	bf00      	nop
 8004760:	e7fe      	b.n	8004760 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004766:	683a      	ldr	r2, [r7, #0]
 8004768:	429a      	cmp	r2, r3
 800476a:	d902      	bls.n	8004772 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	61fb      	str	r3, [r7, #28]
 8004770:	e002      	b.n	8004778 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004776:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477c:	69fa      	ldr	r2, [r7, #28]
 800477e:	429a      	cmp	r2, r3
 8004780:	d050      	beq.n	8004824 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	429a      	cmp	r2, r3
 800478a:	d14b      	bne.n	8004824 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800478c:	4b27      	ldr	r3, [pc, #156]	; (800482c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	69ba      	ldr	r2, [r7, #24]
 8004792:	429a      	cmp	r2, r3
 8004794:	d10a      	bne.n	80047ac <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8004796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479a:	f383 8811 	msr	BASEPRI, r3
 800479e:	f3bf 8f6f 	isb	sy
 80047a2:	f3bf 8f4f 	dsb	sy
 80047a6:	60bb      	str	r3, [r7, #8]
}
 80047a8:	bf00      	nop
 80047aa:	e7fe      	b.n	80047aa <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	69fa      	ldr	r2, [r7, #28]
 80047b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	db04      	blt.n	80047ca <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	6959      	ldr	r1, [r3, #20]
 80047ce:	693a      	ldr	r2, [r7, #16]
 80047d0:	4613      	mov	r3, r2
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	4413      	add	r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	4a15      	ldr	r2, [pc, #84]	; (8004830 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80047da:	4413      	add	r3, r2
 80047dc:	4299      	cmp	r1, r3
 80047de:	d101      	bne.n	80047e4 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 80047e0:	2301      	movs	r3, #1
 80047e2:	e000      	b.n	80047e6 <vTaskPriorityDisinheritAfterTimeout+0xba>
 80047e4:	2300      	movs	r3, #0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d01c      	beq.n	8004824 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	3304      	adds	r3, #4
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7fe f856 	bl	80028a0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047f8:	4b0e      	ldr	r3, [pc, #56]	; (8004834 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d903      	bls.n	8004808 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004804:	4a0b      	ldr	r2, [pc, #44]	; (8004834 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8004806:	6013      	str	r3, [r2, #0]
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800480c:	4613      	mov	r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	4413      	add	r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4a06      	ldr	r2, [pc, #24]	; (8004830 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004816:	441a      	add	r2, r3
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	3304      	adds	r3, #4
 800481c:	4619      	mov	r1, r3
 800481e:	4610      	mov	r0, r2
 8004820:	f7fd ffe3 	bl	80027ea <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004824:	bf00      	nop
 8004826:	3720      	adds	r7, #32
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	20000814 	.word	0x20000814
 8004830:	20000818 	.word	0x20000818
 8004834:	20000cf0 	.word	0x20000cf0

08004838 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8004838:	b480      	push	{r7}
 800483a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800483c:	4b07      	ldr	r3, [pc, #28]	; (800485c <pvTaskIncrementMutexHeldCount+0x24>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d004      	beq.n	800484e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004844:	4b05      	ldr	r3, [pc, #20]	; (800485c <pvTaskIncrementMutexHeldCount+0x24>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800484a:	3201      	adds	r2, #1
 800484c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800484e:	4b03      	ldr	r3, [pc, #12]	; (800485c <pvTaskIncrementMutexHeldCount+0x24>)
 8004850:	681b      	ldr	r3, [r3, #0]
	}
 8004852:	4618      	mov	r0, r3
 8004854:	46bd      	mov	sp, r7
 8004856:	bc80      	pop	{r7}
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	20000814 	.word	0x20000814

08004860 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800486a:	4b21      	ldr	r3, [pc, #132]	; (80048f0 <prvAddCurrentTaskToDelayedList+0x90>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004870:	4b20      	ldr	r3, [pc, #128]	; (80048f4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	3304      	adds	r3, #4
 8004876:	4618      	mov	r0, r3
 8004878:	f7fe f812 	bl	80028a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004882:	d10a      	bne.n	800489a <prvAddCurrentTaskToDelayedList+0x3a>
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d007      	beq.n	800489a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800488a:	4b1a      	ldr	r3, [pc, #104]	; (80048f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	3304      	adds	r3, #4
 8004890:	4619      	mov	r1, r3
 8004892:	4819      	ldr	r0, [pc, #100]	; (80048f8 <prvAddCurrentTaskToDelayedList+0x98>)
 8004894:	f7fd ffa9 	bl	80027ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004898:	e026      	b.n	80048e8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4413      	add	r3, r2
 80048a0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80048a2:	4b14      	ldr	r3, [pc, #80]	; (80048f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80048aa:	68ba      	ldr	r2, [r7, #8]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d209      	bcs.n	80048c6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048b2:	4b12      	ldr	r3, [pc, #72]	; (80048fc <prvAddCurrentTaskToDelayedList+0x9c>)
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	4b0f      	ldr	r3, [pc, #60]	; (80048f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	3304      	adds	r3, #4
 80048bc:	4619      	mov	r1, r3
 80048be:	4610      	mov	r0, r2
 80048c0:	f7fd ffb6 	bl	8002830 <vListInsert>
}
 80048c4:	e010      	b.n	80048e8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048c6:	4b0e      	ldr	r3, [pc, #56]	; (8004900 <prvAddCurrentTaskToDelayedList+0xa0>)
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	4b0a      	ldr	r3, [pc, #40]	; (80048f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	3304      	adds	r3, #4
 80048d0:	4619      	mov	r1, r3
 80048d2:	4610      	mov	r0, r2
 80048d4:	f7fd ffac 	bl	8002830 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80048d8:	4b0a      	ldr	r3, [pc, #40]	; (8004904 <prvAddCurrentTaskToDelayedList+0xa4>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68ba      	ldr	r2, [r7, #8]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d202      	bcs.n	80048e8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80048e2:	4a08      	ldr	r2, [pc, #32]	; (8004904 <prvAddCurrentTaskToDelayedList+0xa4>)
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	6013      	str	r3, [r2, #0]
}
 80048e8:	bf00      	nop
 80048ea:	3710      	adds	r7, #16
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	20000cec 	.word	0x20000cec
 80048f4:	20000814 	.word	0x20000814
 80048f8:	20000cd4 	.word	0x20000cd4
 80048fc:	20000ca4 	.word	0x20000ca4
 8004900:	20000ca0 	.word	0x20000ca0
 8004904:	20000d08 	.word	0x20000d08

08004908 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b08a      	sub	sp, #40	; 0x28
 800490c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800490e:	2300      	movs	r3, #0
 8004910:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004912:	f000 facb 	bl	8004eac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004916:	4b1c      	ldr	r3, [pc, #112]	; (8004988 <xTimerCreateTimerTask+0x80>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d021      	beq.n	8004962 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800491e:	2300      	movs	r3, #0
 8004920:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004922:	2300      	movs	r3, #0
 8004924:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004926:	1d3a      	adds	r2, r7, #4
 8004928:	f107 0108 	add.w	r1, r7, #8
 800492c:	f107 030c 	add.w	r3, r7, #12
 8004930:	4618      	mov	r0, r3
 8004932:	f7fd ff15 	bl	8002760 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004936:	6879      	ldr	r1, [r7, #4]
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	9202      	str	r2, [sp, #8]
 800493e:	9301      	str	r3, [sp, #4]
 8004940:	2302      	movs	r3, #2
 8004942:	9300      	str	r3, [sp, #0]
 8004944:	2300      	movs	r3, #0
 8004946:	460a      	mov	r2, r1
 8004948:	4910      	ldr	r1, [pc, #64]	; (800498c <xTimerCreateTimerTask+0x84>)
 800494a:	4811      	ldr	r0, [pc, #68]	; (8004990 <xTimerCreateTimerTask+0x88>)
 800494c:	f7fe ffdc 	bl	8003908 <xTaskCreateStatic>
 8004950:	4603      	mov	r3, r0
 8004952:	4a10      	ldr	r2, [pc, #64]	; (8004994 <xTimerCreateTimerTask+0x8c>)
 8004954:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004956:	4b0f      	ldr	r3, [pc, #60]	; (8004994 <xTimerCreateTimerTask+0x8c>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d001      	beq.n	8004962 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800495e:	2301      	movs	r3, #1
 8004960:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d10a      	bne.n	800497e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496c:	f383 8811 	msr	BASEPRI, r3
 8004970:	f3bf 8f6f 	isb	sy
 8004974:	f3bf 8f4f 	dsb	sy
 8004978:	613b      	str	r3, [r7, #16]
}
 800497a:	bf00      	nop
 800497c:	e7fe      	b.n	800497c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800497e:	697b      	ldr	r3, [r7, #20]
}
 8004980:	4618      	mov	r0, r3
 8004982:	3718      	adds	r7, #24
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	20000d44 	.word	0x20000d44
 800498c:	080060d8 	.word	0x080060d8
 8004990:	08004ab5 	.word	0x08004ab5
 8004994:	20000d48 	.word	0x20000d48

08004998 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b08a      	sub	sp, #40	; 0x28
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
 80049a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80049a6:	2300      	movs	r3, #0
 80049a8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10a      	bne.n	80049c6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80049b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b4:	f383 8811 	msr	BASEPRI, r3
 80049b8:	f3bf 8f6f 	isb	sy
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	623b      	str	r3, [r7, #32]
}
 80049c2:	bf00      	nop
 80049c4:	e7fe      	b.n	80049c4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80049c6:	4b1a      	ldr	r3, [pc, #104]	; (8004a30 <xTimerGenericCommand+0x98>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d02a      	beq.n	8004a24 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	2b05      	cmp	r3, #5
 80049de:	dc18      	bgt.n	8004a12 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80049e0:	f7ff fdaa 	bl	8004538 <xTaskGetSchedulerState>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d109      	bne.n	80049fe <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80049ea:	4b11      	ldr	r3, [pc, #68]	; (8004a30 <xTimerGenericCommand+0x98>)
 80049ec:	6818      	ldr	r0, [r3, #0]
 80049ee:	f107 0110 	add.w	r1, r7, #16
 80049f2:	2300      	movs	r3, #0
 80049f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049f6:	f7fe f927 	bl	8002c48 <xQueueGenericSend>
 80049fa:	6278      	str	r0, [r7, #36]	; 0x24
 80049fc:	e012      	b.n	8004a24 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80049fe:	4b0c      	ldr	r3, [pc, #48]	; (8004a30 <xTimerGenericCommand+0x98>)
 8004a00:	6818      	ldr	r0, [r3, #0]
 8004a02:	f107 0110 	add.w	r1, r7, #16
 8004a06:	2300      	movs	r3, #0
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f7fe f91d 	bl	8002c48 <xQueueGenericSend>
 8004a0e:	6278      	str	r0, [r7, #36]	; 0x24
 8004a10:	e008      	b.n	8004a24 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004a12:	4b07      	ldr	r3, [pc, #28]	; (8004a30 <xTimerGenericCommand+0x98>)
 8004a14:	6818      	ldr	r0, [r3, #0]
 8004a16:	f107 0110 	add.w	r1, r7, #16
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	683a      	ldr	r2, [r7, #0]
 8004a1e:	f7fe fa11 	bl	8002e44 <xQueueGenericSendFromISR>
 8004a22:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3728      	adds	r7, #40	; 0x28
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	20000d44 	.word	0x20000d44

08004a34 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b088      	sub	sp, #32
 8004a38:	af02      	add	r7, sp, #8
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a3e:	4b1c      	ldr	r3, [pc, #112]	; (8004ab0 <prvProcessExpiredTimer+0x7c>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	3304      	adds	r3, #4
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7fd ff27 	bl	80028a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d122      	bne.n	8004aa0 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	699a      	ldr	r2, [r3, #24]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	18d1      	adds	r1, r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	683a      	ldr	r2, [r7, #0]
 8004a66:	6978      	ldr	r0, [r7, #20]
 8004a68:	f000 f8c8 	bl	8004bfc <prvInsertTimerInActiveList>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d016      	beq.n	8004aa0 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a72:	2300      	movs	r3, #0
 8004a74:	9300      	str	r3, [sp, #0]
 8004a76:	2300      	movs	r3, #0
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	2100      	movs	r1, #0
 8004a7c:	6978      	ldr	r0, [r7, #20]
 8004a7e:	f7ff ff8b 	bl	8004998 <xTimerGenericCommand>
 8004a82:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d10a      	bne.n	8004aa0 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8004a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8e:	f383 8811 	msr	BASEPRI, r3
 8004a92:	f3bf 8f6f 	isb	sy
 8004a96:	f3bf 8f4f 	dsb	sy
 8004a9a:	60fb      	str	r3, [r7, #12]
}
 8004a9c:	bf00      	nop
 8004a9e:	e7fe      	b.n	8004a9e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa4:	6978      	ldr	r0, [r7, #20]
 8004aa6:	4798      	blx	r3
}
 8004aa8:	bf00      	nop
 8004aaa:	3718      	adds	r7, #24
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	20000d3c 	.word	0x20000d3c

08004ab4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004abc:	f107 0308 	add.w	r3, r7, #8
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f000 f857 	bl	8004b74 <prvGetNextExpireTime>
 8004ac6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	4619      	mov	r1, r3
 8004acc:	68f8      	ldr	r0, [r7, #12]
 8004ace:	f000 f803 	bl	8004ad8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004ad2:	f000 f8d5 	bl	8004c80 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ad6:	e7f1      	b.n	8004abc <prvTimerTask+0x8>

08004ad8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004ae2:	f7ff f943 	bl	8003d6c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004ae6:	f107 0308 	add.w	r3, r7, #8
 8004aea:	4618      	mov	r0, r3
 8004aec:	f000 f866 	bl	8004bbc <prvSampleTimeNow>
 8004af0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d130      	bne.n	8004b5a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d10a      	bne.n	8004b14 <prvProcessTimerOrBlockTask+0x3c>
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d806      	bhi.n	8004b14 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004b06:	f7ff f93f 	bl	8003d88 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004b0a:	68f9      	ldr	r1, [r7, #12]
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f7ff ff91 	bl	8004a34 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004b12:	e024      	b.n	8004b5e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d008      	beq.n	8004b2c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004b1a:	4b13      	ldr	r3, [pc, #76]	; (8004b68 <prvProcessTimerOrBlockTask+0x90>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	bf0c      	ite	eq
 8004b24:	2301      	moveq	r3, #1
 8004b26:	2300      	movne	r3, #0
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004b2c:	4b0f      	ldr	r3, [pc, #60]	; (8004b6c <prvProcessTimerOrBlockTask+0x94>)
 8004b2e:	6818      	ldr	r0, [r3, #0]
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	683a      	ldr	r2, [r7, #0]
 8004b38:	4619      	mov	r1, r3
 8004b3a:	f7fe feb1 	bl	80038a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004b3e:	f7ff f923 	bl	8003d88 <xTaskResumeAll>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d10a      	bne.n	8004b5e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004b48:	4b09      	ldr	r3, [pc, #36]	; (8004b70 <prvProcessTimerOrBlockTask+0x98>)
 8004b4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b4e:	601a      	str	r2, [r3, #0]
 8004b50:	f3bf 8f4f 	dsb	sy
 8004b54:	f3bf 8f6f 	isb	sy
}
 8004b58:	e001      	b.n	8004b5e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004b5a:	f7ff f915 	bl	8003d88 <xTaskResumeAll>
}
 8004b5e:	bf00      	nop
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	20000d40 	.word	0x20000d40
 8004b6c:	20000d44 	.word	0x20000d44
 8004b70:	e000ed04 	.word	0xe000ed04

08004b74 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004b7c:	4b0e      	ldr	r3, [pc, #56]	; (8004bb8 <prvGetNextExpireTime+0x44>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	bf0c      	ite	eq
 8004b86:	2301      	moveq	r3, #1
 8004b88:	2300      	movne	r3, #0
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d105      	bne.n	8004ba6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b9a:	4b07      	ldr	r3, [pc, #28]	; (8004bb8 <prvGetNextExpireTime+0x44>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	60fb      	str	r3, [r7, #12]
 8004ba4:	e001      	b.n	8004baa <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004baa:	68fb      	ldr	r3, [r7, #12]
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3714      	adds	r7, #20
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bc80      	pop	{r7}
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	20000d3c 	.word	0x20000d3c

08004bbc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004bc4:	f7ff f97e 	bl	8003ec4 <xTaskGetTickCount>
 8004bc8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004bca:	4b0b      	ldr	r3, [pc, #44]	; (8004bf8 <prvSampleTimeNow+0x3c>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d205      	bcs.n	8004be0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004bd4:	f000 f908 	bl	8004de8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	601a      	str	r2, [r3, #0]
 8004bde:	e002      	b.n	8004be6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004be6:	4a04      	ldr	r2, [pc, #16]	; (8004bf8 <prvSampleTimeNow+0x3c>)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004bec:	68fb      	ldr	r3, [r7, #12]
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	20000d4c 	.word	0x20000d4c

08004bfc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b086      	sub	sp, #24
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
 8004c08:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	68ba      	ldr	r2, [r7, #8]
 8004c12:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004c1a:	68ba      	ldr	r2, [r7, #8]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d812      	bhi.n	8004c48 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	1ad2      	subs	r2, r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d302      	bcc.n	8004c36 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004c30:	2301      	movs	r3, #1
 8004c32:	617b      	str	r3, [r7, #20]
 8004c34:	e01b      	b.n	8004c6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004c36:	4b10      	ldr	r3, [pc, #64]	; (8004c78 <prvInsertTimerInActiveList+0x7c>)
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	3304      	adds	r3, #4
 8004c3e:	4619      	mov	r1, r3
 8004c40:	4610      	mov	r0, r2
 8004c42:	f7fd fdf5 	bl	8002830 <vListInsert>
 8004c46:	e012      	b.n	8004c6e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d206      	bcs.n	8004c5e <prvInsertTimerInActiveList+0x62>
 8004c50:	68ba      	ldr	r2, [r7, #8]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d302      	bcc.n	8004c5e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	617b      	str	r3, [r7, #20]
 8004c5c:	e007      	b.n	8004c6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c5e:	4b07      	ldr	r3, [pc, #28]	; (8004c7c <prvInsertTimerInActiveList+0x80>)
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	3304      	adds	r3, #4
 8004c66:	4619      	mov	r1, r3
 8004c68:	4610      	mov	r0, r2
 8004c6a:	f7fd fde1 	bl	8002830 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004c6e:	697b      	ldr	r3, [r7, #20]
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3718      	adds	r7, #24
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	20000d40 	.word	0x20000d40
 8004c7c:	20000d3c 	.word	0x20000d3c

08004c80 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b08e      	sub	sp, #56	; 0x38
 8004c84:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c86:	e09d      	b.n	8004dc4 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	da18      	bge.n	8004cc0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004c8e:	1d3b      	adds	r3, r7, #4
 8004c90:	3304      	adds	r3, #4
 8004c92:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10a      	bne.n	8004cb0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c9e:	f383 8811 	msr	BASEPRI, r3
 8004ca2:	f3bf 8f6f 	isb	sy
 8004ca6:	f3bf 8f4f 	dsb	sy
 8004caa:	61fb      	str	r3, [r7, #28]
}
 8004cac:	bf00      	nop
 8004cae:	e7fe      	b.n	8004cae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cb6:	6850      	ldr	r0, [r2, #4]
 8004cb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cba:	6892      	ldr	r2, [r2, #8]
 8004cbc:	4611      	mov	r1, r2
 8004cbe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	db7d      	blt.n	8004dc2 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d004      	beq.n	8004cdc <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd4:	3304      	adds	r3, #4
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7fd fde2 	bl	80028a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004cdc:	463b      	mov	r3, r7
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7ff ff6c 	bl	8004bbc <prvSampleTimeNow>
 8004ce4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2b09      	cmp	r3, #9
 8004cea:	d86b      	bhi.n	8004dc4 <prvProcessReceivedCommands+0x144>
 8004cec:	a201      	add	r2, pc, #4	; (adr r2, 8004cf4 <prvProcessReceivedCommands+0x74>)
 8004cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf2:	bf00      	nop
 8004cf4:	08004d1d 	.word	0x08004d1d
 8004cf8:	08004d1d 	.word	0x08004d1d
 8004cfc:	08004d1d 	.word	0x08004d1d
 8004d00:	08004dc5 	.word	0x08004dc5
 8004d04:	08004d79 	.word	0x08004d79
 8004d08:	08004db1 	.word	0x08004db1
 8004d0c:	08004d1d 	.word	0x08004d1d
 8004d10:	08004d1d 	.word	0x08004d1d
 8004d14:	08004dc5 	.word	0x08004dc5
 8004d18:	08004d79 	.word	0x08004d79
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004d1c:	68ba      	ldr	r2, [r7, #8]
 8004d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	18d1      	adds	r1, r2, r3
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d2a:	f7ff ff67 	bl	8004bfc <prvInsertTimerInActiveList>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d047      	beq.n	8004dc4 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d3a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3e:	69db      	ldr	r3, [r3, #28]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d13f      	bne.n	8004dc4 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	441a      	add	r2, r3
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	9300      	str	r3, [sp, #0]
 8004d50:	2300      	movs	r3, #0
 8004d52:	2100      	movs	r1, #0
 8004d54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d56:	f7ff fe1f 	bl	8004998 <xTimerGenericCommand>
 8004d5a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004d5c:	6a3b      	ldr	r3, [r7, #32]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d130      	bne.n	8004dc4 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8004d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d66:	f383 8811 	msr	BASEPRI, r3
 8004d6a:	f3bf 8f6f 	isb	sy
 8004d6e:	f3bf 8f4f 	dsb	sy
 8004d72:	61bb      	str	r3, [r7, #24]
}
 8004d74:	bf00      	nop
 8004d76:	e7fe      	b.n	8004d76 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004d78:	68ba      	ldr	r2, [r7, #8]
 8004d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10a      	bne.n	8004d9c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8004d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8a:	f383 8811 	msr	BASEPRI, r3
 8004d8e:	f3bf 8f6f 	isb	sy
 8004d92:	f3bf 8f4f 	dsb	sy
 8004d96:	617b      	str	r3, [r7, #20]
}
 8004d98:	bf00      	nop
 8004d9a:	e7fe      	b.n	8004d9a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d9e:	699a      	ldr	r2, [r3, #24]
 8004da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da2:	18d1      	adds	r1, r2, r3
 8004da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004da8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004daa:	f7ff ff27 	bl	8004bfc <prvInsertTimerInActiveList>
					break;
 8004dae:	e009      	b.n	8004dc4 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d104      	bne.n	8004dc4 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8004dba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dbc:	f000 fb6a 	bl	8005494 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004dc0:	e000      	b.n	8004dc4 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004dc2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004dc4:	4b07      	ldr	r3, [pc, #28]	; (8004de4 <prvProcessReceivedCommands+0x164>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	1d39      	adds	r1, r7, #4
 8004dca:	2200      	movs	r2, #0
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7fe f95f 	bl	8003090 <xQueueReceive>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f47f af57 	bne.w	8004c88 <prvProcessReceivedCommands+0x8>
	}
}
 8004dda:	bf00      	nop
 8004ddc:	bf00      	nop
 8004dde:	3730      	adds	r7, #48	; 0x30
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	20000d44 	.word	0x20000d44

08004de8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b088      	sub	sp, #32
 8004dec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004dee:	e045      	b.n	8004e7c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004df0:	4b2c      	ldr	r3, [pc, #176]	; (8004ea4 <prvSwitchTimerLists+0xbc>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004dfa:	4b2a      	ldr	r3, [pc, #168]	; (8004ea4 <prvSwitchTimerLists+0xbc>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	3304      	adds	r3, #4
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f7fd fd49 	bl	80028a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	69db      	ldr	r3, [r3, #28]
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d12e      	bne.n	8004e7c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	4413      	add	r3, r2
 8004e26:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004e28:	68ba      	ldr	r2, [r7, #8]
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d90e      	bls.n	8004e4e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	68ba      	ldr	r2, [r7, #8]
 8004e34:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e3c:	4b19      	ldr	r3, [pc, #100]	; (8004ea4 <prvSwitchTimerLists+0xbc>)
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	3304      	adds	r3, #4
 8004e44:	4619      	mov	r1, r3
 8004e46:	4610      	mov	r0, r2
 8004e48:	f7fd fcf2 	bl	8002830 <vListInsert>
 8004e4c:	e016      	b.n	8004e7c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e4e:	2300      	movs	r3, #0
 8004e50:	9300      	str	r3, [sp, #0]
 8004e52:	2300      	movs	r3, #0
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	2100      	movs	r1, #0
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	f7ff fd9d 	bl	8004998 <xTimerGenericCommand>
 8004e5e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10a      	bne.n	8004e7c <prvSwitchTimerLists+0x94>
	__asm volatile
 8004e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6a:	f383 8811 	msr	BASEPRI, r3
 8004e6e:	f3bf 8f6f 	isb	sy
 8004e72:	f3bf 8f4f 	dsb	sy
 8004e76:	603b      	str	r3, [r7, #0]
}
 8004e78:	bf00      	nop
 8004e7a:	e7fe      	b.n	8004e7a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e7c:	4b09      	ldr	r3, [pc, #36]	; (8004ea4 <prvSwitchTimerLists+0xbc>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1b4      	bne.n	8004df0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004e86:	4b07      	ldr	r3, [pc, #28]	; (8004ea4 <prvSwitchTimerLists+0xbc>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004e8c:	4b06      	ldr	r3, [pc, #24]	; (8004ea8 <prvSwitchTimerLists+0xc0>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a04      	ldr	r2, [pc, #16]	; (8004ea4 <prvSwitchTimerLists+0xbc>)
 8004e92:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004e94:	4a04      	ldr	r2, [pc, #16]	; (8004ea8 <prvSwitchTimerLists+0xc0>)
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	6013      	str	r3, [r2, #0]
}
 8004e9a:	bf00      	nop
 8004e9c:	3718      	adds	r7, #24
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	20000d3c 	.word	0x20000d3c
 8004ea8:	20000d40 	.word	0x20000d40

08004eac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004eb2:	f000 f92b 	bl	800510c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004eb6:	4b15      	ldr	r3, [pc, #84]	; (8004f0c <prvCheckForValidListAndQueue+0x60>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d120      	bne.n	8004f00 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004ebe:	4814      	ldr	r0, [pc, #80]	; (8004f10 <prvCheckForValidListAndQueue+0x64>)
 8004ec0:	f7fd fc68 	bl	8002794 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004ec4:	4813      	ldr	r0, [pc, #76]	; (8004f14 <prvCheckForValidListAndQueue+0x68>)
 8004ec6:	f7fd fc65 	bl	8002794 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004eca:	4b13      	ldr	r3, [pc, #76]	; (8004f18 <prvCheckForValidListAndQueue+0x6c>)
 8004ecc:	4a10      	ldr	r2, [pc, #64]	; (8004f10 <prvCheckForValidListAndQueue+0x64>)
 8004ece:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004ed0:	4b12      	ldr	r3, [pc, #72]	; (8004f1c <prvCheckForValidListAndQueue+0x70>)
 8004ed2:	4a10      	ldr	r2, [pc, #64]	; (8004f14 <prvCheckForValidListAndQueue+0x68>)
 8004ed4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	4b11      	ldr	r3, [pc, #68]	; (8004f20 <prvCheckForValidListAndQueue+0x74>)
 8004edc:	4a11      	ldr	r2, [pc, #68]	; (8004f24 <prvCheckForValidListAndQueue+0x78>)
 8004ede:	2110      	movs	r1, #16
 8004ee0:	200a      	movs	r0, #10
 8004ee2:	f7fd fd6f 	bl	80029c4 <xQueueGenericCreateStatic>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	4a08      	ldr	r2, [pc, #32]	; (8004f0c <prvCheckForValidListAndQueue+0x60>)
 8004eea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004eec:	4b07      	ldr	r3, [pc, #28]	; (8004f0c <prvCheckForValidListAndQueue+0x60>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d005      	beq.n	8004f00 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004ef4:	4b05      	ldr	r3, [pc, #20]	; (8004f0c <prvCheckForValidListAndQueue+0x60>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	490b      	ldr	r1, [pc, #44]	; (8004f28 <prvCheckForValidListAndQueue+0x7c>)
 8004efa:	4618      	mov	r0, r3
 8004efc:	f7fe fc7e 	bl	80037fc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f00:	f000 f934 	bl	800516c <vPortExitCritical>
}
 8004f04:	bf00      	nop
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	20000d44 	.word	0x20000d44
 8004f10:	20000d14 	.word	0x20000d14
 8004f14:	20000d28 	.word	0x20000d28
 8004f18:	20000d3c 	.word	0x20000d3c
 8004f1c:	20000d40 	.word	0x20000d40
 8004f20:	20000df0 	.word	0x20000df0
 8004f24:	20000d50 	.word	0x20000d50
 8004f28:	080060e0 	.word	0x080060e0

08004f2c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	3b04      	subs	r3, #4
 8004f3c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	3b04      	subs	r3, #4
 8004f4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	f023 0201 	bic.w	r2, r3, #1
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	3b04      	subs	r3, #4
 8004f5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f5c:	4a08      	ldr	r2, [pc, #32]	; (8004f80 <pxPortInitialiseStack+0x54>)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	3b14      	subs	r3, #20
 8004f66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	3b20      	subs	r3, #32
 8004f72:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f74:	68fb      	ldr	r3, [r7, #12]
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3714      	adds	r7, #20
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bc80      	pop	{r7}
 8004f7e:	4770      	bx	lr
 8004f80:	08004f85 	.word	0x08004f85

08004f84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004f8e:	4b12      	ldr	r3, [pc, #72]	; (8004fd8 <prvTaskExitError+0x54>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f96:	d00a      	beq.n	8004fae <prvTaskExitError+0x2a>
	__asm volatile
 8004f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9c:	f383 8811 	msr	BASEPRI, r3
 8004fa0:	f3bf 8f6f 	isb	sy
 8004fa4:	f3bf 8f4f 	dsb	sy
 8004fa8:	60fb      	str	r3, [r7, #12]
}
 8004faa:	bf00      	nop
 8004fac:	e7fe      	b.n	8004fac <prvTaskExitError+0x28>
	__asm volatile
 8004fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb2:	f383 8811 	msr	BASEPRI, r3
 8004fb6:	f3bf 8f6f 	isb	sy
 8004fba:	f3bf 8f4f 	dsb	sy
 8004fbe:	60bb      	str	r3, [r7, #8]
}
 8004fc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004fc2:	bf00      	nop
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d0fc      	beq.n	8004fc4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004fca:	bf00      	nop
 8004fcc:	bf00      	nop
 8004fce:	3714      	adds	r7, #20
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bc80      	pop	{r7}
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	2000001c 	.word	0x2000001c
 8004fdc:	00000000 	.word	0x00000000

08004fe0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004fe0:	4b07      	ldr	r3, [pc, #28]	; (8005000 <pxCurrentTCBConst2>)
 8004fe2:	6819      	ldr	r1, [r3, #0]
 8004fe4:	6808      	ldr	r0, [r1, #0]
 8004fe6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004fea:	f380 8809 	msr	PSP, r0
 8004fee:	f3bf 8f6f 	isb	sy
 8004ff2:	f04f 0000 	mov.w	r0, #0
 8004ff6:	f380 8811 	msr	BASEPRI, r0
 8004ffa:	f04e 0e0d 	orr.w	lr, lr, #13
 8004ffe:	4770      	bx	lr

08005000 <pxCurrentTCBConst2>:
 8005000:	20000814 	.word	0x20000814
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005004:	bf00      	nop
 8005006:	bf00      	nop

08005008 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005008:	4806      	ldr	r0, [pc, #24]	; (8005024 <prvPortStartFirstTask+0x1c>)
 800500a:	6800      	ldr	r0, [r0, #0]
 800500c:	6800      	ldr	r0, [r0, #0]
 800500e:	f380 8808 	msr	MSP, r0
 8005012:	b662      	cpsie	i
 8005014:	b661      	cpsie	f
 8005016:	f3bf 8f4f 	dsb	sy
 800501a:	f3bf 8f6f 	isb	sy
 800501e:	df00      	svc	0
 8005020:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005022:	bf00      	nop
 8005024:	e000ed08 	.word	0xe000ed08

08005028 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800502e:	4b32      	ldr	r3, [pc, #200]	; (80050f8 <xPortStartScheduler+0xd0>)
 8005030:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	b2db      	uxtb	r3, r3
 8005038:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	22ff      	movs	r2, #255	; 0xff
 800503e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	b2db      	uxtb	r3, r3
 8005046:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005048:	78fb      	ldrb	r3, [r7, #3]
 800504a:	b2db      	uxtb	r3, r3
 800504c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005050:	b2da      	uxtb	r2, r3
 8005052:	4b2a      	ldr	r3, [pc, #168]	; (80050fc <xPortStartScheduler+0xd4>)
 8005054:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005056:	4b2a      	ldr	r3, [pc, #168]	; (8005100 <xPortStartScheduler+0xd8>)
 8005058:	2207      	movs	r2, #7
 800505a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800505c:	e009      	b.n	8005072 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800505e:	4b28      	ldr	r3, [pc, #160]	; (8005100 <xPortStartScheduler+0xd8>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	3b01      	subs	r3, #1
 8005064:	4a26      	ldr	r2, [pc, #152]	; (8005100 <xPortStartScheduler+0xd8>)
 8005066:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005068:	78fb      	ldrb	r3, [r7, #3]
 800506a:	b2db      	uxtb	r3, r3
 800506c:	005b      	lsls	r3, r3, #1
 800506e:	b2db      	uxtb	r3, r3
 8005070:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005072:	78fb      	ldrb	r3, [r7, #3]
 8005074:	b2db      	uxtb	r3, r3
 8005076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800507a:	2b80      	cmp	r3, #128	; 0x80
 800507c:	d0ef      	beq.n	800505e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800507e:	4b20      	ldr	r3, [pc, #128]	; (8005100 <xPortStartScheduler+0xd8>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f1c3 0307 	rsb	r3, r3, #7
 8005086:	2b04      	cmp	r3, #4
 8005088:	d00a      	beq.n	80050a0 <xPortStartScheduler+0x78>
	__asm volatile
 800508a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508e:	f383 8811 	msr	BASEPRI, r3
 8005092:	f3bf 8f6f 	isb	sy
 8005096:	f3bf 8f4f 	dsb	sy
 800509a:	60bb      	str	r3, [r7, #8]
}
 800509c:	bf00      	nop
 800509e:	e7fe      	b.n	800509e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80050a0:	4b17      	ldr	r3, [pc, #92]	; (8005100 <xPortStartScheduler+0xd8>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	021b      	lsls	r3, r3, #8
 80050a6:	4a16      	ldr	r2, [pc, #88]	; (8005100 <xPortStartScheduler+0xd8>)
 80050a8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80050aa:	4b15      	ldr	r3, [pc, #84]	; (8005100 <xPortStartScheduler+0xd8>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80050b2:	4a13      	ldr	r2, [pc, #76]	; (8005100 <xPortStartScheduler+0xd8>)
 80050b4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80050be:	4b11      	ldr	r3, [pc, #68]	; (8005104 <xPortStartScheduler+0xdc>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a10      	ldr	r2, [pc, #64]	; (8005104 <xPortStartScheduler+0xdc>)
 80050c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80050ca:	4b0e      	ldr	r3, [pc, #56]	; (8005104 <xPortStartScheduler+0xdc>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a0d      	ldr	r2, [pc, #52]	; (8005104 <xPortStartScheduler+0xdc>)
 80050d0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80050d4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80050d6:	f000 f8b9 	bl	800524c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80050da:	4b0b      	ldr	r3, [pc, #44]	; (8005108 <xPortStartScheduler+0xe0>)
 80050dc:	2200      	movs	r2, #0
 80050de:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80050e0:	f7ff ff92 	bl	8005008 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80050e4:	f7fe ffba 	bl	800405c <vTaskSwitchContext>
	prvTaskExitError();
 80050e8:	f7ff ff4c 	bl	8004f84 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	e000e400 	.word	0xe000e400
 80050fc:	20000e40 	.word	0x20000e40
 8005100:	20000e44 	.word	0x20000e44
 8005104:	e000ed20 	.word	0xe000ed20
 8005108:	2000001c 	.word	0x2000001c

0800510c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
	__asm volatile
 8005112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005116:	f383 8811 	msr	BASEPRI, r3
 800511a:	f3bf 8f6f 	isb	sy
 800511e:	f3bf 8f4f 	dsb	sy
 8005122:	607b      	str	r3, [r7, #4]
}
 8005124:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005126:	4b0f      	ldr	r3, [pc, #60]	; (8005164 <vPortEnterCritical+0x58>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	3301      	adds	r3, #1
 800512c:	4a0d      	ldr	r2, [pc, #52]	; (8005164 <vPortEnterCritical+0x58>)
 800512e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005130:	4b0c      	ldr	r3, [pc, #48]	; (8005164 <vPortEnterCritical+0x58>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d10f      	bne.n	8005158 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005138:	4b0b      	ldr	r3, [pc, #44]	; (8005168 <vPortEnterCritical+0x5c>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	b2db      	uxtb	r3, r3
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00a      	beq.n	8005158 <vPortEnterCritical+0x4c>
	__asm volatile
 8005142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005146:	f383 8811 	msr	BASEPRI, r3
 800514a:	f3bf 8f6f 	isb	sy
 800514e:	f3bf 8f4f 	dsb	sy
 8005152:	603b      	str	r3, [r7, #0]
}
 8005154:	bf00      	nop
 8005156:	e7fe      	b.n	8005156 <vPortEnterCritical+0x4a>
	}
}
 8005158:	bf00      	nop
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	bc80      	pop	{r7}
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	2000001c 	.word	0x2000001c
 8005168:	e000ed04 	.word	0xe000ed04

0800516c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005172:	4b11      	ldr	r3, [pc, #68]	; (80051b8 <vPortExitCritical+0x4c>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10a      	bne.n	8005190 <vPortExitCritical+0x24>
	__asm volatile
 800517a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517e:	f383 8811 	msr	BASEPRI, r3
 8005182:	f3bf 8f6f 	isb	sy
 8005186:	f3bf 8f4f 	dsb	sy
 800518a:	607b      	str	r3, [r7, #4]
}
 800518c:	bf00      	nop
 800518e:	e7fe      	b.n	800518e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005190:	4b09      	ldr	r3, [pc, #36]	; (80051b8 <vPortExitCritical+0x4c>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	3b01      	subs	r3, #1
 8005196:	4a08      	ldr	r2, [pc, #32]	; (80051b8 <vPortExitCritical+0x4c>)
 8005198:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800519a:	4b07      	ldr	r3, [pc, #28]	; (80051b8 <vPortExitCritical+0x4c>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d105      	bne.n	80051ae <vPortExitCritical+0x42>
 80051a2:	2300      	movs	r3, #0
 80051a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	f383 8811 	msr	BASEPRI, r3
}
 80051ac:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80051ae:	bf00      	nop
 80051b0:	370c      	adds	r7, #12
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bc80      	pop	{r7}
 80051b6:	4770      	bx	lr
 80051b8:	2000001c 	.word	0x2000001c
 80051bc:	00000000 	.word	0x00000000

080051c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80051c0:	f3ef 8009 	mrs	r0, PSP
 80051c4:	f3bf 8f6f 	isb	sy
 80051c8:	4b0d      	ldr	r3, [pc, #52]	; (8005200 <pxCurrentTCBConst>)
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80051d0:	6010      	str	r0, [r2, #0]
 80051d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80051d6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80051da:	f380 8811 	msr	BASEPRI, r0
 80051de:	f7fe ff3d 	bl	800405c <vTaskSwitchContext>
 80051e2:	f04f 0000 	mov.w	r0, #0
 80051e6:	f380 8811 	msr	BASEPRI, r0
 80051ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80051ee:	6819      	ldr	r1, [r3, #0]
 80051f0:	6808      	ldr	r0, [r1, #0]
 80051f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80051f6:	f380 8809 	msr	PSP, r0
 80051fa:	f3bf 8f6f 	isb	sy
 80051fe:	4770      	bx	lr

08005200 <pxCurrentTCBConst>:
 8005200:	20000814 	.word	0x20000814
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005204:	bf00      	nop
 8005206:	bf00      	nop

08005208 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
	__asm volatile
 800520e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005212:	f383 8811 	msr	BASEPRI, r3
 8005216:	f3bf 8f6f 	isb	sy
 800521a:	f3bf 8f4f 	dsb	sy
 800521e:	607b      	str	r3, [r7, #4]
}
 8005220:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005222:	f7fe fe5d 	bl	8003ee0 <xTaskIncrementTick>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d003      	beq.n	8005234 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800522c:	4b06      	ldr	r3, [pc, #24]	; (8005248 <xPortSysTickHandler+0x40>)
 800522e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005232:	601a      	str	r2, [r3, #0]
 8005234:	2300      	movs	r3, #0
 8005236:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	f383 8811 	msr	BASEPRI, r3
}
 800523e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005240:	bf00      	nop
 8005242:	3708      	adds	r7, #8
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}
 8005248:	e000ed04 	.word	0xe000ed04

0800524c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800524c:	b480      	push	{r7}
 800524e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005250:	4b0a      	ldr	r3, [pc, #40]	; (800527c <vPortSetupTimerInterrupt+0x30>)
 8005252:	2200      	movs	r2, #0
 8005254:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005256:	4b0a      	ldr	r3, [pc, #40]	; (8005280 <vPortSetupTimerInterrupt+0x34>)
 8005258:	2200      	movs	r2, #0
 800525a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800525c:	4b09      	ldr	r3, [pc, #36]	; (8005284 <vPortSetupTimerInterrupt+0x38>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a09      	ldr	r2, [pc, #36]	; (8005288 <vPortSetupTimerInterrupt+0x3c>)
 8005262:	fba2 2303 	umull	r2, r3, r2, r3
 8005266:	099b      	lsrs	r3, r3, #6
 8005268:	4a08      	ldr	r2, [pc, #32]	; (800528c <vPortSetupTimerInterrupt+0x40>)
 800526a:	3b01      	subs	r3, #1
 800526c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800526e:	4b03      	ldr	r3, [pc, #12]	; (800527c <vPortSetupTimerInterrupt+0x30>)
 8005270:	2207      	movs	r2, #7
 8005272:	601a      	str	r2, [r3, #0]
}
 8005274:	bf00      	nop
 8005276:	46bd      	mov	sp, r7
 8005278:	bc80      	pop	{r7}
 800527a:	4770      	bx	lr
 800527c:	e000e010 	.word	0xe000e010
 8005280:	e000e018 	.word	0xe000e018
 8005284:	20000010 	.word	0x20000010
 8005288:	10624dd3 	.word	0x10624dd3
 800528c:	e000e014 	.word	0xe000e014

08005290 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005296:	f3ef 8305 	mrs	r3, IPSR
 800529a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2b0f      	cmp	r3, #15
 80052a0:	d914      	bls.n	80052cc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80052a2:	4a16      	ldr	r2, [pc, #88]	; (80052fc <vPortValidateInterruptPriority+0x6c>)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	4413      	add	r3, r2
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80052ac:	4b14      	ldr	r3, [pc, #80]	; (8005300 <vPortValidateInterruptPriority+0x70>)
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	7afa      	ldrb	r2, [r7, #11]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d20a      	bcs.n	80052cc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80052b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ba:	f383 8811 	msr	BASEPRI, r3
 80052be:	f3bf 8f6f 	isb	sy
 80052c2:	f3bf 8f4f 	dsb	sy
 80052c6:	607b      	str	r3, [r7, #4]
}
 80052c8:	bf00      	nop
 80052ca:	e7fe      	b.n	80052ca <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80052cc:	4b0d      	ldr	r3, [pc, #52]	; (8005304 <vPortValidateInterruptPriority+0x74>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80052d4:	4b0c      	ldr	r3, [pc, #48]	; (8005308 <vPortValidateInterruptPriority+0x78>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d90a      	bls.n	80052f2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80052dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e0:	f383 8811 	msr	BASEPRI, r3
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	f3bf 8f4f 	dsb	sy
 80052ec:	603b      	str	r3, [r7, #0]
}
 80052ee:	bf00      	nop
 80052f0:	e7fe      	b.n	80052f0 <vPortValidateInterruptPriority+0x60>
	}
 80052f2:	bf00      	nop
 80052f4:	3714      	adds	r7, #20
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bc80      	pop	{r7}
 80052fa:	4770      	bx	lr
 80052fc:	e000e3f0 	.word	0xe000e3f0
 8005300:	20000e40 	.word	0x20000e40
 8005304:	e000ed0c 	.word	0xe000ed0c
 8005308:	20000e44 	.word	0x20000e44

0800530c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b08a      	sub	sp, #40	; 0x28
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005314:	2300      	movs	r3, #0
 8005316:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005318:	f7fe fd28 	bl	8003d6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800531c:	4b58      	ldr	r3, [pc, #352]	; (8005480 <pvPortMalloc+0x174>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d101      	bne.n	8005328 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005324:	f000 f910 	bl	8005548 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005328:	4b56      	ldr	r3, [pc, #344]	; (8005484 <pvPortMalloc+0x178>)
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4013      	ands	r3, r2
 8005330:	2b00      	cmp	r3, #0
 8005332:	f040 808e 	bne.w	8005452 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d01d      	beq.n	8005378 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800533c:	2208      	movs	r2, #8
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4413      	add	r3, r2
 8005342:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f003 0307 	and.w	r3, r3, #7
 800534a:	2b00      	cmp	r3, #0
 800534c:	d014      	beq.n	8005378 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f023 0307 	bic.w	r3, r3, #7
 8005354:	3308      	adds	r3, #8
 8005356:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f003 0307 	and.w	r3, r3, #7
 800535e:	2b00      	cmp	r3, #0
 8005360:	d00a      	beq.n	8005378 <pvPortMalloc+0x6c>
	__asm volatile
 8005362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005366:	f383 8811 	msr	BASEPRI, r3
 800536a:	f3bf 8f6f 	isb	sy
 800536e:	f3bf 8f4f 	dsb	sy
 8005372:	617b      	str	r3, [r7, #20]
}
 8005374:	bf00      	nop
 8005376:	e7fe      	b.n	8005376 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d069      	beq.n	8005452 <pvPortMalloc+0x146>
 800537e:	4b42      	ldr	r3, [pc, #264]	; (8005488 <pvPortMalloc+0x17c>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	429a      	cmp	r2, r3
 8005386:	d864      	bhi.n	8005452 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005388:	4b40      	ldr	r3, [pc, #256]	; (800548c <pvPortMalloc+0x180>)
 800538a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800538c:	4b3f      	ldr	r3, [pc, #252]	; (800548c <pvPortMalloc+0x180>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005392:	e004      	b.n	800539e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005396:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800539e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d903      	bls.n	80053b0 <pvPortMalloc+0xa4>
 80053a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1f1      	bne.n	8005394 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80053b0:	4b33      	ldr	r3, [pc, #204]	; (8005480 <pvPortMalloc+0x174>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d04b      	beq.n	8005452 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80053ba:	6a3b      	ldr	r3, [r7, #32]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2208      	movs	r2, #8
 80053c0:	4413      	add	r3, r2
 80053c2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80053c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	6a3b      	ldr	r3, [r7, #32]
 80053ca:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80053cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ce:	685a      	ldr	r2, [r3, #4]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	1ad2      	subs	r2, r2, r3
 80053d4:	2308      	movs	r3, #8
 80053d6:	005b      	lsls	r3, r3, #1
 80053d8:	429a      	cmp	r2, r3
 80053da:	d91f      	bls.n	800541c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80053dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4413      	add	r3, r2
 80053e2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	f003 0307 	and.w	r3, r3, #7
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00a      	beq.n	8005404 <pvPortMalloc+0xf8>
	__asm volatile
 80053ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f2:	f383 8811 	msr	BASEPRI, r3
 80053f6:	f3bf 8f6f 	isb	sy
 80053fa:	f3bf 8f4f 	dsb	sy
 80053fe:	613b      	str	r3, [r7, #16]
}
 8005400:	bf00      	nop
 8005402:	e7fe      	b.n	8005402 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005406:	685a      	ldr	r2, [r3, #4]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	1ad2      	subs	r2, r2, r3
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005416:	69b8      	ldr	r0, [r7, #24]
 8005418:	f000 f8f8 	bl	800560c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800541c:	4b1a      	ldr	r3, [pc, #104]	; (8005488 <pvPortMalloc+0x17c>)
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	4a18      	ldr	r2, [pc, #96]	; (8005488 <pvPortMalloc+0x17c>)
 8005428:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800542a:	4b17      	ldr	r3, [pc, #92]	; (8005488 <pvPortMalloc+0x17c>)
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	4b18      	ldr	r3, [pc, #96]	; (8005490 <pvPortMalloc+0x184>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	429a      	cmp	r2, r3
 8005434:	d203      	bcs.n	800543e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005436:	4b14      	ldr	r3, [pc, #80]	; (8005488 <pvPortMalloc+0x17c>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a15      	ldr	r2, [pc, #84]	; (8005490 <pvPortMalloc+0x184>)
 800543c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800543e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	4b10      	ldr	r3, [pc, #64]	; (8005484 <pvPortMalloc+0x178>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	431a      	orrs	r2, r3
 8005448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800544c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544e:	2200      	movs	r2, #0
 8005450:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005452:	f7fe fc99 	bl	8003d88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	f003 0307 	and.w	r3, r3, #7
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00a      	beq.n	8005476 <pvPortMalloc+0x16a>
	__asm volatile
 8005460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005464:	f383 8811 	msr	BASEPRI, r3
 8005468:	f3bf 8f6f 	isb	sy
 800546c:	f3bf 8f4f 	dsb	sy
 8005470:	60fb      	str	r3, [r7, #12]
}
 8005472:	bf00      	nop
 8005474:	e7fe      	b.n	8005474 <pvPortMalloc+0x168>
	return pvReturn;
 8005476:	69fb      	ldr	r3, [r7, #28]
}
 8005478:	4618      	mov	r0, r3
 800547a:	3728      	adds	r7, #40	; 0x28
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	20001a50 	.word	0x20001a50
 8005484:	20001a5c 	.word	0x20001a5c
 8005488:	20001a54 	.word	0x20001a54
 800548c:	20001a48 	.word	0x20001a48
 8005490:	20001a58 	.word	0x20001a58

08005494 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b086      	sub	sp, #24
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d048      	beq.n	8005538 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80054a6:	2308      	movs	r3, #8
 80054a8:	425b      	negs	r3, r3
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	4413      	add	r3, r2
 80054ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	685a      	ldr	r2, [r3, #4]
 80054b8:	4b21      	ldr	r3, [pc, #132]	; (8005540 <vPortFree+0xac>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4013      	ands	r3, r2
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d10a      	bne.n	80054d8 <vPortFree+0x44>
	__asm volatile
 80054c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c6:	f383 8811 	msr	BASEPRI, r3
 80054ca:	f3bf 8f6f 	isb	sy
 80054ce:	f3bf 8f4f 	dsb	sy
 80054d2:	60fb      	str	r3, [r7, #12]
}
 80054d4:	bf00      	nop
 80054d6:	e7fe      	b.n	80054d6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d00a      	beq.n	80054f6 <vPortFree+0x62>
	__asm volatile
 80054e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e4:	f383 8811 	msr	BASEPRI, r3
 80054e8:	f3bf 8f6f 	isb	sy
 80054ec:	f3bf 8f4f 	dsb	sy
 80054f0:	60bb      	str	r3, [r7, #8]
}
 80054f2:	bf00      	nop
 80054f4:	e7fe      	b.n	80054f4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	685a      	ldr	r2, [r3, #4]
 80054fa:	4b11      	ldr	r3, [pc, #68]	; (8005540 <vPortFree+0xac>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4013      	ands	r3, r2
 8005500:	2b00      	cmp	r3, #0
 8005502:	d019      	beq.n	8005538 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d115      	bne.n	8005538 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	685a      	ldr	r2, [r3, #4]
 8005510:	4b0b      	ldr	r3, [pc, #44]	; (8005540 <vPortFree+0xac>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	43db      	mvns	r3, r3
 8005516:	401a      	ands	r2, r3
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800551c:	f7fe fc26 	bl	8003d6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	685a      	ldr	r2, [r3, #4]
 8005524:	4b07      	ldr	r3, [pc, #28]	; (8005544 <vPortFree+0xb0>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4413      	add	r3, r2
 800552a:	4a06      	ldr	r2, [pc, #24]	; (8005544 <vPortFree+0xb0>)
 800552c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800552e:	6938      	ldr	r0, [r7, #16]
 8005530:	f000 f86c 	bl	800560c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005534:	f7fe fc28 	bl	8003d88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005538:	bf00      	nop
 800553a:	3718      	adds	r7, #24
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	20001a5c 	.word	0x20001a5c
 8005544:	20001a54 	.word	0x20001a54

08005548 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800554e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005552:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005554:	4b27      	ldr	r3, [pc, #156]	; (80055f4 <prvHeapInit+0xac>)
 8005556:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f003 0307 	and.w	r3, r3, #7
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00c      	beq.n	800557c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	3307      	adds	r3, #7
 8005566:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f023 0307 	bic.w	r3, r3, #7
 800556e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	4a1f      	ldr	r2, [pc, #124]	; (80055f4 <prvHeapInit+0xac>)
 8005578:	4413      	add	r3, r2
 800557a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005580:	4a1d      	ldr	r2, [pc, #116]	; (80055f8 <prvHeapInit+0xb0>)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005586:	4b1c      	ldr	r3, [pc, #112]	; (80055f8 <prvHeapInit+0xb0>)
 8005588:	2200      	movs	r2, #0
 800558a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	68ba      	ldr	r2, [r7, #8]
 8005590:	4413      	add	r3, r2
 8005592:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005594:	2208      	movs	r2, #8
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	1a9b      	subs	r3, r3, r2
 800559a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f023 0307 	bic.w	r3, r3, #7
 80055a2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	4a15      	ldr	r2, [pc, #84]	; (80055fc <prvHeapInit+0xb4>)
 80055a8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80055aa:	4b14      	ldr	r3, [pc, #80]	; (80055fc <prvHeapInit+0xb4>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2200      	movs	r2, #0
 80055b0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80055b2:	4b12      	ldr	r3, [pc, #72]	; (80055fc <prvHeapInit+0xb4>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2200      	movs	r2, #0
 80055b8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	1ad2      	subs	r2, r2, r3
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80055c8:	4b0c      	ldr	r3, [pc, #48]	; (80055fc <prvHeapInit+0xb4>)
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	4a0a      	ldr	r2, [pc, #40]	; (8005600 <prvHeapInit+0xb8>)
 80055d6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	4a09      	ldr	r2, [pc, #36]	; (8005604 <prvHeapInit+0xbc>)
 80055de:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80055e0:	4b09      	ldr	r3, [pc, #36]	; (8005608 <prvHeapInit+0xc0>)
 80055e2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80055e6:	601a      	str	r2, [r3, #0]
}
 80055e8:	bf00      	nop
 80055ea:	3714      	adds	r7, #20
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bc80      	pop	{r7}
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	20000e48 	.word	0x20000e48
 80055f8:	20001a48 	.word	0x20001a48
 80055fc:	20001a50 	.word	0x20001a50
 8005600:	20001a58 	.word	0x20001a58
 8005604:	20001a54 	.word	0x20001a54
 8005608:	20001a5c 	.word	0x20001a5c

0800560c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005614:	4b27      	ldr	r3, [pc, #156]	; (80056b4 <prvInsertBlockIntoFreeList+0xa8>)
 8005616:	60fb      	str	r3, [r7, #12]
 8005618:	e002      	b.n	8005620 <prvInsertBlockIntoFreeList+0x14>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	60fb      	str	r3, [r7, #12]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	429a      	cmp	r2, r3
 8005628:	d8f7      	bhi.n	800561a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	68ba      	ldr	r2, [r7, #8]
 8005634:	4413      	add	r3, r2
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	429a      	cmp	r2, r3
 800563a:	d108      	bne.n	800564e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	685a      	ldr	r2, [r3, #4]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	441a      	add	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	68ba      	ldr	r2, [r7, #8]
 8005658:	441a      	add	r2, r3
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	429a      	cmp	r2, r3
 8005660:	d118      	bne.n	8005694 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	4b14      	ldr	r3, [pc, #80]	; (80056b8 <prvInsertBlockIntoFreeList+0xac>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	429a      	cmp	r2, r3
 800566c:	d00d      	beq.n	800568a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685a      	ldr	r2, [r3, #4]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	441a      	add	r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	601a      	str	r2, [r3, #0]
 8005688:	e008      	b.n	800569c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800568a:	4b0b      	ldr	r3, [pc, #44]	; (80056b8 <prvInsertBlockIntoFreeList+0xac>)
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	601a      	str	r2, [r3, #0]
 8005692:	e003      	b.n	800569c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d002      	beq.n	80056aa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056aa:	bf00      	nop
 80056ac:	3714      	adds	r7, #20
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bc80      	pop	{r7}
 80056b2:	4770      	bx	lr
 80056b4:	20001a48 	.word	0x20001a48
 80056b8:	20001a50 	.word	0x20001a50

080056bc <__errno>:
 80056bc:	4b01      	ldr	r3, [pc, #4]	; (80056c4 <__errno+0x8>)
 80056be:	6818      	ldr	r0, [r3, #0]
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	20000020 	.word	0x20000020

080056c8 <__libc_init_array>:
 80056c8:	b570      	push	{r4, r5, r6, lr}
 80056ca:	2600      	movs	r6, #0
 80056cc:	4d0c      	ldr	r5, [pc, #48]	; (8005700 <__libc_init_array+0x38>)
 80056ce:	4c0d      	ldr	r4, [pc, #52]	; (8005704 <__libc_init_array+0x3c>)
 80056d0:	1b64      	subs	r4, r4, r5
 80056d2:	10a4      	asrs	r4, r4, #2
 80056d4:	42a6      	cmp	r6, r4
 80056d6:	d109      	bne.n	80056ec <__libc_init_array+0x24>
 80056d8:	f000 fc9c 	bl	8006014 <_init>
 80056dc:	2600      	movs	r6, #0
 80056de:	4d0a      	ldr	r5, [pc, #40]	; (8005708 <__libc_init_array+0x40>)
 80056e0:	4c0a      	ldr	r4, [pc, #40]	; (800570c <__libc_init_array+0x44>)
 80056e2:	1b64      	subs	r4, r4, r5
 80056e4:	10a4      	asrs	r4, r4, #2
 80056e6:	42a6      	cmp	r6, r4
 80056e8:	d105      	bne.n	80056f6 <__libc_init_array+0x2e>
 80056ea:	bd70      	pop	{r4, r5, r6, pc}
 80056ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80056f0:	4798      	blx	r3
 80056f2:	3601      	adds	r6, #1
 80056f4:	e7ee      	b.n	80056d4 <__libc_init_array+0xc>
 80056f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80056fa:	4798      	blx	r3
 80056fc:	3601      	adds	r6, #1
 80056fe:	e7f2      	b.n	80056e6 <__libc_init_array+0x1e>
 8005700:	080061d4 	.word	0x080061d4
 8005704:	080061d4 	.word	0x080061d4
 8005708:	080061d4 	.word	0x080061d4
 800570c:	080061d8 	.word	0x080061d8

08005710 <memcpy>:
 8005710:	440a      	add	r2, r1
 8005712:	4291      	cmp	r1, r2
 8005714:	f100 33ff 	add.w	r3, r0, #4294967295
 8005718:	d100      	bne.n	800571c <memcpy+0xc>
 800571a:	4770      	bx	lr
 800571c:	b510      	push	{r4, lr}
 800571e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005722:	4291      	cmp	r1, r2
 8005724:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005728:	d1f9      	bne.n	800571e <memcpy+0xe>
 800572a:	bd10      	pop	{r4, pc}

0800572c <memset>:
 800572c:	4603      	mov	r3, r0
 800572e:	4402      	add	r2, r0
 8005730:	4293      	cmp	r3, r2
 8005732:	d100      	bne.n	8005736 <memset+0xa>
 8005734:	4770      	bx	lr
 8005736:	f803 1b01 	strb.w	r1, [r3], #1
 800573a:	e7f9      	b.n	8005730 <memset+0x4>

0800573c <siprintf>:
 800573c:	b40e      	push	{r1, r2, r3}
 800573e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005742:	b500      	push	{lr}
 8005744:	b09c      	sub	sp, #112	; 0x70
 8005746:	ab1d      	add	r3, sp, #116	; 0x74
 8005748:	9002      	str	r0, [sp, #8]
 800574a:	9006      	str	r0, [sp, #24]
 800574c:	9107      	str	r1, [sp, #28]
 800574e:	9104      	str	r1, [sp, #16]
 8005750:	4808      	ldr	r0, [pc, #32]	; (8005774 <siprintf+0x38>)
 8005752:	4909      	ldr	r1, [pc, #36]	; (8005778 <siprintf+0x3c>)
 8005754:	f853 2b04 	ldr.w	r2, [r3], #4
 8005758:	9105      	str	r1, [sp, #20]
 800575a:	6800      	ldr	r0, [r0, #0]
 800575c:	a902      	add	r1, sp, #8
 800575e:	9301      	str	r3, [sp, #4]
 8005760:	f000 f868 	bl	8005834 <_svfiprintf_r>
 8005764:	2200      	movs	r2, #0
 8005766:	9b02      	ldr	r3, [sp, #8]
 8005768:	701a      	strb	r2, [r3, #0]
 800576a:	b01c      	add	sp, #112	; 0x70
 800576c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005770:	b003      	add	sp, #12
 8005772:	4770      	bx	lr
 8005774:	20000020 	.word	0x20000020
 8005778:	ffff0208 	.word	0xffff0208

0800577c <__ssputs_r>:
 800577c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005780:	688e      	ldr	r6, [r1, #8]
 8005782:	4682      	mov	sl, r0
 8005784:	429e      	cmp	r6, r3
 8005786:	460c      	mov	r4, r1
 8005788:	4690      	mov	r8, r2
 800578a:	461f      	mov	r7, r3
 800578c:	d838      	bhi.n	8005800 <__ssputs_r+0x84>
 800578e:	898a      	ldrh	r2, [r1, #12]
 8005790:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005794:	d032      	beq.n	80057fc <__ssputs_r+0x80>
 8005796:	6825      	ldr	r5, [r4, #0]
 8005798:	6909      	ldr	r1, [r1, #16]
 800579a:	3301      	adds	r3, #1
 800579c:	eba5 0901 	sub.w	r9, r5, r1
 80057a0:	6965      	ldr	r5, [r4, #20]
 80057a2:	444b      	add	r3, r9
 80057a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80057a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80057ac:	106d      	asrs	r5, r5, #1
 80057ae:	429d      	cmp	r5, r3
 80057b0:	bf38      	it	cc
 80057b2:	461d      	movcc	r5, r3
 80057b4:	0553      	lsls	r3, r2, #21
 80057b6:	d531      	bpl.n	800581c <__ssputs_r+0xa0>
 80057b8:	4629      	mov	r1, r5
 80057ba:	f000 fb61 	bl	8005e80 <_malloc_r>
 80057be:	4606      	mov	r6, r0
 80057c0:	b950      	cbnz	r0, 80057d8 <__ssputs_r+0x5c>
 80057c2:	230c      	movs	r3, #12
 80057c4:	f04f 30ff 	mov.w	r0, #4294967295
 80057c8:	f8ca 3000 	str.w	r3, [sl]
 80057cc:	89a3      	ldrh	r3, [r4, #12]
 80057ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057d2:	81a3      	strh	r3, [r4, #12]
 80057d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057d8:	464a      	mov	r2, r9
 80057da:	6921      	ldr	r1, [r4, #16]
 80057dc:	f7ff ff98 	bl	8005710 <memcpy>
 80057e0:	89a3      	ldrh	r3, [r4, #12]
 80057e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80057e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057ea:	81a3      	strh	r3, [r4, #12]
 80057ec:	6126      	str	r6, [r4, #16]
 80057ee:	444e      	add	r6, r9
 80057f0:	6026      	str	r6, [r4, #0]
 80057f2:	463e      	mov	r6, r7
 80057f4:	6165      	str	r5, [r4, #20]
 80057f6:	eba5 0509 	sub.w	r5, r5, r9
 80057fa:	60a5      	str	r5, [r4, #8]
 80057fc:	42be      	cmp	r6, r7
 80057fe:	d900      	bls.n	8005802 <__ssputs_r+0x86>
 8005800:	463e      	mov	r6, r7
 8005802:	4632      	mov	r2, r6
 8005804:	4641      	mov	r1, r8
 8005806:	6820      	ldr	r0, [r4, #0]
 8005808:	f000 fab8 	bl	8005d7c <memmove>
 800580c:	68a3      	ldr	r3, [r4, #8]
 800580e:	2000      	movs	r0, #0
 8005810:	1b9b      	subs	r3, r3, r6
 8005812:	60a3      	str	r3, [r4, #8]
 8005814:	6823      	ldr	r3, [r4, #0]
 8005816:	4433      	add	r3, r6
 8005818:	6023      	str	r3, [r4, #0]
 800581a:	e7db      	b.n	80057d4 <__ssputs_r+0x58>
 800581c:	462a      	mov	r2, r5
 800581e:	f000 fba3 	bl	8005f68 <_realloc_r>
 8005822:	4606      	mov	r6, r0
 8005824:	2800      	cmp	r0, #0
 8005826:	d1e1      	bne.n	80057ec <__ssputs_r+0x70>
 8005828:	4650      	mov	r0, sl
 800582a:	6921      	ldr	r1, [r4, #16]
 800582c:	f000 fac0 	bl	8005db0 <_free_r>
 8005830:	e7c7      	b.n	80057c2 <__ssputs_r+0x46>
	...

08005834 <_svfiprintf_r>:
 8005834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005838:	4698      	mov	r8, r3
 800583a:	898b      	ldrh	r3, [r1, #12]
 800583c:	4607      	mov	r7, r0
 800583e:	061b      	lsls	r3, r3, #24
 8005840:	460d      	mov	r5, r1
 8005842:	4614      	mov	r4, r2
 8005844:	b09d      	sub	sp, #116	; 0x74
 8005846:	d50e      	bpl.n	8005866 <_svfiprintf_r+0x32>
 8005848:	690b      	ldr	r3, [r1, #16]
 800584a:	b963      	cbnz	r3, 8005866 <_svfiprintf_r+0x32>
 800584c:	2140      	movs	r1, #64	; 0x40
 800584e:	f000 fb17 	bl	8005e80 <_malloc_r>
 8005852:	6028      	str	r0, [r5, #0]
 8005854:	6128      	str	r0, [r5, #16]
 8005856:	b920      	cbnz	r0, 8005862 <_svfiprintf_r+0x2e>
 8005858:	230c      	movs	r3, #12
 800585a:	603b      	str	r3, [r7, #0]
 800585c:	f04f 30ff 	mov.w	r0, #4294967295
 8005860:	e0d1      	b.n	8005a06 <_svfiprintf_r+0x1d2>
 8005862:	2340      	movs	r3, #64	; 0x40
 8005864:	616b      	str	r3, [r5, #20]
 8005866:	2300      	movs	r3, #0
 8005868:	9309      	str	r3, [sp, #36]	; 0x24
 800586a:	2320      	movs	r3, #32
 800586c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005870:	2330      	movs	r3, #48	; 0x30
 8005872:	f04f 0901 	mov.w	r9, #1
 8005876:	f8cd 800c 	str.w	r8, [sp, #12]
 800587a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005a20 <_svfiprintf_r+0x1ec>
 800587e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005882:	4623      	mov	r3, r4
 8005884:	469a      	mov	sl, r3
 8005886:	f813 2b01 	ldrb.w	r2, [r3], #1
 800588a:	b10a      	cbz	r2, 8005890 <_svfiprintf_r+0x5c>
 800588c:	2a25      	cmp	r2, #37	; 0x25
 800588e:	d1f9      	bne.n	8005884 <_svfiprintf_r+0x50>
 8005890:	ebba 0b04 	subs.w	fp, sl, r4
 8005894:	d00b      	beq.n	80058ae <_svfiprintf_r+0x7a>
 8005896:	465b      	mov	r3, fp
 8005898:	4622      	mov	r2, r4
 800589a:	4629      	mov	r1, r5
 800589c:	4638      	mov	r0, r7
 800589e:	f7ff ff6d 	bl	800577c <__ssputs_r>
 80058a2:	3001      	adds	r0, #1
 80058a4:	f000 80aa 	beq.w	80059fc <_svfiprintf_r+0x1c8>
 80058a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058aa:	445a      	add	r2, fp
 80058ac:	9209      	str	r2, [sp, #36]	; 0x24
 80058ae:	f89a 3000 	ldrb.w	r3, [sl]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	f000 80a2 	beq.w	80059fc <_svfiprintf_r+0x1c8>
 80058b8:	2300      	movs	r3, #0
 80058ba:	f04f 32ff 	mov.w	r2, #4294967295
 80058be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058c2:	f10a 0a01 	add.w	sl, sl, #1
 80058c6:	9304      	str	r3, [sp, #16]
 80058c8:	9307      	str	r3, [sp, #28]
 80058ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80058ce:	931a      	str	r3, [sp, #104]	; 0x68
 80058d0:	4654      	mov	r4, sl
 80058d2:	2205      	movs	r2, #5
 80058d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058d8:	4851      	ldr	r0, [pc, #324]	; (8005a20 <_svfiprintf_r+0x1ec>)
 80058da:	f000 fa41 	bl	8005d60 <memchr>
 80058de:	9a04      	ldr	r2, [sp, #16]
 80058e0:	b9d8      	cbnz	r0, 800591a <_svfiprintf_r+0xe6>
 80058e2:	06d0      	lsls	r0, r2, #27
 80058e4:	bf44      	itt	mi
 80058e6:	2320      	movmi	r3, #32
 80058e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058ec:	0711      	lsls	r1, r2, #28
 80058ee:	bf44      	itt	mi
 80058f0:	232b      	movmi	r3, #43	; 0x2b
 80058f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058f6:	f89a 3000 	ldrb.w	r3, [sl]
 80058fa:	2b2a      	cmp	r3, #42	; 0x2a
 80058fc:	d015      	beq.n	800592a <_svfiprintf_r+0xf6>
 80058fe:	4654      	mov	r4, sl
 8005900:	2000      	movs	r0, #0
 8005902:	f04f 0c0a 	mov.w	ip, #10
 8005906:	9a07      	ldr	r2, [sp, #28]
 8005908:	4621      	mov	r1, r4
 800590a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800590e:	3b30      	subs	r3, #48	; 0x30
 8005910:	2b09      	cmp	r3, #9
 8005912:	d94e      	bls.n	80059b2 <_svfiprintf_r+0x17e>
 8005914:	b1b0      	cbz	r0, 8005944 <_svfiprintf_r+0x110>
 8005916:	9207      	str	r2, [sp, #28]
 8005918:	e014      	b.n	8005944 <_svfiprintf_r+0x110>
 800591a:	eba0 0308 	sub.w	r3, r0, r8
 800591e:	fa09 f303 	lsl.w	r3, r9, r3
 8005922:	4313      	orrs	r3, r2
 8005924:	46a2      	mov	sl, r4
 8005926:	9304      	str	r3, [sp, #16]
 8005928:	e7d2      	b.n	80058d0 <_svfiprintf_r+0x9c>
 800592a:	9b03      	ldr	r3, [sp, #12]
 800592c:	1d19      	adds	r1, r3, #4
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	9103      	str	r1, [sp, #12]
 8005932:	2b00      	cmp	r3, #0
 8005934:	bfbb      	ittet	lt
 8005936:	425b      	neglt	r3, r3
 8005938:	f042 0202 	orrlt.w	r2, r2, #2
 800593c:	9307      	strge	r3, [sp, #28]
 800593e:	9307      	strlt	r3, [sp, #28]
 8005940:	bfb8      	it	lt
 8005942:	9204      	strlt	r2, [sp, #16]
 8005944:	7823      	ldrb	r3, [r4, #0]
 8005946:	2b2e      	cmp	r3, #46	; 0x2e
 8005948:	d10c      	bne.n	8005964 <_svfiprintf_r+0x130>
 800594a:	7863      	ldrb	r3, [r4, #1]
 800594c:	2b2a      	cmp	r3, #42	; 0x2a
 800594e:	d135      	bne.n	80059bc <_svfiprintf_r+0x188>
 8005950:	9b03      	ldr	r3, [sp, #12]
 8005952:	3402      	adds	r4, #2
 8005954:	1d1a      	adds	r2, r3, #4
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	9203      	str	r2, [sp, #12]
 800595a:	2b00      	cmp	r3, #0
 800595c:	bfb8      	it	lt
 800595e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005962:	9305      	str	r3, [sp, #20]
 8005964:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005a24 <_svfiprintf_r+0x1f0>
 8005968:	2203      	movs	r2, #3
 800596a:	4650      	mov	r0, sl
 800596c:	7821      	ldrb	r1, [r4, #0]
 800596e:	f000 f9f7 	bl	8005d60 <memchr>
 8005972:	b140      	cbz	r0, 8005986 <_svfiprintf_r+0x152>
 8005974:	2340      	movs	r3, #64	; 0x40
 8005976:	eba0 000a 	sub.w	r0, r0, sl
 800597a:	fa03 f000 	lsl.w	r0, r3, r0
 800597e:	9b04      	ldr	r3, [sp, #16]
 8005980:	3401      	adds	r4, #1
 8005982:	4303      	orrs	r3, r0
 8005984:	9304      	str	r3, [sp, #16]
 8005986:	f814 1b01 	ldrb.w	r1, [r4], #1
 800598a:	2206      	movs	r2, #6
 800598c:	4826      	ldr	r0, [pc, #152]	; (8005a28 <_svfiprintf_r+0x1f4>)
 800598e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005992:	f000 f9e5 	bl	8005d60 <memchr>
 8005996:	2800      	cmp	r0, #0
 8005998:	d038      	beq.n	8005a0c <_svfiprintf_r+0x1d8>
 800599a:	4b24      	ldr	r3, [pc, #144]	; (8005a2c <_svfiprintf_r+0x1f8>)
 800599c:	bb1b      	cbnz	r3, 80059e6 <_svfiprintf_r+0x1b2>
 800599e:	9b03      	ldr	r3, [sp, #12]
 80059a0:	3307      	adds	r3, #7
 80059a2:	f023 0307 	bic.w	r3, r3, #7
 80059a6:	3308      	adds	r3, #8
 80059a8:	9303      	str	r3, [sp, #12]
 80059aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059ac:	4433      	add	r3, r6
 80059ae:	9309      	str	r3, [sp, #36]	; 0x24
 80059b0:	e767      	b.n	8005882 <_svfiprintf_r+0x4e>
 80059b2:	460c      	mov	r4, r1
 80059b4:	2001      	movs	r0, #1
 80059b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80059ba:	e7a5      	b.n	8005908 <_svfiprintf_r+0xd4>
 80059bc:	2300      	movs	r3, #0
 80059be:	f04f 0c0a 	mov.w	ip, #10
 80059c2:	4619      	mov	r1, r3
 80059c4:	3401      	adds	r4, #1
 80059c6:	9305      	str	r3, [sp, #20]
 80059c8:	4620      	mov	r0, r4
 80059ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059ce:	3a30      	subs	r2, #48	; 0x30
 80059d0:	2a09      	cmp	r2, #9
 80059d2:	d903      	bls.n	80059dc <_svfiprintf_r+0x1a8>
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d0c5      	beq.n	8005964 <_svfiprintf_r+0x130>
 80059d8:	9105      	str	r1, [sp, #20]
 80059da:	e7c3      	b.n	8005964 <_svfiprintf_r+0x130>
 80059dc:	4604      	mov	r4, r0
 80059de:	2301      	movs	r3, #1
 80059e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80059e4:	e7f0      	b.n	80059c8 <_svfiprintf_r+0x194>
 80059e6:	ab03      	add	r3, sp, #12
 80059e8:	9300      	str	r3, [sp, #0]
 80059ea:	462a      	mov	r2, r5
 80059ec:	4638      	mov	r0, r7
 80059ee:	4b10      	ldr	r3, [pc, #64]	; (8005a30 <_svfiprintf_r+0x1fc>)
 80059f0:	a904      	add	r1, sp, #16
 80059f2:	f3af 8000 	nop.w
 80059f6:	1c42      	adds	r2, r0, #1
 80059f8:	4606      	mov	r6, r0
 80059fa:	d1d6      	bne.n	80059aa <_svfiprintf_r+0x176>
 80059fc:	89ab      	ldrh	r3, [r5, #12]
 80059fe:	065b      	lsls	r3, r3, #25
 8005a00:	f53f af2c 	bmi.w	800585c <_svfiprintf_r+0x28>
 8005a04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a06:	b01d      	add	sp, #116	; 0x74
 8005a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a0c:	ab03      	add	r3, sp, #12
 8005a0e:	9300      	str	r3, [sp, #0]
 8005a10:	462a      	mov	r2, r5
 8005a12:	4638      	mov	r0, r7
 8005a14:	4b06      	ldr	r3, [pc, #24]	; (8005a30 <_svfiprintf_r+0x1fc>)
 8005a16:	a904      	add	r1, sp, #16
 8005a18:	f000 f87c 	bl	8005b14 <_printf_i>
 8005a1c:	e7eb      	b.n	80059f6 <_svfiprintf_r+0x1c2>
 8005a1e:	bf00      	nop
 8005a20:	080061a0 	.word	0x080061a0
 8005a24:	080061a6 	.word	0x080061a6
 8005a28:	080061aa 	.word	0x080061aa
 8005a2c:	00000000 	.word	0x00000000
 8005a30:	0800577d 	.word	0x0800577d

08005a34 <_printf_common>:
 8005a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a38:	4616      	mov	r6, r2
 8005a3a:	4699      	mov	r9, r3
 8005a3c:	688a      	ldr	r2, [r1, #8]
 8005a3e:	690b      	ldr	r3, [r1, #16]
 8005a40:	4607      	mov	r7, r0
 8005a42:	4293      	cmp	r3, r2
 8005a44:	bfb8      	it	lt
 8005a46:	4613      	movlt	r3, r2
 8005a48:	6033      	str	r3, [r6, #0]
 8005a4a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a4e:	460c      	mov	r4, r1
 8005a50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a54:	b10a      	cbz	r2, 8005a5a <_printf_common+0x26>
 8005a56:	3301      	adds	r3, #1
 8005a58:	6033      	str	r3, [r6, #0]
 8005a5a:	6823      	ldr	r3, [r4, #0]
 8005a5c:	0699      	lsls	r1, r3, #26
 8005a5e:	bf42      	ittt	mi
 8005a60:	6833      	ldrmi	r3, [r6, #0]
 8005a62:	3302      	addmi	r3, #2
 8005a64:	6033      	strmi	r3, [r6, #0]
 8005a66:	6825      	ldr	r5, [r4, #0]
 8005a68:	f015 0506 	ands.w	r5, r5, #6
 8005a6c:	d106      	bne.n	8005a7c <_printf_common+0x48>
 8005a6e:	f104 0a19 	add.w	sl, r4, #25
 8005a72:	68e3      	ldr	r3, [r4, #12]
 8005a74:	6832      	ldr	r2, [r6, #0]
 8005a76:	1a9b      	subs	r3, r3, r2
 8005a78:	42ab      	cmp	r3, r5
 8005a7a:	dc28      	bgt.n	8005ace <_printf_common+0x9a>
 8005a7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a80:	1e13      	subs	r3, r2, #0
 8005a82:	6822      	ldr	r2, [r4, #0]
 8005a84:	bf18      	it	ne
 8005a86:	2301      	movne	r3, #1
 8005a88:	0692      	lsls	r2, r2, #26
 8005a8a:	d42d      	bmi.n	8005ae8 <_printf_common+0xb4>
 8005a8c:	4649      	mov	r1, r9
 8005a8e:	4638      	mov	r0, r7
 8005a90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a94:	47c0      	blx	r8
 8005a96:	3001      	adds	r0, #1
 8005a98:	d020      	beq.n	8005adc <_printf_common+0xa8>
 8005a9a:	6823      	ldr	r3, [r4, #0]
 8005a9c:	68e5      	ldr	r5, [r4, #12]
 8005a9e:	f003 0306 	and.w	r3, r3, #6
 8005aa2:	2b04      	cmp	r3, #4
 8005aa4:	bf18      	it	ne
 8005aa6:	2500      	movne	r5, #0
 8005aa8:	6832      	ldr	r2, [r6, #0]
 8005aaa:	f04f 0600 	mov.w	r6, #0
 8005aae:	68a3      	ldr	r3, [r4, #8]
 8005ab0:	bf08      	it	eq
 8005ab2:	1aad      	subeq	r5, r5, r2
 8005ab4:	6922      	ldr	r2, [r4, #16]
 8005ab6:	bf08      	it	eq
 8005ab8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005abc:	4293      	cmp	r3, r2
 8005abe:	bfc4      	itt	gt
 8005ac0:	1a9b      	subgt	r3, r3, r2
 8005ac2:	18ed      	addgt	r5, r5, r3
 8005ac4:	341a      	adds	r4, #26
 8005ac6:	42b5      	cmp	r5, r6
 8005ac8:	d11a      	bne.n	8005b00 <_printf_common+0xcc>
 8005aca:	2000      	movs	r0, #0
 8005acc:	e008      	b.n	8005ae0 <_printf_common+0xac>
 8005ace:	2301      	movs	r3, #1
 8005ad0:	4652      	mov	r2, sl
 8005ad2:	4649      	mov	r1, r9
 8005ad4:	4638      	mov	r0, r7
 8005ad6:	47c0      	blx	r8
 8005ad8:	3001      	adds	r0, #1
 8005ada:	d103      	bne.n	8005ae4 <_printf_common+0xb0>
 8005adc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ae4:	3501      	adds	r5, #1
 8005ae6:	e7c4      	b.n	8005a72 <_printf_common+0x3e>
 8005ae8:	2030      	movs	r0, #48	; 0x30
 8005aea:	18e1      	adds	r1, r4, r3
 8005aec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005af0:	1c5a      	adds	r2, r3, #1
 8005af2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005af6:	4422      	add	r2, r4
 8005af8:	3302      	adds	r3, #2
 8005afa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005afe:	e7c5      	b.n	8005a8c <_printf_common+0x58>
 8005b00:	2301      	movs	r3, #1
 8005b02:	4622      	mov	r2, r4
 8005b04:	4649      	mov	r1, r9
 8005b06:	4638      	mov	r0, r7
 8005b08:	47c0      	blx	r8
 8005b0a:	3001      	adds	r0, #1
 8005b0c:	d0e6      	beq.n	8005adc <_printf_common+0xa8>
 8005b0e:	3601      	adds	r6, #1
 8005b10:	e7d9      	b.n	8005ac6 <_printf_common+0x92>
	...

08005b14 <_printf_i>:
 8005b14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b18:	7e0f      	ldrb	r7, [r1, #24]
 8005b1a:	4691      	mov	r9, r2
 8005b1c:	2f78      	cmp	r7, #120	; 0x78
 8005b1e:	4680      	mov	r8, r0
 8005b20:	460c      	mov	r4, r1
 8005b22:	469a      	mov	sl, r3
 8005b24:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b2a:	d807      	bhi.n	8005b3c <_printf_i+0x28>
 8005b2c:	2f62      	cmp	r7, #98	; 0x62
 8005b2e:	d80a      	bhi.n	8005b46 <_printf_i+0x32>
 8005b30:	2f00      	cmp	r7, #0
 8005b32:	f000 80d9 	beq.w	8005ce8 <_printf_i+0x1d4>
 8005b36:	2f58      	cmp	r7, #88	; 0x58
 8005b38:	f000 80a4 	beq.w	8005c84 <_printf_i+0x170>
 8005b3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b44:	e03a      	b.n	8005bbc <_printf_i+0xa8>
 8005b46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b4a:	2b15      	cmp	r3, #21
 8005b4c:	d8f6      	bhi.n	8005b3c <_printf_i+0x28>
 8005b4e:	a101      	add	r1, pc, #4	; (adr r1, 8005b54 <_printf_i+0x40>)
 8005b50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b54:	08005bad 	.word	0x08005bad
 8005b58:	08005bc1 	.word	0x08005bc1
 8005b5c:	08005b3d 	.word	0x08005b3d
 8005b60:	08005b3d 	.word	0x08005b3d
 8005b64:	08005b3d 	.word	0x08005b3d
 8005b68:	08005b3d 	.word	0x08005b3d
 8005b6c:	08005bc1 	.word	0x08005bc1
 8005b70:	08005b3d 	.word	0x08005b3d
 8005b74:	08005b3d 	.word	0x08005b3d
 8005b78:	08005b3d 	.word	0x08005b3d
 8005b7c:	08005b3d 	.word	0x08005b3d
 8005b80:	08005ccf 	.word	0x08005ccf
 8005b84:	08005bf1 	.word	0x08005bf1
 8005b88:	08005cb1 	.word	0x08005cb1
 8005b8c:	08005b3d 	.word	0x08005b3d
 8005b90:	08005b3d 	.word	0x08005b3d
 8005b94:	08005cf1 	.word	0x08005cf1
 8005b98:	08005b3d 	.word	0x08005b3d
 8005b9c:	08005bf1 	.word	0x08005bf1
 8005ba0:	08005b3d 	.word	0x08005b3d
 8005ba4:	08005b3d 	.word	0x08005b3d
 8005ba8:	08005cb9 	.word	0x08005cb9
 8005bac:	682b      	ldr	r3, [r5, #0]
 8005bae:	1d1a      	adds	r2, r3, #4
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	602a      	str	r2, [r5, #0]
 8005bb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e0a4      	b.n	8005d0a <_printf_i+0x1f6>
 8005bc0:	6820      	ldr	r0, [r4, #0]
 8005bc2:	6829      	ldr	r1, [r5, #0]
 8005bc4:	0606      	lsls	r6, r0, #24
 8005bc6:	f101 0304 	add.w	r3, r1, #4
 8005bca:	d50a      	bpl.n	8005be2 <_printf_i+0xce>
 8005bcc:	680e      	ldr	r6, [r1, #0]
 8005bce:	602b      	str	r3, [r5, #0]
 8005bd0:	2e00      	cmp	r6, #0
 8005bd2:	da03      	bge.n	8005bdc <_printf_i+0xc8>
 8005bd4:	232d      	movs	r3, #45	; 0x2d
 8005bd6:	4276      	negs	r6, r6
 8005bd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bdc:	230a      	movs	r3, #10
 8005bde:	485e      	ldr	r0, [pc, #376]	; (8005d58 <_printf_i+0x244>)
 8005be0:	e019      	b.n	8005c16 <_printf_i+0x102>
 8005be2:	680e      	ldr	r6, [r1, #0]
 8005be4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005be8:	602b      	str	r3, [r5, #0]
 8005bea:	bf18      	it	ne
 8005bec:	b236      	sxthne	r6, r6
 8005bee:	e7ef      	b.n	8005bd0 <_printf_i+0xbc>
 8005bf0:	682b      	ldr	r3, [r5, #0]
 8005bf2:	6820      	ldr	r0, [r4, #0]
 8005bf4:	1d19      	adds	r1, r3, #4
 8005bf6:	6029      	str	r1, [r5, #0]
 8005bf8:	0601      	lsls	r1, r0, #24
 8005bfa:	d501      	bpl.n	8005c00 <_printf_i+0xec>
 8005bfc:	681e      	ldr	r6, [r3, #0]
 8005bfe:	e002      	b.n	8005c06 <_printf_i+0xf2>
 8005c00:	0646      	lsls	r6, r0, #25
 8005c02:	d5fb      	bpl.n	8005bfc <_printf_i+0xe8>
 8005c04:	881e      	ldrh	r6, [r3, #0]
 8005c06:	2f6f      	cmp	r7, #111	; 0x6f
 8005c08:	bf0c      	ite	eq
 8005c0a:	2308      	moveq	r3, #8
 8005c0c:	230a      	movne	r3, #10
 8005c0e:	4852      	ldr	r0, [pc, #328]	; (8005d58 <_printf_i+0x244>)
 8005c10:	2100      	movs	r1, #0
 8005c12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c16:	6865      	ldr	r5, [r4, #4]
 8005c18:	2d00      	cmp	r5, #0
 8005c1a:	bfa8      	it	ge
 8005c1c:	6821      	ldrge	r1, [r4, #0]
 8005c1e:	60a5      	str	r5, [r4, #8]
 8005c20:	bfa4      	itt	ge
 8005c22:	f021 0104 	bicge.w	r1, r1, #4
 8005c26:	6021      	strge	r1, [r4, #0]
 8005c28:	b90e      	cbnz	r6, 8005c2e <_printf_i+0x11a>
 8005c2a:	2d00      	cmp	r5, #0
 8005c2c:	d04d      	beq.n	8005cca <_printf_i+0x1b6>
 8005c2e:	4615      	mov	r5, r2
 8005c30:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c34:	fb03 6711 	mls	r7, r3, r1, r6
 8005c38:	5dc7      	ldrb	r7, [r0, r7]
 8005c3a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c3e:	4637      	mov	r7, r6
 8005c40:	42bb      	cmp	r3, r7
 8005c42:	460e      	mov	r6, r1
 8005c44:	d9f4      	bls.n	8005c30 <_printf_i+0x11c>
 8005c46:	2b08      	cmp	r3, #8
 8005c48:	d10b      	bne.n	8005c62 <_printf_i+0x14e>
 8005c4a:	6823      	ldr	r3, [r4, #0]
 8005c4c:	07de      	lsls	r6, r3, #31
 8005c4e:	d508      	bpl.n	8005c62 <_printf_i+0x14e>
 8005c50:	6923      	ldr	r3, [r4, #16]
 8005c52:	6861      	ldr	r1, [r4, #4]
 8005c54:	4299      	cmp	r1, r3
 8005c56:	bfde      	ittt	le
 8005c58:	2330      	movle	r3, #48	; 0x30
 8005c5a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c5e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c62:	1b52      	subs	r2, r2, r5
 8005c64:	6122      	str	r2, [r4, #16]
 8005c66:	464b      	mov	r3, r9
 8005c68:	4621      	mov	r1, r4
 8005c6a:	4640      	mov	r0, r8
 8005c6c:	f8cd a000 	str.w	sl, [sp]
 8005c70:	aa03      	add	r2, sp, #12
 8005c72:	f7ff fedf 	bl	8005a34 <_printf_common>
 8005c76:	3001      	adds	r0, #1
 8005c78:	d14c      	bne.n	8005d14 <_printf_i+0x200>
 8005c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c7e:	b004      	add	sp, #16
 8005c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c84:	4834      	ldr	r0, [pc, #208]	; (8005d58 <_printf_i+0x244>)
 8005c86:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005c8a:	6829      	ldr	r1, [r5, #0]
 8005c8c:	6823      	ldr	r3, [r4, #0]
 8005c8e:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c92:	6029      	str	r1, [r5, #0]
 8005c94:	061d      	lsls	r5, r3, #24
 8005c96:	d514      	bpl.n	8005cc2 <_printf_i+0x1ae>
 8005c98:	07df      	lsls	r7, r3, #31
 8005c9a:	bf44      	itt	mi
 8005c9c:	f043 0320 	orrmi.w	r3, r3, #32
 8005ca0:	6023      	strmi	r3, [r4, #0]
 8005ca2:	b91e      	cbnz	r6, 8005cac <_printf_i+0x198>
 8005ca4:	6823      	ldr	r3, [r4, #0]
 8005ca6:	f023 0320 	bic.w	r3, r3, #32
 8005caa:	6023      	str	r3, [r4, #0]
 8005cac:	2310      	movs	r3, #16
 8005cae:	e7af      	b.n	8005c10 <_printf_i+0xfc>
 8005cb0:	6823      	ldr	r3, [r4, #0]
 8005cb2:	f043 0320 	orr.w	r3, r3, #32
 8005cb6:	6023      	str	r3, [r4, #0]
 8005cb8:	2378      	movs	r3, #120	; 0x78
 8005cba:	4828      	ldr	r0, [pc, #160]	; (8005d5c <_printf_i+0x248>)
 8005cbc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005cc0:	e7e3      	b.n	8005c8a <_printf_i+0x176>
 8005cc2:	0659      	lsls	r1, r3, #25
 8005cc4:	bf48      	it	mi
 8005cc6:	b2b6      	uxthmi	r6, r6
 8005cc8:	e7e6      	b.n	8005c98 <_printf_i+0x184>
 8005cca:	4615      	mov	r5, r2
 8005ccc:	e7bb      	b.n	8005c46 <_printf_i+0x132>
 8005cce:	682b      	ldr	r3, [r5, #0]
 8005cd0:	6826      	ldr	r6, [r4, #0]
 8005cd2:	1d18      	adds	r0, r3, #4
 8005cd4:	6961      	ldr	r1, [r4, #20]
 8005cd6:	6028      	str	r0, [r5, #0]
 8005cd8:	0635      	lsls	r5, r6, #24
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	d501      	bpl.n	8005ce2 <_printf_i+0x1ce>
 8005cde:	6019      	str	r1, [r3, #0]
 8005ce0:	e002      	b.n	8005ce8 <_printf_i+0x1d4>
 8005ce2:	0670      	lsls	r0, r6, #25
 8005ce4:	d5fb      	bpl.n	8005cde <_printf_i+0x1ca>
 8005ce6:	8019      	strh	r1, [r3, #0]
 8005ce8:	2300      	movs	r3, #0
 8005cea:	4615      	mov	r5, r2
 8005cec:	6123      	str	r3, [r4, #16]
 8005cee:	e7ba      	b.n	8005c66 <_printf_i+0x152>
 8005cf0:	682b      	ldr	r3, [r5, #0]
 8005cf2:	2100      	movs	r1, #0
 8005cf4:	1d1a      	adds	r2, r3, #4
 8005cf6:	602a      	str	r2, [r5, #0]
 8005cf8:	681d      	ldr	r5, [r3, #0]
 8005cfa:	6862      	ldr	r2, [r4, #4]
 8005cfc:	4628      	mov	r0, r5
 8005cfe:	f000 f82f 	bl	8005d60 <memchr>
 8005d02:	b108      	cbz	r0, 8005d08 <_printf_i+0x1f4>
 8005d04:	1b40      	subs	r0, r0, r5
 8005d06:	6060      	str	r0, [r4, #4]
 8005d08:	6863      	ldr	r3, [r4, #4]
 8005d0a:	6123      	str	r3, [r4, #16]
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d12:	e7a8      	b.n	8005c66 <_printf_i+0x152>
 8005d14:	462a      	mov	r2, r5
 8005d16:	4649      	mov	r1, r9
 8005d18:	4640      	mov	r0, r8
 8005d1a:	6923      	ldr	r3, [r4, #16]
 8005d1c:	47d0      	blx	sl
 8005d1e:	3001      	adds	r0, #1
 8005d20:	d0ab      	beq.n	8005c7a <_printf_i+0x166>
 8005d22:	6823      	ldr	r3, [r4, #0]
 8005d24:	079b      	lsls	r3, r3, #30
 8005d26:	d413      	bmi.n	8005d50 <_printf_i+0x23c>
 8005d28:	68e0      	ldr	r0, [r4, #12]
 8005d2a:	9b03      	ldr	r3, [sp, #12]
 8005d2c:	4298      	cmp	r0, r3
 8005d2e:	bfb8      	it	lt
 8005d30:	4618      	movlt	r0, r3
 8005d32:	e7a4      	b.n	8005c7e <_printf_i+0x16a>
 8005d34:	2301      	movs	r3, #1
 8005d36:	4632      	mov	r2, r6
 8005d38:	4649      	mov	r1, r9
 8005d3a:	4640      	mov	r0, r8
 8005d3c:	47d0      	blx	sl
 8005d3e:	3001      	adds	r0, #1
 8005d40:	d09b      	beq.n	8005c7a <_printf_i+0x166>
 8005d42:	3501      	adds	r5, #1
 8005d44:	68e3      	ldr	r3, [r4, #12]
 8005d46:	9903      	ldr	r1, [sp, #12]
 8005d48:	1a5b      	subs	r3, r3, r1
 8005d4a:	42ab      	cmp	r3, r5
 8005d4c:	dcf2      	bgt.n	8005d34 <_printf_i+0x220>
 8005d4e:	e7eb      	b.n	8005d28 <_printf_i+0x214>
 8005d50:	2500      	movs	r5, #0
 8005d52:	f104 0619 	add.w	r6, r4, #25
 8005d56:	e7f5      	b.n	8005d44 <_printf_i+0x230>
 8005d58:	080061b1 	.word	0x080061b1
 8005d5c:	080061c2 	.word	0x080061c2

08005d60 <memchr>:
 8005d60:	4603      	mov	r3, r0
 8005d62:	b510      	push	{r4, lr}
 8005d64:	b2c9      	uxtb	r1, r1
 8005d66:	4402      	add	r2, r0
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	d101      	bne.n	8005d72 <memchr+0x12>
 8005d6e:	2000      	movs	r0, #0
 8005d70:	e003      	b.n	8005d7a <memchr+0x1a>
 8005d72:	7804      	ldrb	r4, [r0, #0]
 8005d74:	3301      	adds	r3, #1
 8005d76:	428c      	cmp	r4, r1
 8005d78:	d1f6      	bne.n	8005d68 <memchr+0x8>
 8005d7a:	bd10      	pop	{r4, pc}

08005d7c <memmove>:
 8005d7c:	4288      	cmp	r0, r1
 8005d7e:	b510      	push	{r4, lr}
 8005d80:	eb01 0402 	add.w	r4, r1, r2
 8005d84:	d902      	bls.n	8005d8c <memmove+0x10>
 8005d86:	4284      	cmp	r4, r0
 8005d88:	4623      	mov	r3, r4
 8005d8a:	d807      	bhi.n	8005d9c <memmove+0x20>
 8005d8c:	1e43      	subs	r3, r0, #1
 8005d8e:	42a1      	cmp	r1, r4
 8005d90:	d008      	beq.n	8005da4 <memmove+0x28>
 8005d92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d9a:	e7f8      	b.n	8005d8e <memmove+0x12>
 8005d9c:	4601      	mov	r1, r0
 8005d9e:	4402      	add	r2, r0
 8005da0:	428a      	cmp	r2, r1
 8005da2:	d100      	bne.n	8005da6 <memmove+0x2a>
 8005da4:	bd10      	pop	{r4, pc}
 8005da6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005daa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005dae:	e7f7      	b.n	8005da0 <memmove+0x24>

08005db0 <_free_r>:
 8005db0:	b538      	push	{r3, r4, r5, lr}
 8005db2:	4605      	mov	r5, r0
 8005db4:	2900      	cmp	r1, #0
 8005db6:	d040      	beq.n	8005e3a <_free_r+0x8a>
 8005db8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dbc:	1f0c      	subs	r4, r1, #4
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	bfb8      	it	lt
 8005dc2:	18e4      	addlt	r4, r4, r3
 8005dc4:	f000 f910 	bl	8005fe8 <__malloc_lock>
 8005dc8:	4a1c      	ldr	r2, [pc, #112]	; (8005e3c <_free_r+0x8c>)
 8005dca:	6813      	ldr	r3, [r2, #0]
 8005dcc:	b933      	cbnz	r3, 8005ddc <_free_r+0x2c>
 8005dce:	6063      	str	r3, [r4, #4]
 8005dd0:	6014      	str	r4, [r2, #0]
 8005dd2:	4628      	mov	r0, r5
 8005dd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005dd8:	f000 b90c 	b.w	8005ff4 <__malloc_unlock>
 8005ddc:	42a3      	cmp	r3, r4
 8005dde:	d908      	bls.n	8005df2 <_free_r+0x42>
 8005de0:	6820      	ldr	r0, [r4, #0]
 8005de2:	1821      	adds	r1, r4, r0
 8005de4:	428b      	cmp	r3, r1
 8005de6:	bf01      	itttt	eq
 8005de8:	6819      	ldreq	r1, [r3, #0]
 8005dea:	685b      	ldreq	r3, [r3, #4]
 8005dec:	1809      	addeq	r1, r1, r0
 8005dee:	6021      	streq	r1, [r4, #0]
 8005df0:	e7ed      	b.n	8005dce <_free_r+0x1e>
 8005df2:	461a      	mov	r2, r3
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	b10b      	cbz	r3, 8005dfc <_free_r+0x4c>
 8005df8:	42a3      	cmp	r3, r4
 8005dfa:	d9fa      	bls.n	8005df2 <_free_r+0x42>
 8005dfc:	6811      	ldr	r1, [r2, #0]
 8005dfe:	1850      	adds	r0, r2, r1
 8005e00:	42a0      	cmp	r0, r4
 8005e02:	d10b      	bne.n	8005e1c <_free_r+0x6c>
 8005e04:	6820      	ldr	r0, [r4, #0]
 8005e06:	4401      	add	r1, r0
 8005e08:	1850      	adds	r0, r2, r1
 8005e0a:	4283      	cmp	r3, r0
 8005e0c:	6011      	str	r1, [r2, #0]
 8005e0e:	d1e0      	bne.n	8005dd2 <_free_r+0x22>
 8005e10:	6818      	ldr	r0, [r3, #0]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	4401      	add	r1, r0
 8005e16:	6011      	str	r1, [r2, #0]
 8005e18:	6053      	str	r3, [r2, #4]
 8005e1a:	e7da      	b.n	8005dd2 <_free_r+0x22>
 8005e1c:	d902      	bls.n	8005e24 <_free_r+0x74>
 8005e1e:	230c      	movs	r3, #12
 8005e20:	602b      	str	r3, [r5, #0]
 8005e22:	e7d6      	b.n	8005dd2 <_free_r+0x22>
 8005e24:	6820      	ldr	r0, [r4, #0]
 8005e26:	1821      	adds	r1, r4, r0
 8005e28:	428b      	cmp	r3, r1
 8005e2a:	bf01      	itttt	eq
 8005e2c:	6819      	ldreq	r1, [r3, #0]
 8005e2e:	685b      	ldreq	r3, [r3, #4]
 8005e30:	1809      	addeq	r1, r1, r0
 8005e32:	6021      	streq	r1, [r4, #0]
 8005e34:	6063      	str	r3, [r4, #4]
 8005e36:	6054      	str	r4, [r2, #4]
 8005e38:	e7cb      	b.n	8005dd2 <_free_r+0x22>
 8005e3a:	bd38      	pop	{r3, r4, r5, pc}
 8005e3c:	20001a60 	.word	0x20001a60

08005e40 <sbrk_aligned>:
 8005e40:	b570      	push	{r4, r5, r6, lr}
 8005e42:	4e0e      	ldr	r6, [pc, #56]	; (8005e7c <sbrk_aligned+0x3c>)
 8005e44:	460c      	mov	r4, r1
 8005e46:	6831      	ldr	r1, [r6, #0]
 8005e48:	4605      	mov	r5, r0
 8005e4a:	b911      	cbnz	r1, 8005e52 <sbrk_aligned+0x12>
 8005e4c:	f000 f8bc 	bl	8005fc8 <_sbrk_r>
 8005e50:	6030      	str	r0, [r6, #0]
 8005e52:	4621      	mov	r1, r4
 8005e54:	4628      	mov	r0, r5
 8005e56:	f000 f8b7 	bl	8005fc8 <_sbrk_r>
 8005e5a:	1c43      	adds	r3, r0, #1
 8005e5c:	d00a      	beq.n	8005e74 <sbrk_aligned+0x34>
 8005e5e:	1cc4      	adds	r4, r0, #3
 8005e60:	f024 0403 	bic.w	r4, r4, #3
 8005e64:	42a0      	cmp	r0, r4
 8005e66:	d007      	beq.n	8005e78 <sbrk_aligned+0x38>
 8005e68:	1a21      	subs	r1, r4, r0
 8005e6a:	4628      	mov	r0, r5
 8005e6c:	f000 f8ac 	bl	8005fc8 <_sbrk_r>
 8005e70:	3001      	adds	r0, #1
 8005e72:	d101      	bne.n	8005e78 <sbrk_aligned+0x38>
 8005e74:	f04f 34ff 	mov.w	r4, #4294967295
 8005e78:	4620      	mov	r0, r4
 8005e7a:	bd70      	pop	{r4, r5, r6, pc}
 8005e7c:	20001a64 	.word	0x20001a64

08005e80 <_malloc_r>:
 8005e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e84:	1ccd      	adds	r5, r1, #3
 8005e86:	f025 0503 	bic.w	r5, r5, #3
 8005e8a:	3508      	adds	r5, #8
 8005e8c:	2d0c      	cmp	r5, #12
 8005e8e:	bf38      	it	cc
 8005e90:	250c      	movcc	r5, #12
 8005e92:	2d00      	cmp	r5, #0
 8005e94:	4607      	mov	r7, r0
 8005e96:	db01      	blt.n	8005e9c <_malloc_r+0x1c>
 8005e98:	42a9      	cmp	r1, r5
 8005e9a:	d905      	bls.n	8005ea8 <_malloc_r+0x28>
 8005e9c:	230c      	movs	r3, #12
 8005e9e:	2600      	movs	r6, #0
 8005ea0:	603b      	str	r3, [r7, #0]
 8005ea2:	4630      	mov	r0, r6
 8005ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ea8:	4e2e      	ldr	r6, [pc, #184]	; (8005f64 <_malloc_r+0xe4>)
 8005eaa:	f000 f89d 	bl	8005fe8 <__malloc_lock>
 8005eae:	6833      	ldr	r3, [r6, #0]
 8005eb0:	461c      	mov	r4, r3
 8005eb2:	bb34      	cbnz	r4, 8005f02 <_malloc_r+0x82>
 8005eb4:	4629      	mov	r1, r5
 8005eb6:	4638      	mov	r0, r7
 8005eb8:	f7ff ffc2 	bl	8005e40 <sbrk_aligned>
 8005ebc:	1c43      	adds	r3, r0, #1
 8005ebe:	4604      	mov	r4, r0
 8005ec0:	d14d      	bne.n	8005f5e <_malloc_r+0xde>
 8005ec2:	6834      	ldr	r4, [r6, #0]
 8005ec4:	4626      	mov	r6, r4
 8005ec6:	2e00      	cmp	r6, #0
 8005ec8:	d140      	bne.n	8005f4c <_malloc_r+0xcc>
 8005eca:	6823      	ldr	r3, [r4, #0]
 8005ecc:	4631      	mov	r1, r6
 8005ece:	4638      	mov	r0, r7
 8005ed0:	eb04 0803 	add.w	r8, r4, r3
 8005ed4:	f000 f878 	bl	8005fc8 <_sbrk_r>
 8005ed8:	4580      	cmp	r8, r0
 8005eda:	d13a      	bne.n	8005f52 <_malloc_r+0xd2>
 8005edc:	6821      	ldr	r1, [r4, #0]
 8005ede:	3503      	adds	r5, #3
 8005ee0:	1a6d      	subs	r5, r5, r1
 8005ee2:	f025 0503 	bic.w	r5, r5, #3
 8005ee6:	3508      	adds	r5, #8
 8005ee8:	2d0c      	cmp	r5, #12
 8005eea:	bf38      	it	cc
 8005eec:	250c      	movcc	r5, #12
 8005eee:	4638      	mov	r0, r7
 8005ef0:	4629      	mov	r1, r5
 8005ef2:	f7ff ffa5 	bl	8005e40 <sbrk_aligned>
 8005ef6:	3001      	adds	r0, #1
 8005ef8:	d02b      	beq.n	8005f52 <_malloc_r+0xd2>
 8005efa:	6823      	ldr	r3, [r4, #0]
 8005efc:	442b      	add	r3, r5
 8005efe:	6023      	str	r3, [r4, #0]
 8005f00:	e00e      	b.n	8005f20 <_malloc_r+0xa0>
 8005f02:	6822      	ldr	r2, [r4, #0]
 8005f04:	1b52      	subs	r2, r2, r5
 8005f06:	d41e      	bmi.n	8005f46 <_malloc_r+0xc6>
 8005f08:	2a0b      	cmp	r2, #11
 8005f0a:	d916      	bls.n	8005f3a <_malloc_r+0xba>
 8005f0c:	1961      	adds	r1, r4, r5
 8005f0e:	42a3      	cmp	r3, r4
 8005f10:	6025      	str	r5, [r4, #0]
 8005f12:	bf18      	it	ne
 8005f14:	6059      	strne	r1, [r3, #4]
 8005f16:	6863      	ldr	r3, [r4, #4]
 8005f18:	bf08      	it	eq
 8005f1a:	6031      	streq	r1, [r6, #0]
 8005f1c:	5162      	str	r2, [r4, r5]
 8005f1e:	604b      	str	r3, [r1, #4]
 8005f20:	4638      	mov	r0, r7
 8005f22:	f104 060b 	add.w	r6, r4, #11
 8005f26:	f000 f865 	bl	8005ff4 <__malloc_unlock>
 8005f2a:	f026 0607 	bic.w	r6, r6, #7
 8005f2e:	1d23      	adds	r3, r4, #4
 8005f30:	1af2      	subs	r2, r6, r3
 8005f32:	d0b6      	beq.n	8005ea2 <_malloc_r+0x22>
 8005f34:	1b9b      	subs	r3, r3, r6
 8005f36:	50a3      	str	r3, [r4, r2]
 8005f38:	e7b3      	b.n	8005ea2 <_malloc_r+0x22>
 8005f3a:	6862      	ldr	r2, [r4, #4]
 8005f3c:	42a3      	cmp	r3, r4
 8005f3e:	bf0c      	ite	eq
 8005f40:	6032      	streq	r2, [r6, #0]
 8005f42:	605a      	strne	r2, [r3, #4]
 8005f44:	e7ec      	b.n	8005f20 <_malloc_r+0xa0>
 8005f46:	4623      	mov	r3, r4
 8005f48:	6864      	ldr	r4, [r4, #4]
 8005f4a:	e7b2      	b.n	8005eb2 <_malloc_r+0x32>
 8005f4c:	4634      	mov	r4, r6
 8005f4e:	6876      	ldr	r6, [r6, #4]
 8005f50:	e7b9      	b.n	8005ec6 <_malloc_r+0x46>
 8005f52:	230c      	movs	r3, #12
 8005f54:	4638      	mov	r0, r7
 8005f56:	603b      	str	r3, [r7, #0]
 8005f58:	f000 f84c 	bl	8005ff4 <__malloc_unlock>
 8005f5c:	e7a1      	b.n	8005ea2 <_malloc_r+0x22>
 8005f5e:	6025      	str	r5, [r4, #0]
 8005f60:	e7de      	b.n	8005f20 <_malloc_r+0xa0>
 8005f62:	bf00      	nop
 8005f64:	20001a60 	.word	0x20001a60

08005f68 <_realloc_r>:
 8005f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f6c:	4680      	mov	r8, r0
 8005f6e:	4614      	mov	r4, r2
 8005f70:	460e      	mov	r6, r1
 8005f72:	b921      	cbnz	r1, 8005f7e <_realloc_r+0x16>
 8005f74:	4611      	mov	r1, r2
 8005f76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f7a:	f7ff bf81 	b.w	8005e80 <_malloc_r>
 8005f7e:	b92a      	cbnz	r2, 8005f8c <_realloc_r+0x24>
 8005f80:	f7ff ff16 	bl	8005db0 <_free_r>
 8005f84:	4625      	mov	r5, r4
 8005f86:	4628      	mov	r0, r5
 8005f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f8c:	f000 f838 	bl	8006000 <_malloc_usable_size_r>
 8005f90:	4284      	cmp	r4, r0
 8005f92:	4607      	mov	r7, r0
 8005f94:	d802      	bhi.n	8005f9c <_realloc_r+0x34>
 8005f96:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005f9a:	d812      	bhi.n	8005fc2 <_realloc_r+0x5a>
 8005f9c:	4621      	mov	r1, r4
 8005f9e:	4640      	mov	r0, r8
 8005fa0:	f7ff ff6e 	bl	8005e80 <_malloc_r>
 8005fa4:	4605      	mov	r5, r0
 8005fa6:	2800      	cmp	r0, #0
 8005fa8:	d0ed      	beq.n	8005f86 <_realloc_r+0x1e>
 8005faa:	42bc      	cmp	r4, r7
 8005fac:	4622      	mov	r2, r4
 8005fae:	4631      	mov	r1, r6
 8005fb0:	bf28      	it	cs
 8005fb2:	463a      	movcs	r2, r7
 8005fb4:	f7ff fbac 	bl	8005710 <memcpy>
 8005fb8:	4631      	mov	r1, r6
 8005fba:	4640      	mov	r0, r8
 8005fbc:	f7ff fef8 	bl	8005db0 <_free_r>
 8005fc0:	e7e1      	b.n	8005f86 <_realloc_r+0x1e>
 8005fc2:	4635      	mov	r5, r6
 8005fc4:	e7df      	b.n	8005f86 <_realloc_r+0x1e>
	...

08005fc8 <_sbrk_r>:
 8005fc8:	b538      	push	{r3, r4, r5, lr}
 8005fca:	2300      	movs	r3, #0
 8005fcc:	4d05      	ldr	r5, [pc, #20]	; (8005fe4 <_sbrk_r+0x1c>)
 8005fce:	4604      	mov	r4, r0
 8005fd0:	4608      	mov	r0, r1
 8005fd2:	602b      	str	r3, [r5, #0]
 8005fd4:	f7fa fd44 	bl	8000a60 <_sbrk>
 8005fd8:	1c43      	adds	r3, r0, #1
 8005fda:	d102      	bne.n	8005fe2 <_sbrk_r+0x1a>
 8005fdc:	682b      	ldr	r3, [r5, #0]
 8005fde:	b103      	cbz	r3, 8005fe2 <_sbrk_r+0x1a>
 8005fe0:	6023      	str	r3, [r4, #0]
 8005fe2:	bd38      	pop	{r3, r4, r5, pc}
 8005fe4:	20001a68 	.word	0x20001a68

08005fe8 <__malloc_lock>:
 8005fe8:	4801      	ldr	r0, [pc, #4]	; (8005ff0 <__malloc_lock+0x8>)
 8005fea:	f000 b811 	b.w	8006010 <__retarget_lock_acquire_recursive>
 8005fee:	bf00      	nop
 8005ff0:	20001a6c 	.word	0x20001a6c

08005ff4 <__malloc_unlock>:
 8005ff4:	4801      	ldr	r0, [pc, #4]	; (8005ffc <__malloc_unlock+0x8>)
 8005ff6:	f000 b80c 	b.w	8006012 <__retarget_lock_release_recursive>
 8005ffa:	bf00      	nop
 8005ffc:	20001a6c 	.word	0x20001a6c

08006000 <_malloc_usable_size_r>:
 8006000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006004:	1f18      	subs	r0, r3, #4
 8006006:	2b00      	cmp	r3, #0
 8006008:	bfbc      	itt	lt
 800600a:	580b      	ldrlt	r3, [r1, r0]
 800600c:	18c0      	addlt	r0, r0, r3
 800600e:	4770      	bx	lr

08006010 <__retarget_lock_acquire_recursive>:
 8006010:	4770      	bx	lr

08006012 <__retarget_lock_release_recursive>:
 8006012:	4770      	bx	lr

08006014 <_init>:
 8006014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006016:	bf00      	nop
 8006018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800601a:	bc08      	pop	{r3}
 800601c:	469e      	mov	lr, r3
 800601e:	4770      	bx	lr

08006020 <_fini>:
 8006020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006022:	bf00      	nop
 8006024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006026:	bc08      	pop	{r3}
 8006028:	469e      	mov	lr, r3
 800602a:	4770      	bx	lr
