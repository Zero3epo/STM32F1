
pon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b30  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08004c40  08004c40  00014c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d2c  08004d2c  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08004d2c  08004d2c  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d2c  08004d2c  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d2c  08004d2c  00014d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d30  08004d30  00014d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08004d34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019c8  20000020  08004d54  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200019e8  08004d54  000219e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010be0  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002922  00000000  00000000  00030c29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef0  00000000  00000000  00033550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e00  00000000  00000000  00034440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003271  00000000  00000000  00035240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b5b  00000000  00000000  000384b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c437  00000000  00000000  0004900c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d5443  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003db0  00000000  00000000  000d5494  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000020 	.word	0x20000020
 800012c:	00000000 	.word	0x00000000
 8000130:	08004c28 	.word	0x08004c28

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000024 	.word	0x20000024
 800014c:	08004c28 	.word	0x08004c28

08000150 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
 8000156:	4603      	mov	r3, r0
 8000158:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 800015a:	4a38      	ldr	r2, [pc, #224]	; (800023c <HD44780_Init+0xec>)
 800015c:	79fb      	ldrb	r3, [r7, #7]
 800015e:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000160:	4b37      	ldr	r3, [pc, #220]	; (8000240 <HD44780_Init+0xf0>)
 8000162:	2208      	movs	r2, #8
 8000164:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000166:	4b37      	ldr	r3, [pc, #220]	; (8000244 <HD44780_Init+0xf4>)
 8000168:	2200      	movs	r2, #0
 800016a:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 800016c:	4b33      	ldr	r3, [pc, #204]	; (800023c <HD44780_Init+0xec>)
 800016e:	781b      	ldrb	r3, [r3, #0]
 8000170:	2b01      	cmp	r3, #1
 8000172:	d907      	bls.n	8000184 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000174:	4b33      	ldr	r3, [pc, #204]	; (8000244 <HD44780_Init+0xf4>)
 8000176:	781b      	ldrb	r3, [r3, #0]
 8000178:	f043 0308 	orr.w	r3, r3, #8
 800017c:	b2da      	uxtb	r2, r3
 800017e:	4b31      	ldr	r3, [pc, #196]	; (8000244 <HD44780_Init+0xf4>)
 8000180:	701a      	strb	r2, [r3, #0]
 8000182:	e006      	b.n	8000192 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000184:	4b2f      	ldr	r3, [pc, #188]	; (8000244 <HD44780_Init+0xf4>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	f043 0304 	orr.w	r3, r3, #4
 800018c:	b2da      	uxtb	r2, r3
 800018e:	4b2d      	ldr	r3, [pc, #180]	; (8000244 <HD44780_Init+0xf4>)
 8000190:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000192:	f000 fa13 	bl	80005bc <DelayInit>
  HAL_Delay(50);
 8000196:	2032      	movs	r0, #50	; 0x32
 8000198:	f000 fd30 	bl	8000bfc <HAL_Delay>

  ExpanderWrite(dpBacklight);
 800019c:	4b28      	ldr	r3, [pc, #160]	; (8000240 <HD44780_Init+0xf0>)
 800019e:	781b      	ldrb	r3, [r3, #0]
 80001a0:	4618      	mov	r0, r3
 80001a2:	f000 f9d1 	bl	8000548 <ExpanderWrite>
  HAL_Delay(1000);
 80001a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001aa:	f000 fd27 	bl	8000bfc <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80001ae:	2030      	movs	r0, #48	; 0x30
 80001b0:	f000 f9b9 	bl	8000526 <Write4Bits>
  DelayUS(4500);
 80001b4:	f241 1094 	movw	r0, #4500	; 0x1194
 80001b8:	f000 fa28 	bl	800060c <DelayUS>

  Write4Bits(0x03 << 4);
 80001bc:	2030      	movs	r0, #48	; 0x30
 80001be:	f000 f9b2 	bl	8000526 <Write4Bits>
  DelayUS(4500);
 80001c2:	f241 1094 	movw	r0, #4500	; 0x1194
 80001c6:	f000 fa21 	bl	800060c <DelayUS>

  Write4Bits(0x03 << 4);
 80001ca:	2030      	movs	r0, #48	; 0x30
 80001cc:	f000 f9ab 	bl	8000526 <Write4Bits>
  DelayUS(4500);
 80001d0:	f241 1094 	movw	r0, #4500	; 0x1194
 80001d4:	f000 fa1a 	bl	800060c <DelayUS>

  Write4Bits(0x02 << 4);
 80001d8:	2020      	movs	r0, #32
 80001da:	f000 f9a4 	bl	8000526 <Write4Bits>
  DelayUS(100);
 80001de:	2064      	movs	r0, #100	; 0x64
 80001e0:	f000 fa14 	bl	800060c <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 80001e4:	4b17      	ldr	r3, [pc, #92]	; (8000244 <HD44780_Init+0xf4>)
 80001e6:	781b      	ldrb	r3, [r3, #0]
 80001e8:	f043 0320 	orr.w	r3, r3, #32
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	4618      	mov	r0, r3
 80001f0:	f000 f95c 	bl	80004ac <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80001f4:	4b14      	ldr	r3, [pc, #80]	; (8000248 <HD44780_Init+0xf8>)
 80001f6:	2204      	movs	r2, #4
 80001f8:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80001fa:	f000 f88b 	bl	8000314 <HD44780_Display>
  HD44780_Clear();
 80001fe:	f000 f82b 	bl	8000258 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000202:	4b12      	ldr	r3, [pc, #72]	; (800024c <HD44780_Init+0xfc>)
 8000204:	2202      	movs	r2, #2
 8000206:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000208:	4b10      	ldr	r3, [pc, #64]	; (800024c <HD44780_Init+0xfc>)
 800020a:	781b      	ldrb	r3, [r3, #0]
 800020c:	f043 0304 	orr.w	r3, r3, #4
 8000210:	b2db      	uxtb	r3, r3
 8000212:	4618      	mov	r0, r3
 8000214:	f000 f94a 	bl	80004ac <SendCommand>
  DelayUS(4500);
 8000218:	f241 1094 	movw	r0, #4500	; 0x1194
 800021c:	f000 f9f6 	bl	800060c <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000220:	490b      	ldr	r1, [pc, #44]	; (8000250 <HD44780_Init+0x100>)
 8000222:	2000      	movs	r0, #0
 8000224:	f000 f8eb 	bl	80003fe <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000228:	490a      	ldr	r1, [pc, #40]	; (8000254 <HD44780_Init+0x104>)
 800022a:	2001      	movs	r0, #1
 800022c:	f000 f8e7 	bl	80003fe <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000230:	f000 f81d 	bl	800026e <HD44780_Home>
}
 8000234:	bf00      	nop
 8000236:	3708      	adds	r7, #8
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}
 800023c:	2000003f 	.word	0x2000003f
 8000240:	20000040 	.word	0x20000040
 8000244:	2000003c 	.word	0x2000003c
 8000248:	2000003d 	.word	0x2000003d
 800024c:	2000003e 	.word	0x2000003e
 8000250:	20000000 	.word	0x20000000
 8000254:	20000008 	.word	0x20000008

08000258 <HD44780_Clear>:

void HD44780_Clear()
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 800025c:	2001      	movs	r0, #1
 800025e:	f000 f925 	bl	80004ac <SendCommand>
  DelayUS(2000);
 8000262:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000266:	f000 f9d1 	bl	800060c <DelayUS>
}
 800026a:	bf00      	nop
 800026c:	bd80      	pop	{r7, pc}

0800026e <HD44780_Home>:

void HD44780_Home()
{
 800026e:	b580      	push	{r7, lr}
 8000270:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000272:	2002      	movs	r0, #2
 8000274:	f000 f91a 	bl	80004ac <SendCommand>
  DelayUS(2000);
 8000278:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800027c:	f000 f9c6 	bl	800060c <DelayUS>
}
 8000280:	bf00      	nop
 8000282:	bd80      	pop	{r7, pc}

08000284 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000284:	b590      	push	{r4, r7, lr}
 8000286:	b087      	sub	sp, #28
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	460a      	mov	r2, r1
 800028e:	71fb      	strb	r3, [r7, #7]
 8000290:	4613      	mov	r3, r2
 8000292:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000294:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <HD44780_SetCursor+0x5c>)
 8000296:	f107 0408 	add.w	r4, r7, #8
 800029a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800029c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80002a0:	4b10      	ldr	r3, [pc, #64]	; (80002e4 <HD44780_SetCursor+0x60>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	79ba      	ldrb	r2, [r7, #6]
 80002a6:	429a      	cmp	r2, r3
 80002a8:	d303      	bcc.n	80002b2 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80002aa:	4b0e      	ldr	r3, [pc, #56]	; (80002e4 <HD44780_SetCursor+0x60>)
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	3b01      	subs	r3, #1
 80002b0:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80002b2:	79bb      	ldrb	r3, [r7, #6]
 80002b4:	009b      	lsls	r3, r3, #2
 80002b6:	3318      	adds	r3, #24
 80002b8:	443b      	add	r3, r7
 80002ba:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80002be:	b2da      	uxtb	r2, r3
 80002c0:	79fb      	ldrb	r3, [r7, #7]
 80002c2:	4413      	add	r3, r2
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	b25b      	sxtb	r3, r3
 80002c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80002cc:	b25b      	sxtb	r3, r3
 80002ce:	b2db      	uxtb	r3, r3
 80002d0:	4618      	mov	r0, r3
 80002d2:	f000 f8eb 	bl	80004ac <SendCommand>
}
 80002d6:	bf00      	nop
 80002d8:	371c      	adds	r7, #28
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd90      	pop	{r4, r7, pc}
 80002de:	bf00      	nop
 80002e0:	08004c40 	.word	0x08004c40
 80002e4:	2000003f 	.word	0x2000003f

080002e8 <HD44780_NoDisplay>:

void HD44780_NoDisplay()
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_DISPLAYON;
 80002ec:	4b08      	ldr	r3, [pc, #32]	; (8000310 <HD44780_NoDisplay+0x28>)
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	f023 0304 	bic.w	r3, r3, #4
 80002f4:	b2da      	uxtb	r2, r3
 80002f6:	4b06      	ldr	r3, [pc, #24]	; (8000310 <HD44780_NoDisplay+0x28>)
 80002f8:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80002fa:	4b05      	ldr	r3, [pc, #20]	; (8000310 <HD44780_NoDisplay+0x28>)
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	f043 0308 	orr.w	r3, r3, #8
 8000302:	b2db      	uxtb	r3, r3
 8000304:	4618      	mov	r0, r3
 8000306:	f000 f8d1 	bl	80004ac <SendCommand>
}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	2000003d 	.word	0x2000003d

08000314 <HD44780_Display>:

void HD44780_Display()
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000318:	4b08      	ldr	r3, [pc, #32]	; (800033c <HD44780_Display+0x28>)
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	f043 0304 	orr.w	r3, r3, #4
 8000320:	b2da      	uxtb	r2, r3
 8000322:	4b06      	ldr	r3, [pc, #24]	; (800033c <HD44780_Display+0x28>)
 8000324:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000326:	4b05      	ldr	r3, [pc, #20]	; (800033c <HD44780_Display+0x28>)
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	f043 0308 	orr.w	r3, r3, #8
 800032e:	b2db      	uxtb	r3, r3
 8000330:	4618      	mov	r0, r3
 8000332:	f000 f8bb 	bl	80004ac <SendCommand>
}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	2000003d 	.word	0x2000003d

08000340 <HD44780_NoCursor>:

void HD44780_NoCursor()
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_CURSORON;
 8000344:	4b08      	ldr	r3, [pc, #32]	; (8000368 <HD44780_NoCursor+0x28>)
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	f023 0302 	bic.w	r3, r3, #2
 800034c:	b2da      	uxtb	r2, r3
 800034e:	4b06      	ldr	r3, [pc, #24]	; (8000368 <HD44780_NoCursor+0x28>)
 8000350:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000352:	4b05      	ldr	r3, [pc, #20]	; (8000368 <HD44780_NoCursor+0x28>)
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	f043 0308 	orr.w	r3, r3, #8
 800035a:	b2db      	uxtb	r3, r3
 800035c:	4618      	mov	r0, r3
 800035e:	f000 f8a5 	bl	80004ac <SendCommand>
}
 8000362:	bf00      	nop
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	2000003d 	.word	0x2000003d

0800036c <HD44780_Cursor>:

void HD44780_Cursor()
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
  dpControl |= LCD_CURSORON;
 8000370:	4b08      	ldr	r3, [pc, #32]	; (8000394 <HD44780_Cursor+0x28>)
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	f043 0302 	orr.w	r3, r3, #2
 8000378:	b2da      	uxtb	r2, r3
 800037a:	4b06      	ldr	r3, [pc, #24]	; (8000394 <HD44780_Cursor+0x28>)
 800037c:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800037e:	4b05      	ldr	r3, [pc, #20]	; (8000394 <HD44780_Cursor+0x28>)
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	f043 0308 	orr.w	r3, r3, #8
 8000386:	b2db      	uxtb	r3, r3
 8000388:	4618      	mov	r0, r3
 800038a:	f000 f88f 	bl	80004ac <SendCommand>
}
 800038e:	bf00      	nop
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	2000003d 	.word	0x2000003d

08000398 <HD44780_NoBlink>:

void HD44780_NoBlink()
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_BLINKON;
 800039c:	4b08      	ldr	r3, [pc, #32]	; (80003c0 <HD44780_NoBlink+0x28>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	f023 0301 	bic.w	r3, r3, #1
 80003a4:	b2da      	uxtb	r2, r3
 80003a6:	4b06      	ldr	r3, [pc, #24]	; (80003c0 <HD44780_NoBlink+0x28>)
 80003a8:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80003aa:	4b05      	ldr	r3, [pc, #20]	; (80003c0 <HD44780_NoBlink+0x28>)
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	f043 0308 	orr.w	r3, r3, #8
 80003b2:	b2db      	uxtb	r3, r3
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 f879 	bl	80004ac <SendCommand>
}
 80003ba:	bf00      	nop
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	2000003d 	.word	0x2000003d

080003c4 <HD44780_Blink>:

void HD44780_Blink()
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
  dpControl |= LCD_BLINKON;
 80003c8:	4b08      	ldr	r3, [pc, #32]	; (80003ec <HD44780_Blink+0x28>)
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	f043 0301 	orr.w	r3, r3, #1
 80003d0:	b2da      	uxtb	r2, r3
 80003d2:	4b06      	ldr	r3, [pc, #24]	; (80003ec <HD44780_Blink+0x28>)
 80003d4:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80003d6:	4b05      	ldr	r3, [pc, #20]	; (80003ec <HD44780_Blink+0x28>)
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	f043 0308 	orr.w	r3, r3, #8
 80003de:	b2db      	uxtb	r3, r3
 80003e0:	4618      	mov	r0, r3
 80003e2:	f000 f863 	bl	80004ac <SendCommand>
}
 80003e6:	bf00      	nop
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	2000003d 	.word	0x2000003d

080003f0 <HD44780_ScrollDisplayLeft>:

void HD44780_ScrollDisplayLeft(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
  SendCommand(LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVELEFT);
 80003f4:	2018      	movs	r0, #24
 80003f6:	f000 f859 	bl	80004ac <SendCommand>
}
 80003fa:	bf00      	nop
 80003fc:	bd80      	pop	{r7, pc}

080003fe <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 80003fe:	b580      	push	{r7, lr}
 8000400:	b084      	sub	sp, #16
 8000402:	af00      	add	r7, sp, #0
 8000404:	4603      	mov	r3, r0
 8000406:	6039      	str	r1, [r7, #0]
 8000408:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 800040a:	79fb      	ldrb	r3, [r7, #7]
 800040c:	f003 0307 	and.w	r3, r3, #7
 8000410:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000412:	79fb      	ldrb	r3, [r7, #7]
 8000414:	00db      	lsls	r3, r3, #3
 8000416:	b25b      	sxtb	r3, r3
 8000418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800041c:	b25b      	sxtb	r3, r3
 800041e:	b2db      	uxtb	r3, r3
 8000420:	4618      	mov	r0, r3
 8000422:	f000 f843 	bl	80004ac <SendCommand>
  for (int i=0; i<8; i++)
 8000426:	2300      	movs	r3, #0
 8000428:	60fb      	str	r3, [r7, #12]
 800042a:	e009      	b.n	8000440 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	683a      	ldr	r2, [r7, #0]
 8000430:	4413      	add	r3, r2
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	4618      	mov	r0, r3
 8000436:	f000 f847 	bl	80004c8 <SendChar>
  for (int i=0; i<8; i++)
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	3301      	adds	r3, #1
 800043e:	60fb      	str	r3, [r7, #12]
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	2b07      	cmp	r3, #7
 8000444:	ddf2      	ble.n	800042c <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000446:	bf00      	nop
 8000448:	bf00      	nop
 800044a:	3710      	adds	r7, #16
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}

08000450 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000458:	e006      	b.n	8000468 <HD44780_PrintStr+0x18>
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	1c5a      	adds	r2, r3, #1
 800045e:	607a      	str	r2, [r7, #4]
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	4618      	mov	r0, r3
 8000464:	f000 f830 	bl	80004c8 <SendChar>
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	2b00      	cmp	r3, #0
 800046e:	d1f4      	bne.n	800045a <HD44780_PrintStr+0xa>
}
 8000470:	bf00      	nop
 8000472:	bf00      	nop
 8000474:	3708      	adds	r7, #8
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
	...

0800047c <HD44780_NoBacklight>:
  if(new_val) HD44780_Backlight();
  else HD44780_NoBacklight();
}

void HD44780_NoBacklight(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  dpBacklight=LCD_NOBACKLIGHT;
 8000480:	4b03      	ldr	r3, [pc, #12]	; (8000490 <HD44780_NoBacklight+0x14>)
 8000482:	2200      	movs	r2, #0
 8000484:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 8000486:	2000      	movs	r0, #0
 8000488:	f000 f85e 	bl	8000548 <ExpanderWrite>
}
 800048c:	bf00      	nop
 800048e:	bd80      	pop	{r7, pc}
 8000490:	20000040 	.word	0x20000040

08000494 <HD44780_Backlight>:

void HD44780_Backlight(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  dpBacklight=LCD_BACKLIGHT;
 8000498:	4b03      	ldr	r3, [pc, #12]	; (80004a8 <HD44780_Backlight+0x14>)
 800049a:	2208      	movs	r2, #8
 800049c:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 800049e:	2000      	movs	r0, #0
 80004a0:	f000 f852 	bl	8000548 <ExpanderWrite>
}
 80004a4:	bf00      	nop
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	20000040 	.word	0x20000040

080004ac <SendCommand>:

static void SendCommand(uint8_t cmd)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	4603      	mov	r3, r0
 80004b4:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80004b6:	79fb      	ldrb	r3, [r7, #7]
 80004b8:	2100      	movs	r1, #0
 80004ba:	4618      	mov	r0, r3
 80004bc:	f000 f812 	bl	80004e4 <Send>
}
 80004c0:	bf00      	nop
 80004c2:	3708      	adds	r7, #8
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}

080004c8 <SendChar>:

static void SendChar(uint8_t ch)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	2101      	movs	r1, #1
 80004d6:	4618      	mov	r0, r3
 80004d8:	f000 f804 	bl	80004e4 <Send>
}
 80004dc:	bf00      	nop
 80004de:	3708      	adds	r7, #8
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}

080004e4 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4603      	mov	r3, r0
 80004ec:	460a      	mov	r2, r1
 80004ee:	71fb      	strb	r3, [r7, #7]
 80004f0:	4613      	mov	r3, r2
 80004f2:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80004f4:	79fb      	ldrb	r3, [r7, #7]
 80004f6:	f023 030f 	bic.w	r3, r3, #15
 80004fa:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80004fc:	79fb      	ldrb	r3, [r7, #7]
 80004fe:	011b      	lsls	r3, r3, #4
 8000500:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000502:	7bfa      	ldrb	r2, [r7, #15]
 8000504:	79bb      	ldrb	r3, [r7, #6]
 8000506:	4313      	orrs	r3, r2
 8000508:	b2db      	uxtb	r3, r3
 800050a:	4618      	mov	r0, r3
 800050c:	f000 f80b 	bl	8000526 <Write4Bits>
  Write4Bits((lownib)|mode);
 8000510:	7bba      	ldrb	r2, [r7, #14]
 8000512:	79bb      	ldrb	r3, [r7, #6]
 8000514:	4313      	orrs	r3, r2
 8000516:	b2db      	uxtb	r3, r3
 8000518:	4618      	mov	r0, r3
 800051a:	f000 f804 	bl	8000526 <Write4Bits>
}
 800051e:	bf00      	nop
 8000520:	3710      	adds	r7, #16
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}

08000526 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000526:	b580      	push	{r7, lr}
 8000528:	b082      	sub	sp, #8
 800052a:	af00      	add	r7, sp, #0
 800052c:	4603      	mov	r3, r0
 800052e:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000530:	79fb      	ldrb	r3, [r7, #7]
 8000532:	4618      	mov	r0, r3
 8000534:	f000 f808 	bl	8000548 <ExpanderWrite>
  PulseEnable(value);
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	4618      	mov	r0, r3
 800053c:	f000 f820 	bl	8000580 <PulseEnable>
}
 8000540:	bf00      	nop
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}

08000548 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b086      	sub	sp, #24
 800054c:	af02      	add	r7, sp, #8
 800054e:	4603      	mov	r3, r0
 8000550:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000552:	4b09      	ldr	r3, [pc, #36]	; (8000578 <ExpanderWrite+0x30>)
 8000554:	781a      	ldrb	r2, [r3, #0]
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	4313      	orrs	r3, r2
 800055a:	b2db      	uxtb	r3, r3
 800055c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800055e:	f107 020f 	add.w	r2, r7, #15
 8000562:	230a      	movs	r3, #10
 8000564:	9300      	str	r3, [sp, #0]
 8000566:	2301      	movs	r3, #1
 8000568:	2170      	movs	r1, #112	; 0x70
 800056a:	4804      	ldr	r0, [pc, #16]	; (800057c <ExpanderWrite+0x34>)
 800056c:	f000 ff46 	bl	80013fc <HAL_I2C_Master_Transmit>
}
 8000570:	bf00      	nop
 8000572:	3710      	adds	r7, #16
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	20000040 	.word	0x20000040
 800057c:	20000044 	.word	0x20000044

08000580 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	f043 0304 	orr.w	r3, r3, #4
 8000590:	b2db      	uxtb	r3, r3
 8000592:	4618      	mov	r0, r3
 8000594:	f7ff ffd8 	bl	8000548 <ExpanderWrite>
  DelayUS(20);
 8000598:	2014      	movs	r0, #20
 800059a:	f000 f837 	bl	800060c <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	f023 0304 	bic.w	r3, r3, #4
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	4618      	mov	r0, r3
 80005a8:	f7ff ffce 	bl	8000548 <ExpanderWrite>
  DelayUS(20);
 80005ac:	2014      	movs	r0, #20
 80005ae:	f000 f82d 	bl	800060c <DelayUS>
}
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
	...

080005bc <DelayInit>:

static void DelayInit(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80005c0:	4b10      	ldr	r3, [pc, #64]	; (8000604 <DelayInit+0x48>)
 80005c2:	68db      	ldr	r3, [r3, #12]
 80005c4:	4a0f      	ldr	r2, [pc, #60]	; (8000604 <DelayInit+0x48>)
 80005c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80005ca:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80005cc:	4b0d      	ldr	r3, [pc, #52]	; (8000604 <DelayInit+0x48>)
 80005ce:	68db      	ldr	r3, [r3, #12]
 80005d0:	4a0c      	ldr	r2, [pc, #48]	; (8000604 <DelayInit+0x48>)
 80005d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005d6:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80005d8:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <DelayInit+0x4c>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a0a      	ldr	r2, [pc, #40]	; (8000608 <DelayInit+0x4c>)
 80005de:	f023 0301 	bic.w	r3, r3, #1
 80005e2:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80005e4:	4b08      	ldr	r3, [pc, #32]	; (8000608 <DelayInit+0x4c>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a07      	ldr	r2, [pc, #28]	; (8000608 <DelayInit+0x4c>)
 80005ea:	f043 0301 	orr.w	r3, r3, #1
 80005ee:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80005f0:	4b05      	ldr	r3, [pc, #20]	; (8000608 <DelayInit+0x4c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80005f6:	bf00      	nop
  __ASM volatile ("NOP");
 80005f8:	bf00      	nop
  __ASM volatile ("NOP");
 80005fa:	bf00      	nop
}
 80005fc:	bf00      	nop
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr
 8000604:	e000edf0 	.word	0xe000edf0
 8000608:	e0001000 	.word	0xe0001000

0800060c <DelayUS>:

static void DelayUS(uint32_t us) {
 800060c:	b480      	push	{r7}
 800060e:	b087      	sub	sp, #28
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000614:	4b0d      	ldr	r3, [pc, #52]	; (800064c <DelayUS+0x40>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a0d      	ldr	r2, [pc, #52]	; (8000650 <DelayUS+0x44>)
 800061a:	fba2 2303 	umull	r2, r3, r2, r3
 800061e:	0c9a      	lsrs	r2, r3, #18
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	fb02 f303 	mul.w	r3, r2, r3
 8000626:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000628:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <DelayUS+0x48>)
 800062a:	685b      	ldr	r3, [r3, #4]
 800062c:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800062e:	4b09      	ldr	r3, [pc, #36]	; (8000654 <DelayUS+0x48>)
 8000630:	685a      	ldr	r2, [r3, #4]
 8000632:	693b      	ldr	r3, [r7, #16]
 8000634:	1ad3      	subs	r3, r2, r3
 8000636:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	697a      	ldr	r2, [r7, #20]
 800063c:	429a      	cmp	r2, r3
 800063e:	d8f6      	bhi.n	800062e <DelayUS+0x22>
}
 8000640:	bf00      	nop
 8000642:	bf00      	nop
 8000644:	371c      	adds	r7, #28
 8000646:	46bd      	mov	sp, r7
 8000648:	bc80      	pop	{r7}
 800064a:	4770      	bx	lr
 800064c:	20000010 	.word	0x20000010
 8000650:	431bde83 	.word	0x431bde83
 8000654:	e0001000 	.word	0xe0001000

08000658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065e:	f000 fa6b 	bl	8000b38 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000662:	f000 f8a5 	bl	80007b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000666:	f000 f92f 	bl	80008c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800066a:	f000 f8dd 	bl	8000828 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
   HD44780_Init(2);
 800066e:	2002      	movs	r0, #2
 8000670:	f7ff fd6e 	bl	8000150 <HD44780_Init>
   HD44780_Clear();
 8000674:	f7ff fdf0 	bl	8000258 <HD44780_Clear>
   HD44780_SetCursor(0,0);
 8000678:	2100      	movs	r1, #0
 800067a:	2000      	movs	r0, #0
 800067c:	f7ff fe02 	bl	8000284 <HD44780_SetCursor>
   HD44780_PrintStr("привет");
 8000680:	4844      	ldr	r0, [pc, #272]	; (8000794 <main+0x13c>)
 8000682:	f7ff fee5 	bl	8000450 <HD44780_PrintStr>
   HD44780_SetCursor(10,1);
 8000686:	2101      	movs	r1, #1
 8000688:	200a      	movs	r0, #10
 800068a:	f7ff fdfb 	bl	8000284 <HD44780_SetCursor>
   HD44780_PrintStr("мир");
 800068e:	4842      	ldr	r0, [pc, #264]	; (8000798 <main+0x140>)
 8000690:	f7ff fede 	bl	8000450 <HD44780_PrintStr>
   HAL_Delay(2000);
 8000694:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000698:	f000 fab0 	bl	8000bfc <HAL_Delay>

   HD44780_Clear();
 800069c:	f7ff fddc 	bl	8000258 <HD44780_Clear>
   HD44780_SetCursor(0,0);
 80006a0:	2100      	movs	r1, #0
 80006a2:	2000      	movs	r0, #0
 80006a4:	f7ff fdee 	bl	8000284 <HD44780_SetCursor>
   HD44780_PrintStr("HELLO");
 80006a8:	483c      	ldr	r0, [pc, #240]	; (800079c <main+0x144>)
 80006aa:	f7ff fed1 	bl	8000450 <HD44780_PrintStr>
   HAL_Delay(2000);
 80006ae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006b2:	f000 faa3 	bl	8000bfc <HAL_Delay>
   HD44780_NoBacklight();
 80006b6:	f7ff fee1 	bl	800047c <HD44780_NoBacklight>
   HAL_Delay(2000);
 80006ba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006be:	f000 fa9d 	bl	8000bfc <HAL_Delay>
   HD44780_Backlight();
 80006c2:	f7ff fee7 	bl	8000494 <HD44780_Backlight>

   HAL_Delay(2000);
 80006c6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006ca:	f000 fa97 	bl	8000bfc <HAL_Delay>
   HD44780_Cursor();
 80006ce:	f7ff fe4d 	bl	800036c <HD44780_Cursor>
   HAL_Delay(2000);
 80006d2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006d6:	f000 fa91 	bl	8000bfc <HAL_Delay>
   HD44780_Blink();
 80006da:	f7ff fe73 	bl	80003c4 <HD44780_Blink>
   HAL_Delay(5000);
 80006de:	f241 3088 	movw	r0, #5000	; 0x1388
 80006e2:	f000 fa8b 	bl	8000bfc <HAL_Delay>
   HD44780_NoBlink();
 80006e6:	f7ff fe57 	bl	8000398 <HD44780_NoBlink>
   HAL_Delay(2000);
 80006ea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006ee:	f000 fa85 	bl	8000bfc <HAL_Delay>
   HD44780_NoCursor();
 80006f2:	f7ff fe25 	bl	8000340 <HD44780_NoCursor>
   HAL_Delay(2000);
 80006f6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006fa:	f000 fa7f 	bl	8000bfc <HAL_Delay>

   HD44780_NoDisplay();
 80006fe:	f7ff fdf3 	bl	80002e8 <HD44780_NoDisplay>
   HAL_Delay(2000);
 8000702:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000706:	f000 fa79 	bl	8000bfc <HAL_Delay>
   HD44780_Display();
 800070a:	f7ff fe03 	bl	8000314 <HD44780_Display>

   HD44780_Clear();
 800070e:	f7ff fda3 	bl	8000258 <HD44780_Clear>
   HD44780_SetCursor(0,0);
 8000712:	2100      	movs	r1, #0
 8000714:	2000      	movs	r0, #0
 8000716:	f7ff fdb5 	bl	8000284 <HD44780_SetCursor>
   HD44780_PrintStr("Learning STM32 with LCD is fun :-)");
 800071a:	4821      	ldr	r0, [pc, #132]	; (80007a0 <main+0x148>)
 800071c:	f7ff fe98 	bl	8000450 <HD44780_PrintStr>
   int x;
   for(int x=0; x<40; x=x+1)
 8000720:	2300      	movs	r3, #0
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	e008      	b.n	8000738 <main+0xe0>
   {
     HD44780_ScrollDisplayLeft();  //HD44780_ScrollDisplayRight();
 8000726:	f7ff fe63 	bl	80003f0 <HD44780_ScrollDisplayLeft>
     HAL_Delay(500);
 800072a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800072e:	f000 fa65 	bl	8000bfc <HAL_Delay>
   for(int x=0; x<40; x=x+1)
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	3301      	adds	r3, #1
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	2b27      	cmp	r3, #39	; 0x27
 800073c:	ddf3      	ble.n	8000726 <main+0xce>
   }

   char snum[5];
   for ( int x = 1; x <= 200 ; x++ )
 800073e:	2301      	movs	r3, #1
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	e016      	b.n	8000772 <main+0x11a>
   {
     itoa(x, snum, 10);
 8000744:	463b      	mov	r3, r7
 8000746:	220a      	movs	r2, #10
 8000748:	4619      	mov	r1, r3
 800074a:	68b8      	ldr	r0, [r7, #8]
 800074c:	f004 fa12 	bl	8004b74 <itoa>
     HD44780_Clear();
 8000750:	f7ff fd82 	bl	8000258 <HD44780_Clear>
     HD44780_SetCursor(0,0);
 8000754:	2100      	movs	r1, #0
 8000756:	2000      	movs	r0, #0
 8000758:	f7ff fd94 	bl	8000284 <HD44780_SetCursor>
     HD44780_PrintStr(snum);
 800075c:	463b      	mov	r3, r7
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff fe76 	bl	8000450 <HD44780_PrintStr>
     HAL_Delay (1000);
 8000764:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000768:	f000 fa48 	bl	8000bfc <HAL_Delay>
   for ( int x = 1; x <= 200 ; x++ )
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	3301      	adds	r3, #1
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	2bc8      	cmp	r3, #200	; 0xc8
 8000776:	dde5      	ble.n	8000744 <main+0xec>
   }
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000778:	f001 fd4c 	bl	8002214 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800077c:	4a09      	ldr	r2, [pc, #36]	; (80007a4 <main+0x14c>)
 800077e:	2100      	movs	r1, #0
 8000780:	4809      	ldr	r0, [pc, #36]	; (80007a8 <main+0x150>)
 8000782:	f001 fdad 	bl	80022e0 <osThreadNew>
 8000786:	4603      	mov	r3, r0
 8000788:	4a08      	ldr	r2, [pc, #32]	; (80007ac <main+0x154>)
 800078a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800078c:	f001 fd74 	bl	8002278 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000790:	e7fe      	b.n	8000790 <main+0x138>
 8000792:	bf00      	nop
 8000794:	08004c5c 	.word	0x08004c5c
 8000798:	08004c6c 	.word	0x08004c6c
 800079c:	08004c74 	.word	0x08004c74
 80007a0:	08004c7c 	.word	0x08004c7c
 80007a4:	08004cc8 	.word	0x08004cc8
 80007a8:	08000965 	.word	0x08000965
 80007ac:	20000098 	.word	0x20000098

080007b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b090      	sub	sp, #64	; 0x40
 80007b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b6:	f107 0318 	add.w	r3, r7, #24
 80007ba:	2228      	movs	r2, #40	; 0x28
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f004 f9e8 	bl	8004b94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d2:	2302      	movs	r3, #2
 80007d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d6:	2301      	movs	r3, #1
 80007d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007da:	2310      	movs	r3, #16
 80007dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007de:	2300      	movs	r3, #0
 80007e0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e2:	f107 0318 	add.w	r3, r7, #24
 80007e6:	4618      	mov	r0, r3
 80007e8:	f001 f90e 	bl	8001a08 <HAL_RCC_OscConfig>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80007f2:	f000 f8d5 	bl	80009a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f6:	230f      	movs	r3, #15
 80007f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000802:	2300      	movs	r3, #0
 8000804:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f001 fb7c 	bl	8001f0c <HAL_RCC_ClockConfig>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800081a:	f000 f8c1 	bl	80009a0 <Error_Handler>
  }
}
 800081e:	bf00      	nop
 8000820:	3740      	adds	r7, #64	; 0x40
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
	...

08000828 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */
	  __HAL_RCC_AFIO_CLK_ENABLE();
 800082e:	4b21      	ldr	r3, [pc, #132]	; (80008b4 <MX_I2C1_Init+0x8c>)
 8000830:	699b      	ldr	r3, [r3, #24]
 8000832:	4a20      	ldr	r2, [pc, #128]	; (80008b4 <MX_I2C1_Init+0x8c>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6193      	str	r3, [r2, #24]
 800083a:	4b1e      	ldr	r3, [pc, #120]	; (80008b4 <MX_I2C1_Init+0x8c>)
 800083c:	699b      	ldr	r3, [r3, #24]
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	683b      	ldr	r3, [r7, #0]
	  __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000846:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <MX_I2C1_Init+0x90>)
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	f043 0302 	orr.w	r3, r3, #2
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	4a16      	ldr	r2, [pc, #88]	; (80008b8 <MX_I2C1_Init+0x90>)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	6053      	str	r3, [r2, #4]
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000862:	4b16      	ldr	r3, [pc, #88]	; (80008bc <MX_I2C1_Init+0x94>)
 8000864:	4a16      	ldr	r2, [pc, #88]	; (80008c0 <MX_I2C1_Init+0x98>)
 8000866:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000868:	4b14      	ldr	r3, [pc, #80]	; (80008bc <MX_I2C1_Init+0x94>)
 800086a:	4a16      	ldr	r2, [pc, #88]	; (80008c4 <MX_I2C1_Init+0x9c>)
 800086c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800086e:	4b13      	ldr	r3, [pc, #76]	; (80008bc <MX_I2C1_Init+0x94>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000874:	4b11      	ldr	r3, [pc, #68]	; (80008bc <MX_I2C1_Init+0x94>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800087a:	4b10      	ldr	r3, [pc, #64]	; (80008bc <MX_I2C1_Init+0x94>)
 800087c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000880:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000882:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <MX_I2C1_Init+0x94>)
 8000884:	2200      	movs	r2, #0
 8000886:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000888:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <MX_I2C1_Init+0x94>)
 800088a:	2200      	movs	r2, #0
 800088c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800088e:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <MX_I2C1_Init+0x94>)
 8000890:	2200      	movs	r2, #0
 8000892:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000894:	4b09      	ldr	r3, [pc, #36]	; (80008bc <MX_I2C1_Init+0x94>)
 8000896:	2200      	movs	r2, #0
 8000898:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800089a:	4808      	ldr	r0, [pc, #32]	; (80008bc <MX_I2C1_Init+0x94>)
 800089c:	f000 fc6a 	bl	8001174 <HAL_I2C_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_I2C1_Init+0x82>
  {
    Error_Handler();
 80008a6:	f000 f87b 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40021000 	.word	0x40021000
 80008b8:	40010000 	.word	0x40010000
 80008bc:	20000044 	.word	0x20000044
 80008c0:	40005400 	.word	0x40005400
 80008c4:	000186a0 	.word	0x000186a0

080008c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ce:	f107 0308 	add.w	r3, r7, #8
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008dc:	4b1e      	ldr	r3, [pc, #120]	; (8000958 <MX_GPIO_Init+0x90>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	4a1d      	ldr	r2, [pc, #116]	; (8000958 <MX_GPIO_Init+0x90>)
 80008e2:	f043 0310 	orr.w	r3, r3, #16
 80008e6:	6193      	str	r3, [r2, #24]
 80008e8:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <MX_GPIO_Init+0x90>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	f003 0310 	and.w	r3, r3, #16
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f4:	4b18      	ldr	r3, [pc, #96]	; (8000958 <MX_GPIO_Init+0x90>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	4a17      	ldr	r2, [pc, #92]	; (8000958 <MX_GPIO_Init+0x90>)
 80008fa:	f043 0308 	orr.w	r3, r3, #8
 80008fe:	6193      	str	r3, [r2, #24]
 8000900:	4b15      	ldr	r3, [pc, #84]	; (8000958 <MX_GPIO_Init+0x90>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	f003 0308 	and.w	r3, r3, #8
 8000908:	603b      	str	r3, [r7, #0]
 800090a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800090c:	2200      	movs	r2, #0
 800090e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000912:	4812      	ldr	r0, [pc, #72]	; (800095c <MX_GPIO_Init+0x94>)
 8000914:	f000 fc15 	bl	8001142 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000918:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800091c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091e:	2301      	movs	r3, #1
 8000920:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000922:	2301      	movs	r3, #1
 8000924:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2302      	movs	r3, #2
 8000928:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800092a:	f107 0308 	add.w	r3, r7, #8
 800092e:	4619      	mov	r1, r3
 8000930:	480a      	ldr	r0, [pc, #40]	; (800095c <MX_GPIO_Init+0x94>)
 8000932:	f000 fa6b 	bl	8000e0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000936:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800093a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093c:	2300      	movs	r3, #0
 800093e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000944:	f107 0308 	add.w	r3, r7, #8
 8000948:	4619      	mov	r1, r3
 800094a:	4805      	ldr	r0, [pc, #20]	; (8000960 <MX_GPIO_Init+0x98>)
 800094c:	f000 fa5e 	bl	8000e0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000950:	bf00      	nop
 8000952:	3718      	adds	r7, #24
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40021000 	.word	0x40021000
 800095c:	40011000 	.word	0x40011000
 8000960:	40010c00 	.word	0x40010c00

08000964 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == GPIO_PIN_SET) {
 800096c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000970:	4809      	ldr	r0, [pc, #36]	; (8000998 <StartDefaultTask+0x34>)
 8000972:	f000 fbcf 	bl	8001114 <HAL_GPIO_ReadPin>
 8000976:	4603      	mov	r3, r0
 8000978:	2b01      	cmp	r3, #1
 800097a:	d106      	bne.n	800098a <StartDefaultTask+0x26>
		  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800097c:	2201      	movs	r2, #1
 800097e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000982:	4806      	ldr	r0, [pc, #24]	; (800099c <StartDefaultTask+0x38>)
 8000984:	f000 fbdd 	bl	8001142 <HAL_GPIO_WritePin>
 8000988:	e7f0      	b.n	800096c <StartDefaultTask+0x8>
	  }else {
		  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000990:	4802      	ldr	r0, [pc, #8]	; (800099c <StartDefaultTask+0x38>)
 8000992:	f000 fbd6 	bl	8001142 <HAL_GPIO_WritePin>
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == GPIO_PIN_SET) {
 8000996:	e7e9      	b.n	800096c <StartDefaultTask+0x8>
 8000998:	40010c00 	.word	0x40010c00
 800099c:	40011000 	.word	0x40011000

080009a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a4:	b672      	cpsid	i
}
 80009a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <Error_Handler+0x8>
	...

080009ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009b2:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <HAL_MspInit+0x4c>)
 80009b4:	699b      	ldr	r3, [r3, #24]
 80009b6:	4a10      	ldr	r2, [pc, #64]	; (80009f8 <HAL_MspInit+0x4c>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	6193      	str	r3, [r2, #24]
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <HAL_MspInit+0x4c>)
 80009c0:	699b      	ldr	r3, [r3, #24]
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <HAL_MspInit+0x4c>)
 80009cc:	69db      	ldr	r3, [r3, #28]
 80009ce:	4a0a      	ldr	r2, [pc, #40]	; (80009f8 <HAL_MspInit+0x4c>)
 80009d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d4:	61d3      	str	r3, [r2, #28]
 80009d6:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <HAL_MspInit+0x4c>)
 80009d8:	69db      	ldr	r3, [r3, #28]
 80009da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009de:	603b      	str	r3, [r7, #0]
 80009e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009e2:	2200      	movs	r2, #0
 80009e4:	210f      	movs	r1, #15
 80009e6:	f06f 0001 	mvn.w	r0, #1
 80009ea:	f000 f9e6 	bl	8000dba <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40021000 	.word	0x40021000

080009fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08a      	sub	sp, #40	; 0x28
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a1d      	ldr	r2, [pc, #116]	; (8000a8c <HAL_I2C_MspInit+0x90>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d132      	bne.n	8000a82 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1c:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <HAL_I2C_MspInit+0x94>)
 8000a1e:	699b      	ldr	r3, [r3, #24]
 8000a20:	4a1b      	ldr	r2, [pc, #108]	; (8000a90 <HAL_I2C_MspInit+0x94>)
 8000a22:	f043 0308 	orr.w	r3, r3, #8
 8000a26:	6193      	str	r3, [r2, #24]
 8000a28:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <HAL_I2C_MspInit+0x94>)
 8000a2a:	699b      	ldr	r3, [r3, #24]
 8000a2c:	f003 0308 	and.w	r3, r3, #8
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a34:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a3a:	2312      	movs	r3, #18
 8000a3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	4619      	mov	r1, r3
 8000a48:	4812      	ldr	r0, [pc, #72]	; (8000a94 <HAL_I2C_MspInit+0x98>)
 8000a4a:	f000 f9df 	bl	8000e0c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000a4e:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <HAL_I2C_MspInit+0x9c>)
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24
 8000a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a56:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a5e:	f043 0302 	orr.w	r3, r3, #2
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
 8000a64:	4a0c      	ldr	r2, [pc, #48]	; (8000a98 <HAL_I2C_MspInit+0x9c>)
 8000a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a68:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <HAL_I2C_MspInit+0x94>)
 8000a6c:	69db      	ldr	r3, [r3, #28]
 8000a6e:	4a08      	ldr	r2, [pc, #32]	; (8000a90 <HAL_I2C_MspInit+0x94>)
 8000a70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a74:	61d3      	str	r3, [r2, #28]
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <HAL_I2C_MspInit+0x94>)
 8000a78:	69db      	ldr	r3, [r3, #28]
 8000a7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a82:	bf00      	nop
 8000a84:	3728      	adds	r7, #40	; 0x28
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40005400 	.word	0x40005400
 8000a90:	40021000 	.word	0x40021000
 8000a94:	40010c00 	.word	0x40010c00
 8000a98:	40010000 	.word	0x40010000

08000a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <NMI_Handler+0x4>

08000aa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <HardFault_Handler+0x4>

08000aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <MemManage_Handler+0x4>

08000aae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab2:	e7fe      	b.n	8000ab2 <BusFault_Handler+0x4>

08000ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <UsageFault_Handler+0x4>

08000aba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr

08000ac6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aca:	f000 f87b 	bl	8000bc4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000ace:	f003 f85b 	bl	8003b88 <xTaskGetSchedulerState>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d001      	beq.n	8000adc <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000ad8:	f003 fdb6 	bl	8004648 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr

08000aec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aec:	480c      	ldr	r0, [pc, #48]	; (8000b20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000aee:	490d      	ldr	r1, [pc, #52]	; (8000b24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000af0:	4a0d      	ldr	r2, [pc, #52]	; (8000b28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af4:	e002      	b.n	8000afc <LoopCopyDataInit>

08000af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afa:	3304      	adds	r3, #4

08000afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b00:	d3f9      	bcc.n	8000af6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b02:	4a0a      	ldr	r2, [pc, #40]	; (8000b2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b04:	4c0a      	ldr	r4, [pc, #40]	; (8000b30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b08:	e001      	b.n	8000b0e <LoopFillZerobss>

08000b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b0c:	3204      	adds	r2, #4

08000b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b10:	d3fb      	bcc.n	8000b0a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b12:	f7ff ffe5 	bl	8000ae0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b16:	f003 fff1 	bl	8004afc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b1a:	f7ff fd9d 	bl	8000658 <main>
  bx lr
 8000b1e:	4770      	bx	lr
  ldr r0, =_sdata
 8000b20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b24:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000b28:	08004d34 	.word	0x08004d34
  ldr r2, =_sbss
 8000b2c:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000b30:	200019e8 	.word	0x200019e8

08000b34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b34:	e7fe      	b.n	8000b34 <ADC1_2_IRQHandler>
	...

08000b38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b3c:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <HAL_Init+0x28>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a07      	ldr	r2, [pc, #28]	; (8000b60 <HAL_Init+0x28>)
 8000b42:	f043 0310 	orr.w	r3, r3, #16
 8000b46:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b48:	2003      	movs	r0, #3
 8000b4a:	f000 f92b 	bl	8000da4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b4e:	200f      	movs	r0, #15
 8000b50:	f000 f808 	bl	8000b64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b54:	f7ff ff2a 	bl	80009ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40022000 	.word	0x40022000

08000b64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b6c:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <HAL_InitTick+0x54>)
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <HAL_InitTick+0x58>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	4619      	mov	r1, r3
 8000b76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b82:	4618      	mov	r0, r3
 8000b84:	f000 f935 	bl	8000df2 <HAL_SYSTICK_Config>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e00e      	b.n	8000bb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2b0f      	cmp	r3, #15
 8000b96:	d80a      	bhi.n	8000bae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	6879      	ldr	r1, [r7, #4]
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	f000 f90b 	bl	8000dba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ba4:	4a06      	ldr	r2, [pc, #24]	; (8000bc0 <HAL_InitTick+0x5c>)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000baa:	2300      	movs	r3, #0
 8000bac:	e000      	b.n	8000bb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20000010 	.word	0x20000010
 8000bbc:	20000018 	.word	0x20000018
 8000bc0:	20000014 	.word	0x20000014

08000bc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bc8:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <HAL_IncTick+0x1c>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	461a      	mov	r2, r3
 8000bce:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <HAL_IncTick+0x20>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	4a03      	ldr	r2, [pc, #12]	; (8000be4 <HAL_IncTick+0x20>)
 8000bd6:	6013      	str	r3, [r2, #0]
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr
 8000be0:	20000018 	.word	0x20000018
 8000be4:	2000009c 	.word	0x2000009c

08000be8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  return uwTick;
 8000bec:	4b02      	ldr	r3, [pc, #8]	; (8000bf8 <HAL_GetTick+0x10>)
 8000bee:	681b      	ldr	r3, [r3, #0]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr
 8000bf8:	2000009c 	.word	0x2000009c

08000bfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c04:	f7ff fff0 	bl	8000be8 <HAL_GetTick>
 8000c08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c14:	d005      	beq.n	8000c22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c16:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <HAL_Delay+0x44>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	4413      	add	r3, r2
 8000c20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c22:	bf00      	nop
 8000c24:	f7ff ffe0 	bl	8000be8 <HAL_GetTick>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	68fa      	ldr	r2, [r7, #12]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d8f7      	bhi.n	8000c24 <HAL_Delay+0x28>
  {
  }
}
 8000c34:	bf00      	nop
 8000c36:	bf00      	nop
 8000c38:	3710      	adds	r7, #16
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000018 	.word	0x20000018

08000c44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <__NVIC_SetPriorityGrouping+0x44>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c5a:	68ba      	ldr	r2, [r7, #8]
 8000c5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c60:	4013      	ands	r3, r2
 8000c62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c76:	4a04      	ldr	r2, [pc, #16]	; (8000c88 <__NVIC_SetPriorityGrouping+0x44>)
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	60d3      	str	r3, [r2, #12]
}
 8000c7c:	bf00      	nop
 8000c7e:	3714      	adds	r7, #20
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bc80      	pop	{r7}
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c90:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <__NVIC_GetPriorityGrouping+0x18>)
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	0a1b      	lsrs	r3, r3, #8
 8000c96:	f003 0307 	and.w	r3, r3, #7
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	6039      	str	r1, [r7, #0]
 8000cb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	db0a      	blt.n	8000cd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	490c      	ldr	r1, [pc, #48]	; (8000cf4 <__NVIC_SetPriority+0x4c>)
 8000cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc6:	0112      	lsls	r2, r2, #4
 8000cc8:	b2d2      	uxtb	r2, r2
 8000cca:	440b      	add	r3, r1
 8000ccc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd0:	e00a      	b.n	8000ce8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	4908      	ldr	r1, [pc, #32]	; (8000cf8 <__NVIC_SetPriority+0x50>)
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	f003 030f 	and.w	r3, r3, #15
 8000cde:	3b04      	subs	r3, #4
 8000ce0:	0112      	lsls	r2, r2, #4
 8000ce2:	b2d2      	uxtb	r2, r2
 8000ce4:	440b      	add	r3, r1
 8000ce6:	761a      	strb	r2, [r3, #24]
}
 8000ce8:	bf00      	nop
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bc80      	pop	{r7}
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	e000e100 	.word	0xe000e100
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b089      	sub	sp, #36	; 0x24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	f003 0307 	and.w	r3, r3, #7
 8000d0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	f1c3 0307 	rsb	r3, r3, #7
 8000d16:	2b04      	cmp	r3, #4
 8000d18:	bf28      	it	cs
 8000d1a:	2304      	movcs	r3, #4
 8000d1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	3304      	adds	r3, #4
 8000d22:	2b06      	cmp	r3, #6
 8000d24:	d902      	bls.n	8000d2c <NVIC_EncodePriority+0x30>
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	3b03      	subs	r3, #3
 8000d2a:	e000      	b.n	8000d2e <NVIC_EncodePriority+0x32>
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d30:	f04f 32ff 	mov.w	r2, #4294967295
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	43da      	mvns	r2, r3
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	401a      	ands	r2, r3
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d44:	f04f 31ff 	mov.w	r1, #4294967295
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4e:	43d9      	mvns	r1, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d54:	4313      	orrs	r3, r2
         );
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3724      	adds	r7, #36	; 0x24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr

08000d60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d70:	d301      	bcc.n	8000d76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d72:	2301      	movs	r3, #1
 8000d74:	e00f      	b.n	8000d96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d76:	4a0a      	ldr	r2, [pc, #40]	; (8000da0 <SysTick_Config+0x40>)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d7e:	210f      	movs	r1, #15
 8000d80:	f04f 30ff 	mov.w	r0, #4294967295
 8000d84:	f7ff ff90 	bl	8000ca8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d88:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <SysTick_Config+0x40>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d8e:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <SysTick_Config+0x40>)
 8000d90:	2207      	movs	r2, #7
 8000d92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	e000e010 	.word	0xe000e010

08000da4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f7ff ff49 	bl	8000c44 <__NVIC_SetPriorityGrouping>
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b086      	sub	sp, #24
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	60b9      	str	r1, [r7, #8]
 8000dc4:	607a      	str	r2, [r7, #4]
 8000dc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dcc:	f7ff ff5e 	bl	8000c8c <__NVIC_GetPriorityGrouping>
 8000dd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	68b9      	ldr	r1, [r7, #8]
 8000dd6:	6978      	ldr	r0, [r7, #20]
 8000dd8:	f7ff ff90 	bl	8000cfc <NVIC_EncodePriority>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000de2:	4611      	mov	r1, r2
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff ff5f 	bl	8000ca8 <__NVIC_SetPriority>
}
 8000dea:	bf00      	nop
 8000dec:	3718      	adds	r7, #24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f7ff ffb0 	bl	8000d60 <SysTick_Config>
 8000e00:	4603      	mov	r3, r0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b08b      	sub	sp, #44	; 0x2c
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e16:	2300      	movs	r3, #0
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e1e:	e169      	b.n	80010f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e20:	2201      	movs	r2, #1
 8000e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	69fa      	ldr	r2, [r7, #28]
 8000e30:	4013      	ands	r3, r2
 8000e32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	f040 8158 	bne.w	80010ee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	4a9a      	ldr	r2, [pc, #616]	; (80010ac <HAL_GPIO_Init+0x2a0>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d05e      	beq.n	8000f06 <HAL_GPIO_Init+0xfa>
 8000e48:	4a98      	ldr	r2, [pc, #608]	; (80010ac <HAL_GPIO_Init+0x2a0>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d875      	bhi.n	8000f3a <HAL_GPIO_Init+0x12e>
 8000e4e:	4a98      	ldr	r2, [pc, #608]	; (80010b0 <HAL_GPIO_Init+0x2a4>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d058      	beq.n	8000f06 <HAL_GPIO_Init+0xfa>
 8000e54:	4a96      	ldr	r2, [pc, #600]	; (80010b0 <HAL_GPIO_Init+0x2a4>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d86f      	bhi.n	8000f3a <HAL_GPIO_Init+0x12e>
 8000e5a:	4a96      	ldr	r2, [pc, #600]	; (80010b4 <HAL_GPIO_Init+0x2a8>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d052      	beq.n	8000f06 <HAL_GPIO_Init+0xfa>
 8000e60:	4a94      	ldr	r2, [pc, #592]	; (80010b4 <HAL_GPIO_Init+0x2a8>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d869      	bhi.n	8000f3a <HAL_GPIO_Init+0x12e>
 8000e66:	4a94      	ldr	r2, [pc, #592]	; (80010b8 <HAL_GPIO_Init+0x2ac>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d04c      	beq.n	8000f06 <HAL_GPIO_Init+0xfa>
 8000e6c:	4a92      	ldr	r2, [pc, #584]	; (80010b8 <HAL_GPIO_Init+0x2ac>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d863      	bhi.n	8000f3a <HAL_GPIO_Init+0x12e>
 8000e72:	4a92      	ldr	r2, [pc, #584]	; (80010bc <HAL_GPIO_Init+0x2b0>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d046      	beq.n	8000f06 <HAL_GPIO_Init+0xfa>
 8000e78:	4a90      	ldr	r2, [pc, #576]	; (80010bc <HAL_GPIO_Init+0x2b0>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d85d      	bhi.n	8000f3a <HAL_GPIO_Init+0x12e>
 8000e7e:	2b12      	cmp	r3, #18
 8000e80:	d82a      	bhi.n	8000ed8 <HAL_GPIO_Init+0xcc>
 8000e82:	2b12      	cmp	r3, #18
 8000e84:	d859      	bhi.n	8000f3a <HAL_GPIO_Init+0x12e>
 8000e86:	a201      	add	r2, pc, #4	; (adr r2, 8000e8c <HAL_GPIO_Init+0x80>)
 8000e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e8c:	08000f07 	.word	0x08000f07
 8000e90:	08000ee1 	.word	0x08000ee1
 8000e94:	08000ef3 	.word	0x08000ef3
 8000e98:	08000f35 	.word	0x08000f35
 8000e9c:	08000f3b 	.word	0x08000f3b
 8000ea0:	08000f3b 	.word	0x08000f3b
 8000ea4:	08000f3b 	.word	0x08000f3b
 8000ea8:	08000f3b 	.word	0x08000f3b
 8000eac:	08000f3b 	.word	0x08000f3b
 8000eb0:	08000f3b 	.word	0x08000f3b
 8000eb4:	08000f3b 	.word	0x08000f3b
 8000eb8:	08000f3b 	.word	0x08000f3b
 8000ebc:	08000f3b 	.word	0x08000f3b
 8000ec0:	08000f3b 	.word	0x08000f3b
 8000ec4:	08000f3b 	.word	0x08000f3b
 8000ec8:	08000f3b 	.word	0x08000f3b
 8000ecc:	08000f3b 	.word	0x08000f3b
 8000ed0:	08000ee9 	.word	0x08000ee9
 8000ed4:	08000efd 	.word	0x08000efd
 8000ed8:	4a79      	ldr	r2, [pc, #484]	; (80010c0 <HAL_GPIO_Init+0x2b4>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d013      	beq.n	8000f06 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ede:	e02c      	b.n	8000f3a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	623b      	str	r3, [r7, #32]
          break;
 8000ee6:	e029      	b.n	8000f3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	3304      	adds	r3, #4
 8000eee:	623b      	str	r3, [r7, #32]
          break;
 8000ef0:	e024      	b.n	8000f3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	68db      	ldr	r3, [r3, #12]
 8000ef6:	3308      	adds	r3, #8
 8000ef8:	623b      	str	r3, [r7, #32]
          break;
 8000efa:	e01f      	b.n	8000f3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	330c      	adds	r3, #12
 8000f02:	623b      	str	r3, [r7, #32]
          break;
 8000f04:	e01a      	b.n	8000f3c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d102      	bne.n	8000f14 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f0e:	2304      	movs	r3, #4
 8000f10:	623b      	str	r3, [r7, #32]
          break;
 8000f12:	e013      	b.n	8000f3c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d105      	bne.n	8000f28 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f1c:	2308      	movs	r3, #8
 8000f1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	69fa      	ldr	r2, [r7, #28]
 8000f24:	611a      	str	r2, [r3, #16]
          break;
 8000f26:	e009      	b.n	8000f3c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f28:	2308      	movs	r3, #8
 8000f2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	69fa      	ldr	r2, [r7, #28]
 8000f30:	615a      	str	r2, [r3, #20]
          break;
 8000f32:	e003      	b.n	8000f3c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f34:	2300      	movs	r3, #0
 8000f36:	623b      	str	r3, [r7, #32]
          break;
 8000f38:	e000      	b.n	8000f3c <HAL_GPIO_Init+0x130>
          break;
 8000f3a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	2bff      	cmp	r3, #255	; 0xff
 8000f40:	d801      	bhi.n	8000f46 <HAL_GPIO_Init+0x13a>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	e001      	b.n	8000f4a <HAL_GPIO_Init+0x13e>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	3304      	adds	r3, #4
 8000f4a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	2bff      	cmp	r3, #255	; 0xff
 8000f50:	d802      	bhi.n	8000f58 <HAL_GPIO_Init+0x14c>
 8000f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	e002      	b.n	8000f5e <HAL_GPIO_Init+0x152>
 8000f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5a:	3b08      	subs	r3, #8
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	210f      	movs	r1, #15
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	401a      	ands	r2, r3
 8000f70:	6a39      	ldr	r1, [r7, #32]
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	fa01 f303 	lsl.w	r3, r1, r3
 8000f78:	431a      	orrs	r2, r3
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	f000 80b1 	beq.w	80010ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f8c:	4b4d      	ldr	r3, [pc, #308]	; (80010c4 <HAL_GPIO_Init+0x2b8>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	4a4c      	ldr	r2, [pc, #304]	; (80010c4 <HAL_GPIO_Init+0x2b8>)
 8000f92:	f043 0301 	orr.w	r3, r3, #1
 8000f96:	6193      	str	r3, [r2, #24]
 8000f98:	4b4a      	ldr	r3, [pc, #296]	; (80010c4 <HAL_GPIO_Init+0x2b8>)
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fa4:	4a48      	ldr	r2, [pc, #288]	; (80010c8 <HAL_GPIO_Init+0x2bc>)
 8000fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa8:	089b      	lsrs	r3, r3, #2
 8000faa:	3302      	adds	r3, #2
 8000fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb4:	f003 0303 	and.w	r3, r3, #3
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	220f      	movs	r2, #15
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4a40      	ldr	r2, [pc, #256]	; (80010cc <HAL_GPIO_Init+0x2c0>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d013      	beq.n	8000ff8 <HAL_GPIO_Init+0x1ec>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4a3f      	ldr	r2, [pc, #252]	; (80010d0 <HAL_GPIO_Init+0x2c4>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d00d      	beq.n	8000ff4 <HAL_GPIO_Init+0x1e8>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a3e      	ldr	r2, [pc, #248]	; (80010d4 <HAL_GPIO_Init+0x2c8>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d007      	beq.n	8000ff0 <HAL_GPIO_Init+0x1e4>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a3d      	ldr	r2, [pc, #244]	; (80010d8 <HAL_GPIO_Init+0x2cc>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d101      	bne.n	8000fec <HAL_GPIO_Init+0x1e0>
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e006      	b.n	8000ffa <HAL_GPIO_Init+0x1ee>
 8000fec:	2304      	movs	r3, #4
 8000fee:	e004      	b.n	8000ffa <HAL_GPIO_Init+0x1ee>
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	e002      	b.n	8000ffa <HAL_GPIO_Init+0x1ee>
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e000      	b.n	8000ffa <HAL_GPIO_Init+0x1ee>
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ffc:	f002 0203 	and.w	r2, r2, #3
 8001000:	0092      	lsls	r2, r2, #2
 8001002:	4093      	lsls	r3, r2
 8001004:	68fa      	ldr	r2, [r7, #12]
 8001006:	4313      	orrs	r3, r2
 8001008:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800100a:	492f      	ldr	r1, [pc, #188]	; (80010c8 <HAL_GPIO_Init+0x2bc>)
 800100c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100e:	089b      	lsrs	r3, r3, #2
 8001010:	3302      	adds	r3, #2
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d006      	beq.n	8001032 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001024:	4b2d      	ldr	r3, [pc, #180]	; (80010dc <HAL_GPIO_Init+0x2d0>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	492c      	ldr	r1, [pc, #176]	; (80010dc <HAL_GPIO_Init+0x2d0>)
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	4313      	orrs	r3, r2
 800102e:	600b      	str	r3, [r1, #0]
 8001030:	e006      	b.n	8001040 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001032:	4b2a      	ldr	r3, [pc, #168]	; (80010dc <HAL_GPIO_Init+0x2d0>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	43db      	mvns	r3, r3
 800103a:	4928      	ldr	r1, [pc, #160]	; (80010dc <HAL_GPIO_Init+0x2d0>)
 800103c:	4013      	ands	r3, r2
 800103e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d006      	beq.n	800105a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800104c:	4b23      	ldr	r3, [pc, #140]	; (80010dc <HAL_GPIO_Init+0x2d0>)
 800104e:	685a      	ldr	r2, [r3, #4]
 8001050:	4922      	ldr	r1, [pc, #136]	; (80010dc <HAL_GPIO_Init+0x2d0>)
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	4313      	orrs	r3, r2
 8001056:	604b      	str	r3, [r1, #4]
 8001058:	e006      	b.n	8001068 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800105a:	4b20      	ldr	r3, [pc, #128]	; (80010dc <HAL_GPIO_Init+0x2d0>)
 800105c:	685a      	ldr	r2, [r3, #4]
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	43db      	mvns	r3, r3
 8001062:	491e      	ldr	r1, [pc, #120]	; (80010dc <HAL_GPIO_Init+0x2d0>)
 8001064:	4013      	ands	r3, r2
 8001066:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d006      	beq.n	8001082 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001074:	4b19      	ldr	r3, [pc, #100]	; (80010dc <HAL_GPIO_Init+0x2d0>)
 8001076:	689a      	ldr	r2, [r3, #8]
 8001078:	4918      	ldr	r1, [pc, #96]	; (80010dc <HAL_GPIO_Init+0x2d0>)
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	4313      	orrs	r3, r2
 800107e:	608b      	str	r3, [r1, #8]
 8001080:	e006      	b.n	8001090 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001082:	4b16      	ldr	r3, [pc, #88]	; (80010dc <HAL_GPIO_Init+0x2d0>)
 8001084:	689a      	ldr	r2, [r3, #8]
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	43db      	mvns	r3, r3
 800108a:	4914      	ldr	r1, [pc, #80]	; (80010dc <HAL_GPIO_Init+0x2d0>)
 800108c:	4013      	ands	r3, r2
 800108e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d021      	beq.n	80010e0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800109c:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <HAL_GPIO_Init+0x2d0>)
 800109e:	68da      	ldr	r2, [r3, #12]
 80010a0:	490e      	ldr	r1, [pc, #56]	; (80010dc <HAL_GPIO_Init+0x2d0>)
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	60cb      	str	r3, [r1, #12]
 80010a8:	e021      	b.n	80010ee <HAL_GPIO_Init+0x2e2>
 80010aa:	bf00      	nop
 80010ac:	10320000 	.word	0x10320000
 80010b0:	10310000 	.word	0x10310000
 80010b4:	10220000 	.word	0x10220000
 80010b8:	10210000 	.word	0x10210000
 80010bc:	10120000 	.word	0x10120000
 80010c0:	10110000 	.word	0x10110000
 80010c4:	40021000 	.word	0x40021000
 80010c8:	40010000 	.word	0x40010000
 80010cc:	40010800 	.word	0x40010800
 80010d0:	40010c00 	.word	0x40010c00
 80010d4:	40011000 	.word	0x40011000
 80010d8:	40011400 	.word	0x40011400
 80010dc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010e0:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <HAL_GPIO_Init+0x304>)
 80010e2:	68da      	ldr	r2, [r3, #12]
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	43db      	mvns	r3, r3
 80010e8:	4909      	ldr	r1, [pc, #36]	; (8001110 <HAL_GPIO_Init+0x304>)
 80010ea:	4013      	ands	r3, r2
 80010ec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80010ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f0:	3301      	adds	r3, #1
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fa:	fa22 f303 	lsr.w	r3, r2, r3
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f47f ae8e 	bne.w	8000e20 <HAL_GPIO_Init+0x14>
  }
}
 8001104:	bf00      	nop
 8001106:	bf00      	nop
 8001108:	372c      	adds	r7, #44	; 0x2c
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr
 8001110:	40010400 	.word	0x40010400

08001114 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	460b      	mov	r3, r1
 800111e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	689a      	ldr	r2, [r3, #8]
 8001124:	887b      	ldrh	r3, [r7, #2]
 8001126:	4013      	ands	r3, r2
 8001128:	2b00      	cmp	r3, #0
 800112a:	d002      	beq.n	8001132 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800112c:	2301      	movs	r3, #1
 800112e:	73fb      	strb	r3, [r7, #15]
 8001130:	e001      	b.n	8001136 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001132:	2300      	movs	r3, #0
 8001134:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001136:	7bfb      	ldrb	r3, [r7, #15]
}
 8001138:	4618      	mov	r0, r3
 800113a:	3714      	adds	r7, #20
 800113c:	46bd      	mov	sp, r7
 800113e:	bc80      	pop	{r7}
 8001140:	4770      	bx	lr

08001142 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001142:	b480      	push	{r7}
 8001144:	b083      	sub	sp, #12
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
 800114a:	460b      	mov	r3, r1
 800114c:	807b      	strh	r3, [r7, #2]
 800114e:	4613      	mov	r3, r2
 8001150:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001152:	787b      	ldrb	r3, [r7, #1]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d003      	beq.n	8001160 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001158:	887a      	ldrh	r2, [r7, #2]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800115e:	e003      	b.n	8001168 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001160:	887b      	ldrh	r3, [r7, #2]
 8001162:	041a      	lsls	r2, r3, #16
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	611a      	str	r2, [r3, #16]
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	bc80      	pop	{r7}
 8001170:	4770      	bx	lr
	...

08001174 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d101      	bne.n	8001186 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e12b      	b.n	80013de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b00      	cmp	r3, #0
 8001190:	d106      	bne.n	80011a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f7ff fc2e 	bl	80009fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2224      	movs	r2, #36	; 0x24
 80011a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f022 0201 	bic.w	r2, r2, #1
 80011b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80011d8:	f000 ffea 	bl	80021b0 <HAL_RCC_GetPCLK1Freq>
 80011dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	4a81      	ldr	r2, [pc, #516]	; (80013e8 <HAL_I2C_Init+0x274>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d807      	bhi.n	80011f8 <HAL_I2C_Init+0x84>
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	4a80      	ldr	r2, [pc, #512]	; (80013ec <HAL_I2C_Init+0x278>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	bf94      	ite	ls
 80011f0:	2301      	movls	r3, #1
 80011f2:	2300      	movhi	r3, #0
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	e006      	b.n	8001206 <HAL_I2C_Init+0x92>
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	4a7d      	ldr	r2, [pc, #500]	; (80013f0 <HAL_I2C_Init+0x27c>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	bf94      	ite	ls
 8001200:	2301      	movls	r3, #1
 8001202:	2300      	movhi	r3, #0
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e0e7      	b.n	80013de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	4a78      	ldr	r2, [pc, #480]	; (80013f4 <HAL_I2C_Init+0x280>)
 8001212:	fba2 2303 	umull	r2, r3, r2, r3
 8001216:	0c9b      	lsrs	r3, r3, #18
 8001218:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	68ba      	ldr	r2, [r7, #8]
 800122a:	430a      	orrs	r2, r1
 800122c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	6a1b      	ldr	r3, [r3, #32]
 8001234:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	4a6a      	ldr	r2, [pc, #424]	; (80013e8 <HAL_I2C_Init+0x274>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d802      	bhi.n	8001248 <HAL_I2C_Init+0xd4>
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	3301      	adds	r3, #1
 8001246:	e009      	b.n	800125c <HAL_I2C_Init+0xe8>
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800124e:	fb02 f303 	mul.w	r3, r2, r3
 8001252:	4a69      	ldr	r2, [pc, #420]	; (80013f8 <HAL_I2C_Init+0x284>)
 8001254:	fba2 2303 	umull	r2, r3, r2, r3
 8001258:	099b      	lsrs	r3, r3, #6
 800125a:	3301      	adds	r3, #1
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	6812      	ldr	r2, [r2, #0]
 8001260:	430b      	orrs	r3, r1
 8001262:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800126e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	495c      	ldr	r1, [pc, #368]	; (80013e8 <HAL_I2C_Init+0x274>)
 8001278:	428b      	cmp	r3, r1
 800127a:	d819      	bhi.n	80012b0 <HAL_I2C_Init+0x13c>
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	1e59      	subs	r1, r3, #1
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	fbb1 f3f3 	udiv	r3, r1, r3
 800128a:	1c59      	adds	r1, r3, #1
 800128c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001290:	400b      	ands	r3, r1
 8001292:	2b00      	cmp	r3, #0
 8001294:	d00a      	beq.n	80012ac <HAL_I2C_Init+0x138>
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	1e59      	subs	r1, r3, #1
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80012a4:	3301      	adds	r3, #1
 80012a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012aa:	e051      	b.n	8001350 <HAL_I2C_Init+0x1dc>
 80012ac:	2304      	movs	r3, #4
 80012ae:	e04f      	b.n	8001350 <HAL_I2C_Init+0x1dc>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d111      	bne.n	80012dc <HAL_I2C_Init+0x168>
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	1e58      	subs	r0, r3, #1
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6859      	ldr	r1, [r3, #4]
 80012c0:	460b      	mov	r3, r1
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	440b      	add	r3, r1
 80012c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80012ca:	3301      	adds	r3, #1
 80012cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	bf0c      	ite	eq
 80012d4:	2301      	moveq	r3, #1
 80012d6:	2300      	movne	r3, #0
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	e012      	b.n	8001302 <HAL_I2C_Init+0x18e>
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	1e58      	subs	r0, r3, #1
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6859      	ldr	r1, [r3, #4]
 80012e4:	460b      	mov	r3, r1
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	440b      	add	r3, r1
 80012ea:	0099      	lsls	r1, r3, #2
 80012ec:	440b      	add	r3, r1
 80012ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80012f2:	3301      	adds	r3, #1
 80012f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	bf0c      	ite	eq
 80012fc:	2301      	moveq	r3, #1
 80012fe:	2300      	movne	r3, #0
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <HAL_I2C_Init+0x196>
 8001306:	2301      	movs	r3, #1
 8001308:	e022      	b.n	8001350 <HAL_I2C_Init+0x1dc>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d10e      	bne.n	8001330 <HAL_I2C_Init+0x1bc>
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	1e58      	subs	r0, r3, #1
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6859      	ldr	r1, [r3, #4]
 800131a:	460b      	mov	r3, r1
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	440b      	add	r3, r1
 8001320:	fbb0 f3f3 	udiv	r3, r0, r3
 8001324:	3301      	adds	r3, #1
 8001326:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800132a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800132e:	e00f      	b.n	8001350 <HAL_I2C_Init+0x1dc>
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	1e58      	subs	r0, r3, #1
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6859      	ldr	r1, [r3, #4]
 8001338:	460b      	mov	r3, r1
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	440b      	add	r3, r1
 800133e:	0099      	lsls	r1, r3, #2
 8001340:	440b      	add	r3, r1
 8001342:	fbb0 f3f3 	udiv	r3, r0, r3
 8001346:	3301      	adds	r3, #1
 8001348:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800134c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001350:	6879      	ldr	r1, [r7, #4]
 8001352:	6809      	ldr	r1, [r1, #0]
 8001354:	4313      	orrs	r3, r2
 8001356:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	69da      	ldr	r2, [r3, #28]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6a1b      	ldr	r3, [r3, #32]
 800136a:	431a      	orrs	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	430a      	orrs	r2, r1
 8001372:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800137e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	6911      	ldr	r1, [r2, #16]
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	68d2      	ldr	r2, [r2, #12]
 800138a:	4311      	orrs	r1, r2
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	6812      	ldr	r2, [r2, #0]
 8001390:	430b      	orrs	r3, r1
 8001392:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	695a      	ldr	r2, [r3, #20]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	431a      	orrs	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	430a      	orrs	r2, r1
 80013ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f042 0201 	orr.w	r2, r2, #1
 80013be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2220      	movs	r2, #32
 80013ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2200      	movs	r2, #0
 80013d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2200      	movs	r2, #0
 80013d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	000186a0 	.word	0x000186a0
 80013ec:	001e847f 	.word	0x001e847f
 80013f0:	003d08ff 	.word	0x003d08ff
 80013f4:	431bde83 	.word	0x431bde83
 80013f8:	10624dd3 	.word	0x10624dd3

080013fc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af02      	add	r7, sp, #8
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	607a      	str	r2, [r7, #4]
 8001406:	461a      	mov	r2, r3
 8001408:	460b      	mov	r3, r1
 800140a:	817b      	strh	r3, [r7, #10]
 800140c:	4613      	mov	r3, r2
 800140e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001410:	f7ff fbea 	bl	8000be8 <HAL_GetTick>
 8001414:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b20      	cmp	r3, #32
 8001420:	f040 80e0 	bne.w	80015e4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	2319      	movs	r3, #25
 800142a:	2201      	movs	r2, #1
 800142c:	4970      	ldr	r1, [pc, #448]	; (80015f0 <HAL_I2C_Master_Transmit+0x1f4>)
 800142e:	68f8      	ldr	r0, [r7, #12]
 8001430:	f000 f964 	bl	80016fc <I2C_WaitOnFlagUntilTimeout>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800143a:	2302      	movs	r3, #2
 800143c:	e0d3      	b.n	80015e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001444:	2b01      	cmp	r3, #1
 8001446:	d101      	bne.n	800144c <HAL_I2C_Master_Transmit+0x50>
 8001448:	2302      	movs	r3, #2
 800144a:	e0cc      	b.n	80015e6 <HAL_I2C_Master_Transmit+0x1ea>
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2201      	movs	r2, #1
 8001450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	2b01      	cmp	r3, #1
 8001460:	d007      	beq.n	8001472 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f042 0201 	orr.w	r2, r2, #1
 8001470:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001480:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2221      	movs	r2, #33	; 0x21
 8001486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2210      	movs	r2, #16
 800148e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	2200      	movs	r2, #0
 8001496:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	893a      	ldrh	r2, [r7, #8]
 80014a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	4a50      	ldr	r2, [pc, #320]	; (80015f4 <HAL_I2C_Master_Transmit+0x1f8>)
 80014b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80014b4:	8979      	ldrh	r1, [r7, #10]
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	6a3a      	ldr	r2, [r7, #32]
 80014ba:	68f8      	ldr	r0, [r7, #12]
 80014bc:	f000 f89c 	bl	80015f8 <I2C_MasterRequestWrite>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e08d      	b.n	80015e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	695b      	ldr	r3, [r3, #20]
 80014d4:	613b      	str	r3, [r7, #16]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	613b      	str	r3, [r7, #16]
 80014de:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80014e0:	e066      	b.n	80015b0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014e2:	697a      	ldr	r2, [r7, #20]
 80014e4:	6a39      	ldr	r1, [r7, #32]
 80014e6:	68f8      	ldr	r0, [r7, #12]
 80014e8:	f000 f9de 	bl	80018a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d00d      	beq.n	800150e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	2b04      	cmp	r3, #4
 80014f8:	d107      	bne.n	800150a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001508:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e06b      	b.n	80015e6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001512:	781a      	ldrb	r2, [r3, #0]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151e:	1c5a      	adds	r2, r3, #1
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001528:	b29b      	uxth	r3, r3
 800152a:	3b01      	subs	r3, #1
 800152c:	b29a      	uxth	r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001536:	3b01      	subs	r3, #1
 8001538:	b29a      	uxth	r2, r3
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	695b      	ldr	r3, [r3, #20]
 8001544:	f003 0304 	and.w	r3, r3, #4
 8001548:	2b04      	cmp	r3, #4
 800154a:	d11b      	bne.n	8001584 <HAL_I2C_Master_Transmit+0x188>
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001550:	2b00      	cmp	r3, #0
 8001552:	d017      	beq.n	8001584 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001558:	781a      	ldrb	r2, [r3, #0]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001564:	1c5a      	adds	r2, r3, #1
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800156e:	b29b      	uxth	r3, r3
 8001570:	3b01      	subs	r3, #1
 8001572:	b29a      	uxth	r2, r3
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800157c:	3b01      	subs	r3, #1
 800157e:	b29a      	uxth	r2, r3
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001584:	697a      	ldr	r2, [r7, #20]
 8001586:	6a39      	ldr	r1, [r7, #32]
 8001588:	68f8      	ldr	r0, [r7, #12]
 800158a:	f000 f9ce 	bl	800192a <I2C_WaitOnBTFFlagUntilTimeout>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d00d      	beq.n	80015b0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001598:	2b04      	cmp	r3, #4
 800159a:	d107      	bne.n	80015ac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015aa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e01a      	b.n	80015e6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d194      	bne.n	80014e2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2220      	movs	r2, #32
 80015cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2200      	movs	r2, #0
 80015d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2200      	movs	r2, #0
 80015dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80015e0:	2300      	movs	r3, #0
 80015e2:	e000      	b.n	80015e6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80015e4:	2302      	movs	r3, #2
  }
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3718      	adds	r7, #24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	00100002 	.word	0x00100002
 80015f4:	ffff0000 	.word	0xffff0000

080015f8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b088      	sub	sp, #32
 80015fc:	af02      	add	r7, sp, #8
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	607a      	str	r2, [r7, #4]
 8001602:	603b      	str	r3, [r7, #0]
 8001604:	460b      	mov	r3, r1
 8001606:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	2b08      	cmp	r3, #8
 8001612:	d006      	beq.n	8001622 <I2C_MasterRequestWrite+0x2a>
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d003      	beq.n	8001622 <I2C_MasterRequestWrite+0x2a>
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001620:	d108      	bne.n	8001634 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	e00b      	b.n	800164c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001638:	2b12      	cmp	r3, #18
 800163a:	d107      	bne.n	800164c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800164a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001658:	68f8      	ldr	r0, [r7, #12]
 800165a:	f000 f84f 	bl	80016fc <I2C_WaitOnFlagUntilTimeout>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d00d      	beq.n	8001680 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800166e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001672:	d103      	bne.n	800167c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f44f 7200 	mov.w	r2, #512	; 0x200
 800167a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e035      	b.n	80016ec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	691b      	ldr	r3, [r3, #16]
 8001684:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001688:	d108      	bne.n	800169c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800168a:	897b      	ldrh	r3, [r7, #10]
 800168c:	b2db      	uxtb	r3, r3
 800168e:	461a      	mov	r2, r3
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001698:	611a      	str	r2, [r3, #16]
 800169a:	e01b      	b.n	80016d4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800169c:	897b      	ldrh	r3, [r7, #10]
 800169e:	11db      	asrs	r3, r3, #7
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	f003 0306 	and.w	r3, r3, #6
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	f063 030f 	orn	r3, r3, #15
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	490e      	ldr	r1, [pc, #56]	; (80016f4 <I2C_MasterRequestWrite+0xfc>)
 80016ba:	68f8      	ldr	r0, [r7, #12]
 80016bc:	f000 f875 	bl	80017aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e010      	b.n	80016ec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80016ca:	897b      	ldrh	r3, [r7, #10]
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	4907      	ldr	r1, [pc, #28]	; (80016f8 <I2C_MasterRequestWrite+0x100>)
 80016da:	68f8      	ldr	r0, [r7, #12]
 80016dc:	f000 f865 	bl	80017aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e000      	b.n	80016ec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80016ea:	2300      	movs	r3, #0
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3718      	adds	r7, #24
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	00010008 	.word	0x00010008
 80016f8:	00010002 	.word	0x00010002

080016fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	603b      	str	r3, [r7, #0]
 8001708:	4613      	mov	r3, r2
 800170a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800170c:	e025      	b.n	800175a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001714:	d021      	beq.n	800175a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001716:	f7ff fa67 	bl	8000be8 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	429a      	cmp	r2, r3
 8001724:	d302      	bcc.n	800172c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d116      	bne.n	800175a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2200      	movs	r2, #0
 8001730:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2220      	movs	r2, #32
 8001736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	f043 0220 	orr.w	r2, r3, #32
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2200      	movs	r2, #0
 8001752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e023      	b.n	80017a2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	0c1b      	lsrs	r3, r3, #16
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b01      	cmp	r3, #1
 8001762:	d10d      	bne.n	8001780 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	695b      	ldr	r3, [r3, #20]
 800176a:	43da      	mvns	r2, r3
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	4013      	ands	r3, r2
 8001770:	b29b      	uxth	r3, r3
 8001772:	2b00      	cmp	r3, #0
 8001774:	bf0c      	ite	eq
 8001776:	2301      	moveq	r3, #1
 8001778:	2300      	movne	r3, #0
 800177a:	b2db      	uxtb	r3, r3
 800177c:	461a      	mov	r2, r3
 800177e:	e00c      	b.n	800179a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	43da      	mvns	r2, r3
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	4013      	ands	r3, r2
 800178c:	b29b      	uxth	r3, r3
 800178e:	2b00      	cmp	r3, #0
 8001790:	bf0c      	ite	eq
 8001792:	2301      	moveq	r3, #1
 8001794:	2300      	movne	r3, #0
 8001796:	b2db      	uxtb	r3, r3
 8001798:	461a      	mov	r2, r3
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	429a      	cmp	r2, r3
 800179e:	d0b6      	beq.n	800170e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b084      	sub	sp, #16
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	60f8      	str	r0, [r7, #12]
 80017b2:	60b9      	str	r1, [r7, #8]
 80017b4:	607a      	str	r2, [r7, #4]
 80017b6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80017b8:	e051      	b.n	800185e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	695b      	ldr	r3, [r3, #20]
 80017c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017c8:	d123      	bne.n	8001812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017d8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80017e2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2200      	movs	r2, #0
 80017e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2220      	movs	r2, #32
 80017ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	f043 0204 	orr.w	r2, r3, #4
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e046      	b.n	80018a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001818:	d021      	beq.n	800185e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800181a:	f7ff f9e5 	bl	8000be8 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	429a      	cmp	r2, r3
 8001828:	d302      	bcc.n	8001830 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d116      	bne.n	800185e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2200      	movs	r2, #0
 8001834:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2220      	movs	r2, #32
 800183a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	f043 0220 	orr.w	r2, r3, #32
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e020      	b.n	80018a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	0c1b      	lsrs	r3, r3, #16
 8001862:	b2db      	uxtb	r3, r3
 8001864:	2b01      	cmp	r3, #1
 8001866:	d10c      	bne.n	8001882 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	43da      	mvns	r2, r3
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	4013      	ands	r3, r2
 8001874:	b29b      	uxth	r3, r3
 8001876:	2b00      	cmp	r3, #0
 8001878:	bf14      	ite	ne
 800187a:	2301      	movne	r3, #1
 800187c:	2300      	moveq	r3, #0
 800187e:	b2db      	uxtb	r3, r3
 8001880:	e00b      	b.n	800189a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	43da      	mvns	r2, r3
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	4013      	ands	r3, r2
 800188e:	b29b      	uxth	r3, r3
 8001890:	2b00      	cmp	r3, #0
 8001892:	bf14      	ite	ne
 8001894:	2301      	movne	r3, #1
 8001896:	2300      	moveq	r3, #0
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	d18d      	bne.n	80017ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3710      	adds	r7, #16
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80018b4:	e02d      	b.n	8001912 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f000 f878 	bl	80019ac <I2C_IsAcknowledgeFailed>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e02d      	b.n	8001922 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018cc:	d021      	beq.n	8001912 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018ce:	f7ff f98b 	bl	8000be8 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	68ba      	ldr	r2, [r7, #8]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d302      	bcc.n	80018e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d116      	bne.n	8001912 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2200      	movs	r2, #0
 80018e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2220      	movs	r2, #32
 80018ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	f043 0220 	orr.w	r2, r3, #32
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e007      	b.n	8001922 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	695b      	ldr	r3, [r3, #20]
 8001918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800191c:	2b80      	cmp	r3, #128	; 0x80
 800191e:	d1ca      	bne.n	80018b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b084      	sub	sp, #16
 800192e:	af00      	add	r7, sp, #0
 8001930:	60f8      	str	r0, [r7, #12]
 8001932:	60b9      	str	r1, [r7, #8]
 8001934:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001936:	e02d      	b.n	8001994 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001938:	68f8      	ldr	r0, [r7, #12]
 800193a:	f000 f837 	bl	80019ac <I2C_IsAcknowledgeFailed>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e02d      	b.n	80019a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800194e:	d021      	beq.n	8001994 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001950:	f7ff f94a 	bl	8000be8 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	68ba      	ldr	r2, [r7, #8]
 800195c:	429a      	cmp	r2, r3
 800195e:	d302      	bcc.n	8001966 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d116      	bne.n	8001994 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2200      	movs	r2, #0
 800196a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2220      	movs	r2, #32
 8001970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001980:	f043 0220 	orr.w	r2, r3, #32
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e007      	b.n	80019a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	f003 0304 	and.w	r3, r3, #4
 800199e:	2b04      	cmp	r3, #4
 80019a0:	d1ca      	bne.n	8001938 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80019a2:	2300      	movs	r3, #0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3710      	adds	r7, #16
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019c2:	d11b      	bne.n	80019fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80019cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2220      	movs	r2, #32
 80019d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e8:	f043 0204 	orr.w	r2, r3, #4
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e000      	b.n	80019fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr

08001a08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e272      	b.n	8001f00 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f000 8087 	beq.w	8001b36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a28:	4b92      	ldr	r3, [pc, #584]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f003 030c 	and.w	r3, r3, #12
 8001a30:	2b04      	cmp	r3, #4
 8001a32:	d00c      	beq.n	8001a4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a34:	4b8f      	ldr	r3, [pc, #572]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f003 030c 	and.w	r3, r3, #12
 8001a3c:	2b08      	cmp	r3, #8
 8001a3e:	d112      	bne.n	8001a66 <HAL_RCC_OscConfig+0x5e>
 8001a40:	4b8c      	ldr	r3, [pc, #560]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a4c:	d10b      	bne.n	8001a66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a4e:	4b89      	ldr	r3, [pc, #548]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d06c      	beq.n	8001b34 <HAL_RCC_OscConfig+0x12c>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d168      	bne.n	8001b34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e24c      	b.n	8001f00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a6e:	d106      	bne.n	8001a7e <HAL_RCC_OscConfig+0x76>
 8001a70:	4b80      	ldr	r3, [pc, #512]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a7f      	ldr	r2, [pc, #508]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001a76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a7a:	6013      	str	r3, [r2, #0]
 8001a7c:	e02e      	b.n	8001adc <HAL_RCC_OscConfig+0xd4>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10c      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x98>
 8001a86:	4b7b      	ldr	r3, [pc, #492]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a7a      	ldr	r2, [pc, #488]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a90:	6013      	str	r3, [r2, #0]
 8001a92:	4b78      	ldr	r3, [pc, #480]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a77      	ldr	r2, [pc, #476]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001a98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a9c:	6013      	str	r3, [r2, #0]
 8001a9e:	e01d      	b.n	8001adc <HAL_RCC_OscConfig+0xd4>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001aa8:	d10c      	bne.n	8001ac4 <HAL_RCC_OscConfig+0xbc>
 8001aaa:	4b72      	ldr	r3, [pc, #456]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a71      	ldr	r2, [pc, #452]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	4b6f      	ldr	r3, [pc, #444]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a6e      	ldr	r2, [pc, #440]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ac0:	6013      	str	r3, [r2, #0]
 8001ac2:	e00b      	b.n	8001adc <HAL_RCC_OscConfig+0xd4>
 8001ac4:	4b6b      	ldr	r3, [pc, #428]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a6a      	ldr	r2, [pc, #424]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001aca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ace:	6013      	str	r3, [r2, #0]
 8001ad0:	4b68      	ldr	r3, [pc, #416]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a67      	ldr	r2, [pc, #412]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001ad6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ada:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d013      	beq.n	8001b0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae4:	f7ff f880 	bl	8000be8 <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aec:	f7ff f87c 	bl	8000be8 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b64      	cmp	r3, #100	; 0x64
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e200      	b.n	8001f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001afe:	4b5d      	ldr	r3, [pc, #372]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d0f0      	beq.n	8001aec <HAL_RCC_OscConfig+0xe4>
 8001b0a:	e014      	b.n	8001b36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0c:	f7ff f86c 	bl	8000be8 <HAL_GetTick>
 8001b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b12:	e008      	b.n	8001b26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b14:	f7ff f868 	bl	8000be8 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b64      	cmp	r3, #100	; 0x64
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e1ec      	b.n	8001f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b26:	4b53      	ldr	r3, [pc, #332]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1f0      	bne.n	8001b14 <HAL_RCC_OscConfig+0x10c>
 8001b32:	e000      	b.n	8001b36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d063      	beq.n	8001c0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b42:	4b4c      	ldr	r3, [pc, #304]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f003 030c 	and.w	r3, r3, #12
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d00b      	beq.n	8001b66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b4e:	4b49      	ldr	r3, [pc, #292]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f003 030c 	and.w	r3, r3, #12
 8001b56:	2b08      	cmp	r3, #8
 8001b58:	d11c      	bne.n	8001b94 <HAL_RCC_OscConfig+0x18c>
 8001b5a:	4b46      	ldr	r3, [pc, #280]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d116      	bne.n	8001b94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b66:	4b43      	ldr	r3, [pc, #268]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d005      	beq.n	8001b7e <HAL_RCC_OscConfig+0x176>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d001      	beq.n	8001b7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e1c0      	b.n	8001f00 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b7e:	4b3d      	ldr	r3, [pc, #244]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	4939      	ldr	r1, [pc, #228]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b92:	e03a      	b.n	8001c0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d020      	beq.n	8001bde <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b9c:	4b36      	ldr	r3, [pc, #216]	; (8001c78 <HAL_RCC_OscConfig+0x270>)
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba2:	f7ff f821 	bl	8000be8 <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001baa:	f7ff f81d 	bl	8000be8 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e1a1      	b.n	8001f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bbc:	4b2d      	ldr	r3, [pc, #180]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d0f0      	beq.n	8001baa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc8:	4b2a      	ldr	r3, [pc, #168]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	695b      	ldr	r3, [r3, #20]
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	4927      	ldr	r1, [pc, #156]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	600b      	str	r3, [r1, #0]
 8001bdc:	e015      	b.n	8001c0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bde:	4b26      	ldr	r3, [pc, #152]	; (8001c78 <HAL_RCC_OscConfig+0x270>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be4:	f7ff f800 	bl	8000be8 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bec:	f7fe fffc 	bl	8000be8 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e180      	b.n	8001f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bfe:	4b1d      	ldr	r3, [pc, #116]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1f0      	bne.n	8001bec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0308 	and.w	r3, r3, #8
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d03a      	beq.n	8001c8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d019      	beq.n	8001c52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c1e:	4b17      	ldr	r3, [pc, #92]	; (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c24:	f7fe ffe0 	bl	8000be8 <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c2c:	f7fe ffdc 	bl	8000be8 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e160      	b.n	8001f00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c3e:	4b0d      	ldr	r3, [pc, #52]	; (8001c74 <HAL_RCC_OscConfig+0x26c>)
 8001c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d0f0      	beq.n	8001c2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c4a:	2001      	movs	r0, #1
 8001c4c:	f000 fac4 	bl	80021d8 <RCC_Delay>
 8001c50:	e01c      	b.n	8001c8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c52:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c58:	f7fe ffc6 	bl	8000be8 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c5e:	e00f      	b.n	8001c80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c60:	f7fe ffc2 	bl	8000be8 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d908      	bls.n	8001c80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e146      	b.n	8001f00 <HAL_RCC_OscConfig+0x4f8>
 8001c72:	bf00      	nop
 8001c74:	40021000 	.word	0x40021000
 8001c78:	42420000 	.word	0x42420000
 8001c7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c80:	4b92      	ldr	r3, [pc, #584]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d1e9      	bne.n	8001c60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f000 80a6 	beq.w	8001de6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c9e:	4b8b      	ldr	r3, [pc, #556]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d10d      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001caa:	4b88      	ldr	r3, [pc, #544]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	4a87      	ldr	r2, [pc, #540]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb4:	61d3      	str	r3, [r2, #28]
 8001cb6:	4b85      	ldr	r3, [pc, #532]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cbe:	60bb      	str	r3, [r7, #8]
 8001cc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc6:	4b82      	ldr	r3, [pc, #520]	; (8001ed0 <HAL_RCC_OscConfig+0x4c8>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d118      	bne.n	8001d04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cd2:	4b7f      	ldr	r3, [pc, #508]	; (8001ed0 <HAL_RCC_OscConfig+0x4c8>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a7e      	ldr	r2, [pc, #504]	; (8001ed0 <HAL_RCC_OscConfig+0x4c8>)
 8001cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cde:	f7fe ff83 	bl	8000be8 <HAL_GetTick>
 8001ce2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce4:	e008      	b.n	8001cf8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ce6:	f7fe ff7f 	bl	8000be8 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b64      	cmp	r3, #100	; 0x64
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e103      	b.n	8001f00 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf8:	4b75      	ldr	r3, [pc, #468]	; (8001ed0 <HAL_RCC_OscConfig+0x4c8>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d0f0      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d106      	bne.n	8001d1a <HAL_RCC_OscConfig+0x312>
 8001d0c:	4b6f      	ldr	r3, [pc, #444]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001d0e:	6a1b      	ldr	r3, [r3, #32]
 8001d10:	4a6e      	ldr	r2, [pc, #440]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001d12:	f043 0301 	orr.w	r3, r3, #1
 8001d16:	6213      	str	r3, [r2, #32]
 8001d18:	e02d      	b.n	8001d76 <HAL_RCC_OscConfig+0x36e>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d10c      	bne.n	8001d3c <HAL_RCC_OscConfig+0x334>
 8001d22:	4b6a      	ldr	r3, [pc, #424]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001d24:	6a1b      	ldr	r3, [r3, #32]
 8001d26:	4a69      	ldr	r2, [pc, #420]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001d28:	f023 0301 	bic.w	r3, r3, #1
 8001d2c:	6213      	str	r3, [r2, #32]
 8001d2e:	4b67      	ldr	r3, [pc, #412]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001d30:	6a1b      	ldr	r3, [r3, #32]
 8001d32:	4a66      	ldr	r2, [pc, #408]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001d34:	f023 0304 	bic.w	r3, r3, #4
 8001d38:	6213      	str	r3, [r2, #32]
 8001d3a:	e01c      	b.n	8001d76 <HAL_RCC_OscConfig+0x36e>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	2b05      	cmp	r3, #5
 8001d42:	d10c      	bne.n	8001d5e <HAL_RCC_OscConfig+0x356>
 8001d44:	4b61      	ldr	r3, [pc, #388]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001d46:	6a1b      	ldr	r3, [r3, #32]
 8001d48:	4a60      	ldr	r2, [pc, #384]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001d4a:	f043 0304 	orr.w	r3, r3, #4
 8001d4e:	6213      	str	r3, [r2, #32]
 8001d50:	4b5e      	ldr	r3, [pc, #376]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001d52:	6a1b      	ldr	r3, [r3, #32]
 8001d54:	4a5d      	ldr	r2, [pc, #372]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001d56:	f043 0301 	orr.w	r3, r3, #1
 8001d5a:	6213      	str	r3, [r2, #32]
 8001d5c:	e00b      	b.n	8001d76 <HAL_RCC_OscConfig+0x36e>
 8001d5e:	4b5b      	ldr	r3, [pc, #364]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001d60:	6a1b      	ldr	r3, [r3, #32]
 8001d62:	4a5a      	ldr	r2, [pc, #360]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001d64:	f023 0301 	bic.w	r3, r3, #1
 8001d68:	6213      	str	r3, [r2, #32]
 8001d6a:	4b58      	ldr	r3, [pc, #352]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001d6c:	6a1b      	ldr	r3, [r3, #32]
 8001d6e:	4a57      	ldr	r2, [pc, #348]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001d70:	f023 0304 	bic.w	r3, r3, #4
 8001d74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d015      	beq.n	8001daa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d7e:	f7fe ff33 	bl	8000be8 <HAL_GetTick>
 8001d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d84:	e00a      	b.n	8001d9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d86:	f7fe ff2f 	bl	8000be8 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d901      	bls.n	8001d9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e0b1      	b.n	8001f00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d9c:	4b4b      	ldr	r3, [pc, #300]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001d9e:	6a1b      	ldr	r3, [r3, #32]
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d0ee      	beq.n	8001d86 <HAL_RCC_OscConfig+0x37e>
 8001da8:	e014      	b.n	8001dd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001daa:	f7fe ff1d 	bl	8000be8 <HAL_GetTick>
 8001dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001db0:	e00a      	b.n	8001dc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001db2:	f7fe ff19 	bl	8000be8 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e09b      	b.n	8001f00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dc8:	4b40      	ldr	r3, [pc, #256]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001dca:	6a1b      	ldr	r3, [r3, #32]
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1ee      	bne.n	8001db2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001dd4:	7dfb      	ldrb	r3, [r7, #23]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d105      	bne.n	8001de6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dda:	4b3c      	ldr	r3, [pc, #240]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001ddc:	69db      	ldr	r3, [r3, #28]
 8001dde:	4a3b      	ldr	r2, [pc, #236]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001de0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001de4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	69db      	ldr	r3, [r3, #28]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 8087 	beq.w	8001efe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001df0:	4b36      	ldr	r3, [pc, #216]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 030c 	and.w	r3, r3, #12
 8001df8:	2b08      	cmp	r3, #8
 8001dfa:	d061      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	69db      	ldr	r3, [r3, #28]
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d146      	bne.n	8001e92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e04:	4b33      	ldr	r3, [pc, #204]	; (8001ed4 <HAL_RCC_OscConfig+0x4cc>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0a:	f7fe feed 	bl	8000be8 <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e12:	f7fe fee9 	bl	8000be8 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e06d      	b.n	8001f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e24:	4b29      	ldr	r3, [pc, #164]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1f0      	bne.n	8001e12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e38:	d108      	bne.n	8001e4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e3a:	4b24      	ldr	r3, [pc, #144]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	4921      	ldr	r1, [pc, #132]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e4c:	4b1f      	ldr	r3, [pc, #124]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a19      	ldr	r1, [r3, #32]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5c:	430b      	orrs	r3, r1
 8001e5e:	491b      	ldr	r1, [pc, #108]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e64:	4b1b      	ldr	r3, [pc, #108]	; (8001ed4 <HAL_RCC_OscConfig+0x4cc>)
 8001e66:	2201      	movs	r2, #1
 8001e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6a:	f7fe febd 	bl	8000be8 <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e70:	e008      	b.n	8001e84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e72:	f7fe feb9 	bl	8000be8 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e03d      	b.n	8001f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e84:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d0f0      	beq.n	8001e72 <HAL_RCC_OscConfig+0x46a>
 8001e90:	e035      	b.n	8001efe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e92:	4b10      	ldr	r3, [pc, #64]	; (8001ed4 <HAL_RCC_OscConfig+0x4cc>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e98:	f7fe fea6 	bl	8000be8 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea0:	f7fe fea2 	bl	8000be8 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e026      	b.n	8001f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eb2:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <HAL_RCC_OscConfig+0x4c4>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1f0      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x498>
 8001ebe:	e01e      	b.n	8001efe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	69db      	ldr	r3, [r3, #28]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d107      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e019      	b.n	8001f00 <HAL_RCC_OscConfig+0x4f8>
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	40007000 	.word	0x40007000
 8001ed4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ed8:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <HAL_RCC_OscConfig+0x500>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d106      	bne.n	8001efa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d001      	beq.n	8001efe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e000      	b.n	8001f00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3718      	adds	r7, #24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40021000 	.word	0x40021000

08001f0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e0d0      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f20:	4b6a      	ldr	r3, [pc, #424]	; (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0307 	and.w	r3, r3, #7
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d910      	bls.n	8001f50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f2e:	4b67      	ldr	r3, [pc, #412]	; (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f023 0207 	bic.w	r2, r3, #7
 8001f36:	4965      	ldr	r1, [pc, #404]	; (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f3e:	4b63      	ldr	r3, [pc, #396]	; (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d001      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e0b8      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d020      	beq.n	8001f9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d005      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f68:	4b59      	ldr	r3, [pc, #356]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	4a58      	ldr	r2, [pc, #352]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0308 	and.w	r3, r3, #8
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f80:	4b53      	ldr	r3, [pc, #332]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	4a52      	ldr	r2, [pc, #328]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f86:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f8c:	4b50      	ldr	r3, [pc, #320]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	494d      	ldr	r1, [pc, #308]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d040      	beq.n	800202c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d107      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fb2:	4b47      	ldr	r3, [pc, #284]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d115      	bne.n	8001fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e07f      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d107      	bne.n	8001fda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fca:	4b41      	ldr	r3, [pc, #260]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d109      	bne.n	8001fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e073      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fda:	4b3d      	ldr	r3, [pc, #244]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e06b      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fea:	4b39      	ldr	r3, [pc, #228]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f023 0203 	bic.w	r2, r3, #3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	4936      	ldr	r1, [pc, #216]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ffc:	f7fe fdf4 	bl	8000be8 <HAL_GetTick>
 8002000:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002002:	e00a      	b.n	800201a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002004:	f7fe fdf0 	bl	8000be8 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002012:	4293      	cmp	r3, r2
 8002014:	d901      	bls.n	800201a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e053      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800201a:	4b2d      	ldr	r3, [pc, #180]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f003 020c 	and.w	r2, r3, #12
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	429a      	cmp	r2, r3
 800202a:	d1eb      	bne.n	8002004 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800202c:	4b27      	ldr	r3, [pc, #156]	; (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0307 	and.w	r3, r3, #7
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	429a      	cmp	r2, r3
 8002038:	d210      	bcs.n	800205c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800203a:	4b24      	ldr	r3, [pc, #144]	; (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f023 0207 	bic.w	r2, r3, #7
 8002042:	4922      	ldr	r1, [pc, #136]	; (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	4313      	orrs	r3, r2
 8002048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800204a:	4b20      	ldr	r3, [pc, #128]	; (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	429a      	cmp	r2, r3
 8002056:	d001      	beq.n	800205c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e032      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0304 	and.w	r3, r3, #4
 8002064:	2b00      	cmp	r3, #0
 8002066:	d008      	beq.n	800207a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002068:	4b19      	ldr	r3, [pc, #100]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	4916      	ldr	r1, [pc, #88]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002076:	4313      	orrs	r3, r2
 8002078:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0308 	and.w	r3, r3, #8
 8002082:	2b00      	cmp	r3, #0
 8002084:	d009      	beq.n	800209a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002086:	4b12      	ldr	r3, [pc, #72]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	490e      	ldr	r1, [pc, #56]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002096:	4313      	orrs	r3, r2
 8002098:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800209a:	f000 f821 	bl	80020e0 <HAL_RCC_GetSysClockFreq>
 800209e:	4602      	mov	r2, r0
 80020a0:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	091b      	lsrs	r3, r3, #4
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	490a      	ldr	r1, [pc, #40]	; (80020d4 <HAL_RCC_ClockConfig+0x1c8>)
 80020ac:	5ccb      	ldrb	r3, [r1, r3]
 80020ae:	fa22 f303 	lsr.w	r3, r2, r3
 80020b2:	4a09      	ldr	r2, [pc, #36]	; (80020d8 <HAL_RCC_ClockConfig+0x1cc>)
 80020b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020b6:	4b09      	ldr	r3, [pc, #36]	; (80020dc <HAL_RCC_ClockConfig+0x1d0>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7fe fd52 	bl	8000b64 <HAL_InitTick>

  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40022000 	.word	0x40022000
 80020d0:	40021000 	.word	0x40021000
 80020d4:	08004cec 	.word	0x08004cec
 80020d8:	20000010 	.word	0x20000010
 80020dc:	20000014 	.word	0x20000014

080020e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020e0:	b490      	push	{r4, r7}
 80020e2:	b08a      	sub	sp, #40	; 0x28
 80020e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80020e6:	4b29      	ldr	r3, [pc, #164]	; (800218c <HAL_RCC_GetSysClockFreq+0xac>)
 80020e8:	1d3c      	adds	r4, r7, #4
 80020ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80020f0:	f240 2301 	movw	r3, #513	; 0x201
 80020f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	61fb      	str	r3, [r7, #28]
 80020fa:	2300      	movs	r3, #0
 80020fc:	61bb      	str	r3, [r7, #24]
 80020fe:	2300      	movs	r3, #0
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
 8002102:	2300      	movs	r3, #0
 8002104:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002106:	2300      	movs	r3, #0
 8002108:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800210a:	4b21      	ldr	r3, [pc, #132]	; (8002190 <HAL_RCC_GetSysClockFreq+0xb0>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	f003 030c 	and.w	r3, r3, #12
 8002116:	2b04      	cmp	r3, #4
 8002118:	d002      	beq.n	8002120 <HAL_RCC_GetSysClockFreq+0x40>
 800211a:	2b08      	cmp	r3, #8
 800211c:	d003      	beq.n	8002126 <HAL_RCC_GetSysClockFreq+0x46>
 800211e:	e02b      	b.n	8002178 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002120:	4b1c      	ldr	r3, [pc, #112]	; (8002194 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002122:	623b      	str	r3, [r7, #32]
      break;
 8002124:	e02b      	b.n	800217e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	0c9b      	lsrs	r3, r3, #18
 800212a:	f003 030f 	and.w	r3, r3, #15
 800212e:	3328      	adds	r3, #40	; 0x28
 8002130:	443b      	add	r3, r7
 8002132:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002136:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d012      	beq.n	8002168 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002142:	4b13      	ldr	r3, [pc, #76]	; (8002190 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	0c5b      	lsrs	r3, r3, #17
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	3328      	adds	r3, #40	; 0x28
 800214e:	443b      	add	r3, r7
 8002150:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002154:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	4a0e      	ldr	r2, [pc, #56]	; (8002194 <HAL_RCC_GetSysClockFreq+0xb4>)
 800215a:	fb03 f202 	mul.w	r2, r3, r2
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	fbb2 f3f3 	udiv	r3, r2, r3
 8002164:	627b      	str	r3, [r7, #36]	; 0x24
 8002166:	e004      	b.n	8002172 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	4a0b      	ldr	r2, [pc, #44]	; (8002198 <HAL_RCC_GetSysClockFreq+0xb8>)
 800216c:	fb02 f303 	mul.w	r3, r2, r3
 8002170:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002174:	623b      	str	r3, [r7, #32]
      break;
 8002176:	e002      	b.n	800217e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002178:	4b06      	ldr	r3, [pc, #24]	; (8002194 <HAL_RCC_GetSysClockFreq+0xb4>)
 800217a:	623b      	str	r3, [r7, #32]
      break;
 800217c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800217e:	6a3b      	ldr	r3, [r7, #32]
}
 8002180:	4618      	mov	r0, r3
 8002182:	3728      	adds	r7, #40	; 0x28
 8002184:	46bd      	mov	sp, r7
 8002186:	bc90      	pop	{r4, r7}
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	08004ca0 	.word	0x08004ca0
 8002190:	40021000 	.word	0x40021000
 8002194:	007a1200 	.word	0x007a1200
 8002198:	003d0900 	.word	0x003d0900

0800219c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021a0:	4b02      	ldr	r3, [pc, #8]	; (80021ac <HAL_RCC_GetHCLKFreq+0x10>)
 80021a2:	681b      	ldr	r3, [r3, #0]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bc80      	pop	{r7}
 80021aa:	4770      	bx	lr
 80021ac:	20000010 	.word	0x20000010

080021b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021b4:	f7ff fff2 	bl	800219c <HAL_RCC_GetHCLKFreq>
 80021b8:	4602      	mov	r2, r0
 80021ba:	4b05      	ldr	r3, [pc, #20]	; (80021d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	0a1b      	lsrs	r3, r3, #8
 80021c0:	f003 0307 	and.w	r3, r3, #7
 80021c4:	4903      	ldr	r1, [pc, #12]	; (80021d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021c6:	5ccb      	ldrb	r3, [r1, r3]
 80021c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40021000 	.word	0x40021000
 80021d4:	08004cfc 	.word	0x08004cfc

080021d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021e0:	4b0a      	ldr	r3, [pc, #40]	; (800220c <RCC_Delay+0x34>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a0a      	ldr	r2, [pc, #40]	; (8002210 <RCC_Delay+0x38>)
 80021e6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ea:	0a5b      	lsrs	r3, r3, #9
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	fb02 f303 	mul.w	r3, r2, r3
 80021f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021f4:	bf00      	nop
  }
  while (Delay --);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	1e5a      	subs	r2, r3, #1
 80021fa:	60fa      	str	r2, [r7, #12]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1f9      	bne.n	80021f4 <RCC_Delay+0x1c>
}
 8002200:	bf00      	nop
 8002202:	bf00      	nop
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr
 800220c:	20000010 	.word	0x20000010
 8002210:	10624dd3 	.word	0x10624dd3

08002214 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800221a:	f3ef 8305 	mrs	r3, IPSR
 800221e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002220:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002222:	2b00      	cmp	r3, #0
 8002224:	d10f      	bne.n	8002246 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002226:	f3ef 8310 	mrs	r3, PRIMASK
 800222a:	607b      	str	r3, [r7, #4]
  return(result);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d109      	bne.n	8002246 <osKernelInitialize+0x32>
 8002232:	4b10      	ldr	r3, [pc, #64]	; (8002274 <osKernelInitialize+0x60>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2b02      	cmp	r3, #2
 8002238:	d109      	bne.n	800224e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800223a:	f3ef 8311 	mrs	r3, BASEPRI
 800223e:	603b      	str	r3, [r7, #0]
  return(result);
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002246:	f06f 0305 	mvn.w	r3, #5
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	e00c      	b.n	8002268 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800224e:	4b09      	ldr	r3, [pc, #36]	; (8002274 <osKernelInitialize+0x60>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d105      	bne.n	8002262 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002256:	4b07      	ldr	r3, [pc, #28]	; (8002274 <osKernelInitialize+0x60>)
 8002258:	2201      	movs	r2, #1
 800225a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800225c:	2300      	movs	r3, #0
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	e002      	b.n	8002268 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002262:	f04f 33ff 	mov.w	r3, #4294967295
 8002266:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002268:	68fb      	ldr	r3, [r7, #12]
}
 800226a:	4618      	mov	r0, r3
 800226c:	3714      	adds	r7, #20
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr
 8002274:	200000a0 	.word	0x200000a0

08002278 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800227e:	f3ef 8305 	mrs	r3, IPSR
 8002282:	60bb      	str	r3, [r7, #8]
  return(result);
 8002284:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002286:	2b00      	cmp	r3, #0
 8002288:	d10f      	bne.n	80022aa <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800228a:	f3ef 8310 	mrs	r3, PRIMASK
 800228e:	607b      	str	r3, [r7, #4]
  return(result);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d109      	bne.n	80022aa <osKernelStart+0x32>
 8002296:	4b11      	ldr	r3, [pc, #68]	; (80022dc <osKernelStart+0x64>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2b02      	cmp	r3, #2
 800229c:	d109      	bne.n	80022b2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800229e:	f3ef 8311 	mrs	r3, BASEPRI
 80022a2:	603b      	str	r3, [r7, #0]
  return(result);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80022aa:	f06f 0305 	mvn.w	r3, #5
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	e00e      	b.n	80022d0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80022b2:	4b0a      	ldr	r3, [pc, #40]	; (80022dc <osKernelStart+0x64>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d107      	bne.n	80022ca <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80022ba:	4b08      	ldr	r3, [pc, #32]	; (80022dc <osKernelStart+0x64>)
 80022bc:	2202      	movs	r2, #2
 80022be:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80022c0:	f001 f816 	bl	80032f0 <vTaskStartScheduler>
      stat = osOK;
 80022c4:	2300      	movs	r3, #0
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	e002      	b.n	80022d0 <osKernelStart+0x58>
    } else {
      stat = osError;
 80022ca:	f04f 33ff 	mov.w	r3, #4294967295
 80022ce:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80022d0:	68fb      	ldr	r3, [r7, #12]
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	200000a0 	.word	0x200000a0

080022e0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b092      	sub	sp, #72	; 0x48
 80022e4:	af04      	add	r7, sp, #16
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022f0:	f3ef 8305 	mrs	r3, IPSR
 80022f4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f040 8094 	bne.w	8002426 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022fe:	f3ef 8310 	mrs	r3, PRIMASK
 8002302:	623b      	str	r3, [r7, #32]
  return(result);
 8002304:	6a3b      	ldr	r3, [r7, #32]
 8002306:	2b00      	cmp	r3, #0
 8002308:	f040 808d 	bne.w	8002426 <osThreadNew+0x146>
 800230c:	4b48      	ldr	r3, [pc, #288]	; (8002430 <osThreadNew+0x150>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2b02      	cmp	r3, #2
 8002312:	d106      	bne.n	8002322 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002314:	f3ef 8311 	mrs	r3, BASEPRI
 8002318:	61fb      	str	r3, [r7, #28]
  return(result);
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	2b00      	cmp	r3, #0
 800231e:	f040 8082 	bne.w	8002426 <osThreadNew+0x146>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d07e      	beq.n	8002426 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002328:	2380      	movs	r3, #128	; 0x80
 800232a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800232c:	2318      	movs	r3, #24
 800232e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002330:	2300      	movs	r3, #0
 8002332:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002334:	f107 031b 	add.w	r3, r7, #27
 8002338:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800233a:	f04f 33ff 	mov.w	r3, #4294967295
 800233e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d045      	beq.n	80023d2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d002      	beq.n	8002354 <osThreadNew+0x74>
        name = attr->name;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d002      	beq.n	8002362 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002364:	2b00      	cmp	r3, #0
 8002366:	d008      	beq.n	800237a <osThreadNew+0x9a>
 8002368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800236a:	2b38      	cmp	r3, #56	; 0x38
 800236c:	d805      	bhi.n	800237a <osThreadNew+0x9a>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <osThreadNew+0x9e>
        return (NULL);
 800237a:	2300      	movs	r3, #0
 800237c:	e054      	b.n	8002428 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	089b      	lsrs	r3, r3, #2
 800238c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00e      	beq.n	80023b4 <osThreadNew+0xd4>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	2b5b      	cmp	r3, #91	; 0x5b
 800239c:	d90a      	bls.n	80023b4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d006      	beq.n	80023b4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d002      	beq.n	80023b4 <osThreadNew+0xd4>
        mem = 1;
 80023ae:	2301      	movs	r3, #1
 80023b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80023b2:	e010      	b.n	80023d6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10c      	bne.n	80023d6 <osThreadNew+0xf6>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d108      	bne.n	80023d6 <osThreadNew+0xf6>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d104      	bne.n	80023d6 <osThreadNew+0xf6>
          mem = 0;
 80023cc:	2300      	movs	r3, #0
 80023ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80023d0:	e001      	b.n	80023d6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80023d2:	2300      	movs	r3, #0
 80023d4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80023d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d110      	bne.n	80023fe <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80023e4:	9202      	str	r2, [sp, #8]
 80023e6:	9301      	str	r3, [sp, #4]
 80023e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023f0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f000 fde4 	bl	8002fc0 <xTaskCreateStatic>
 80023f8:	4603      	mov	r3, r0
 80023fa:	617b      	str	r3, [r7, #20]
 80023fc:	e013      	b.n	8002426 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80023fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002400:	2b00      	cmp	r3, #0
 8002402:	d110      	bne.n	8002426 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002406:	b29a      	uxth	r2, r3
 8002408:	f107 0314 	add.w	r3, r7, #20
 800240c:	9301      	str	r3, [sp, #4]
 800240e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f000 fe2e 	bl	8003078 <xTaskCreate>
 800241c:	4603      	mov	r3, r0
 800241e:	2b01      	cmp	r3, #1
 8002420:	d001      	beq.n	8002426 <osThreadNew+0x146>
          hTask = NULL;
 8002422:	2300      	movs	r3, #0
 8002424:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002426:	697b      	ldr	r3, [r7, #20]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3738      	adds	r7, #56	; 0x38
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	200000a0 	.word	0x200000a0

08002434 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	4a06      	ldr	r2, [pc, #24]	; (800245c <vApplicationGetIdleTaskMemory+0x28>)
 8002444:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	4a05      	ldr	r2, [pc, #20]	; (8002460 <vApplicationGetIdleTaskMemory+0x2c>)
 800244a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2280      	movs	r2, #128	; 0x80
 8002450:	601a      	str	r2, [r3, #0]
}
 8002452:	bf00      	nop
 8002454:	3714      	adds	r7, #20
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr
 800245c:	200000a4 	.word	0x200000a4
 8002460:	20000100 	.word	0x20000100

08002464 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	4a07      	ldr	r2, [pc, #28]	; (8002490 <vApplicationGetTimerTaskMemory+0x2c>)
 8002474:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	4a06      	ldr	r2, [pc, #24]	; (8002494 <vApplicationGetTimerTaskMemory+0x30>)
 800247a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002482:	601a      	str	r2, [r3, #0]
}
 8002484:	bf00      	nop
 8002486:	3714      	adds	r7, #20
 8002488:	46bd      	mov	sp, r7
 800248a:	bc80      	pop	{r7}
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	20000300 	.word	0x20000300
 8002494:	2000035c 	.word	0x2000035c

08002498 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f103 0208 	add.w	r2, r3, #8
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f04f 32ff 	mov.w	r2, #4294967295
 80024b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f103 0208 	add.w	r2, r3, #8
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f103 0208 	add.w	r2, r3, #8
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bc80      	pop	{r7}
 80024d4:	4770      	bx	lr

080024d6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80024d6:	b480      	push	{r7}
 80024d8:	b083      	sub	sp, #12
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bc80      	pop	{r7}
 80024ec:	4770      	bx	lr

080024ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80024ee:	b480      	push	{r7}
 80024f0:	b085      	sub	sp, #20
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
 80024f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	1c5a      	adds	r2, r3, #1
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	601a      	str	r2, [r3, #0]
}
 800252a:	bf00      	nop
 800252c:	3714      	adds	r7, #20
 800252e:	46bd      	mov	sp, r7
 8002530:	bc80      	pop	{r7}
 8002532:	4770      	bx	lr

08002534 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800254a:	d103      	bne.n	8002554 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	60fb      	str	r3, [r7, #12]
 8002552:	e00c      	b.n	800256e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3308      	adds	r3, #8
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	e002      	b.n	8002562 <vListInsert+0x2e>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68ba      	ldr	r2, [r7, #8]
 800256a:	429a      	cmp	r2, r3
 800256c:	d2f6      	bcs.n	800255c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	1c5a      	adds	r2, r3, #1
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	601a      	str	r2, [r3, #0]
}
 800259a:	bf00      	nop
 800259c:	3714      	adds	r7, #20
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc80      	pop	{r7}
 80025a2:	4770      	bx	lr

080025a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	6892      	ldr	r2, [r2, #8]
 80025ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	6852      	ldr	r2, [r2, #4]
 80025c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d103      	bne.n	80025d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689a      	ldr	r2, [r3, #8]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	1e5a      	subs	r2, r3, #1
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3714      	adds	r7, #20
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bc80      	pop	{r7}
 80025f4:	4770      	bx	lr
	...

080025f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d10a      	bne.n	8002622 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800260c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002610:	f383 8811 	msr	BASEPRI, r3
 8002614:	f3bf 8f6f 	isb	sy
 8002618:	f3bf 8f4f 	dsb	sy
 800261c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800261e:	bf00      	nop
 8002620:	e7fe      	b.n	8002620 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002622:	f001 ff93 	bl	800454c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800262e:	68f9      	ldr	r1, [r7, #12]
 8002630:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002632:	fb01 f303 	mul.w	r3, r1, r3
 8002636:	441a      	add	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002652:	3b01      	subs	r3, #1
 8002654:	68f9      	ldr	r1, [r7, #12]
 8002656:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002658:	fb01 f303 	mul.w	r3, r1, r3
 800265c:	441a      	add	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	22ff      	movs	r2, #255	; 0xff
 8002666:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	22ff      	movs	r2, #255	; 0xff
 800266e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d114      	bne.n	80026a2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d01a      	beq.n	80026b6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	3310      	adds	r3, #16
 8002684:	4618      	mov	r0, r3
 8002686:	f001 f8bd 	bl	8003804 <xTaskRemoveFromEventList>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d012      	beq.n	80026b6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002690:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <xQueueGenericReset+0xcc>)
 8002692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	f3bf 8f4f 	dsb	sy
 800269c:	f3bf 8f6f 	isb	sy
 80026a0:	e009      	b.n	80026b6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	3310      	adds	r3, #16
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff fef6 	bl	8002498 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	3324      	adds	r3, #36	; 0x24
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff fef1 	bl	8002498 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80026b6:	f001 ff79 	bl	80045ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80026ba:	2301      	movs	r3, #1
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	e000ed04 	.word	0xe000ed04

080026c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b08e      	sub	sp, #56	; 0x38
 80026cc:	af02      	add	r7, sp, #8
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
 80026d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10a      	bne.n	80026f2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80026dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e0:	f383 8811 	msr	BASEPRI, r3
 80026e4:	f3bf 8f6f 	isb	sy
 80026e8:	f3bf 8f4f 	dsb	sy
 80026ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80026ee:	bf00      	nop
 80026f0:	e7fe      	b.n	80026f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d10a      	bne.n	800270e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80026f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026fc:	f383 8811 	msr	BASEPRI, r3
 8002700:	f3bf 8f6f 	isb	sy
 8002704:	f3bf 8f4f 	dsb	sy
 8002708:	627b      	str	r3, [r7, #36]	; 0x24
}
 800270a:	bf00      	nop
 800270c:	e7fe      	b.n	800270c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d002      	beq.n	800271a <xQueueGenericCreateStatic+0x52>
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <xQueueGenericCreateStatic+0x56>
 800271a:	2301      	movs	r3, #1
 800271c:	e000      	b.n	8002720 <xQueueGenericCreateStatic+0x58>
 800271e:	2300      	movs	r3, #0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d10a      	bne.n	800273a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002728:	f383 8811 	msr	BASEPRI, r3
 800272c:	f3bf 8f6f 	isb	sy
 8002730:	f3bf 8f4f 	dsb	sy
 8002734:	623b      	str	r3, [r7, #32]
}
 8002736:	bf00      	nop
 8002738:	e7fe      	b.n	8002738 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d102      	bne.n	8002746 <xQueueGenericCreateStatic+0x7e>
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <xQueueGenericCreateStatic+0x82>
 8002746:	2301      	movs	r3, #1
 8002748:	e000      	b.n	800274c <xQueueGenericCreateStatic+0x84>
 800274a:	2300      	movs	r3, #0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10a      	bne.n	8002766 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002754:	f383 8811 	msr	BASEPRI, r3
 8002758:	f3bf 8f6f 	isb	sy
 800275c:	f3bf 8f4f 	dsb	sy
 8002760:	61fb      	str	r3, [r7, #28]
}
 8002762:	bf00      	nop
 8002764:	e7fe      	b.n	8002764 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002766:	2350      	movs	r3, #80	; 0x50
 8002768:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	2b50      	cmp	r3, #80	; 0x50
 800276e:	d00a      	beq.n	8002786 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002774:	f383 8811 	msr	BASEPRI, r3
 8002778:	f3bf 8f6f 	isb	sy
 800277c:	f3bf 8f4f 	dsb	sy
 8002780:	61bb      	str	r3, [r7, #24]
}
 8002782:	bf00      	nop
 8002784:	e7fe      	b.n	8002784 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800278a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00d      	beq.n	80027ac <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002792:	2201      	movs	r2, #1
 8002794:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002798:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800279c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800279e:	9300      	str	r3, [sp, #0]
 80027a0:	4613      	mov	r3, r2
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	68b9      	ldr	r1, [r7, #8]
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f000 f805 	bl	80027b6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80027ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3730      	adds	r7, #48	; 0x30
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b084      	sub	sp, #16
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	60f8      	str	r0, [r7, #12]
 80027be:	60b9      	str	r1, [r7, #8]
 80027c0:	607a      	str	r2, [r7, #4]
 80027c2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d103      	bne.n	80027d2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	e002      	b.n	80027d8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	68ba      	ldr	r2, [r7, #8]
 80027e2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80027e4:	2101      	movs	r1, #1
 80027e6:	69b8      	ldr	r0, [r7, #24]
 80027e8:	f7ff ff06 	bl	80025f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	78fa      	ldrb	r2, [r7, #3]
 80027f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80027f4:	bf00      	nop
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b08e      	sub	sp, #56	; 0x38
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
 8002808:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800280a:	2300      	movs	r3, #0
 800280c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002814:	2b00      	cmp	r3, #0
 8002816:	d10a      	bne.n	800282e <xQueueGenericSend+0x32>
	__asm volatile
 8002818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800281c:	f383 8811 	msr	BASEPRI, r3
 8002820:	f3bf 8f6f 	isb	sy
 8002824:	f3bf 8f4f 	dsb	sy
 8002828:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800282a:	bf00      	nop
 800282c:	e7fe      	b.n	800282c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d103      	bne.n	800283c <xQueueGenericSend+0x40>
 8002834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002838:	2b00      	cmp	r3, #0
 800283a:	d101      	bne.n	8002840 <xQueueGenericSend+0x44>
 800283c:	2301      	movs	r3, #1
 800283e:	e000      	b.n	8002842 <xQueueGenericSend+0x46>
 8002840:	2300      	movs	r3, #0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10a      	bne.n	800285c <xQueueGenericSend+0x60>
	__asm volatile
 8002846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800284a:	f383 8811 	msr	BASEPRI, r3
 800284e:	f3bf 8f6f 	isb	sy
 8002852:	f3bf 8f4f 	dsb	sy
 8002856:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002858:	bf00      	nop
 800285a:	e7fe      	b.n	800285a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	2b02      	cmp	r3, #2
 8002860:	d103      	bne.n	800286a <xQueueGenericSend+0x6e>
 8002862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002866:	2b01      	cmp	r3, #1
 8002868:	d101      	bne.n	800286e <xQueueGenericSend+0x72>
 800286a:	2301      	movs	r3, #1
 800286c:	e000      	b.n	8002870 <xQueueGenericSend+0x74>
 800286e:	2300      	movs	r3, #0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d10a      	bne.n	800288a <xQueueGenericSend+0x8e>
	__asm volatile
 8002874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002878:	f383 8811 	msr	BASEPRI, r3
 800287c:	f3bf 8f6f 	isb	sy
 8002880:	f3bf 8f4f 	dsb	sy
 8002884:	623b      	str	r3, [r7, #32]
}
 8002886:	bf00      	nop
 8002888:	e7fe      	b.n	8002888 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800288a:	f001 f97d 	bl	8003b88 <xTaskGetSchedulerState>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d102      	bne.n	800289a <xQueueGenericSend+0x9e>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <xQueueGenericSend+0xa2>
 800289a:	2301      	movs	r3, #1
 800289c:	e000      	b.n	80028a0 <xQueueGenericSend+0xa4>
 800289e:	2300      	movs	r3, #0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d10a      	bne.n	80028ba <xQueueGenericSend+0xbe>
	__asm volatile
 80028a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a8:	f383 8811 	msr	BASEPRI, r3
 80028ac:	f3bf 8f6f 	isb	sy
 80028b0:	f3bf 8f4f 	dsb	sy
 80028b4:	61fb      	str	r3, [r7, #28]
}
 80028b6:	bf00      	nop
 80028b8:	e7fe      	b.n	80028b8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80028ba:	f001 fe47 	bl	800454c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80028be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d302      	bcc.n	80028d0 <xQueueGenericSend+0xd4>
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d129      	bne.n	8002924 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	68b9      	ldr	r1, [r7, #8]
 80028d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028d6:	f000 fa07 	bl	8002ce8 <prvCopyDataToQueue>
 80028da:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d010      	beq.n	8002906 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e6:	3324      	adds	r3, #36	; 0x24
 80028e8:	4618      	mov	r0, r3
 80028ea:	f000 ff8b 	bl	8003804 <xTaskRemoveFromEventList>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d013      	beq.n	800291c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80028f4:	4b3f      	ldr	r3, [pc, #252]	; (80029f4 <xQueueGenericSend+0x1f8>)
 80028f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	f3bf 8f4f 	dsb	sy
 8002900:	f3bf 8f6f 	isb	sy
 8002904:	e00a      	b.n	800291c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002908:	2b00      	cmp	r3, #0
 800290a:	d007      	beq.n	800291c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800290c:	4b39      	ldr	r3, [pc, #228]	; (80029f4 <xQueueGenericSend+0x1f8>)
 800290e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	f3bf 8f4f 	dsb	sy
 8002918:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800291c:	f001 fe46 	bl	80045ac <vPortExitCritical>
				return pdPASS;
 8002920:	2301      	movs	r3, #1
 8002922:	e063      	b.n	80029ec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d103      	bne.n	8002932 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800292a:	f001 fe3f 	bl	80045ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800292e:	2300      	movs	r3, #0
 8002930:	e05c      	b.n	80029ec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002934:	2b00      	cmp	r3, #0
 8002936:	d106      	bne.n	8002946 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002938:	f107 0314 	add.w	r3, r7, #20
 800293c:	4618      	mov	r0, r3
 800293e:	f000 ffc5 	bl	80038cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002942:	2301      	movs	r3, #1
 8002944:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002946:	f001 fe31 	bl	80045ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800294a:	f000 fd37 	bl	80033bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800294e:	f001 fdfd 	bl	800454c <vPortEnterCritical>
 8002952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002954:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002958:	b25b      	sxtb	r3, r3
 800295a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800295e:	d103      	bne.n	8002968 <xQueueGenericSend+0x16c>
 8002960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002962:	2200      	movs	r2, #0
 8002964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800296a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800296e:	b25b      	sxtb	r3, r3
 8002970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002974:	d103      	bne.n	800297e <xQueueGenericSend+0x182>
 8002976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002978:	2200      	movs	r2, #0
 800297a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800297e:	f001 fe15 	bl	80045ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002982:	1d3a      	adds	r2, r7, #4
 8002984:	f107 0314 	add.w	r3, r7, #20
 8002988:	4611      	mov	r1, r2
 800298a:	4618      	mov	r0, r3
 800298c:	f000 ffb4 	bl	80038f8 <xTaskCheckForTimeOut>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d124      	bne.n	80029e0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002996:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002998:	f000 fa9e 	bl	8002ed8 <prvIsQueueFull>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d018      	beq.n	80029d4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80029a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a4:	3310      	adds	r3, #16
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	4611      	mov	r1, r2
 80029aa:	4618      	mov	r0, r3
 80029ac:	f000 feda 	bl	8003764 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80029b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029b2:	f000 fa29 	bl	8002e08 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80029b6:	f000 fd0f 	bl	80033d8 <xTaskResumeAll>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f47f af7c 	bne.w	80028ba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80029c2:	4b0c      	ldr	r3, [pc, #48]	; (80029f4 <xQueueGenericSend+0x1f8>)
 80029c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	f3bf 8f4f 	dsb	sy
 80029ce:	f3bf 8f6f 	isb	sy
 80029d2:	e772      	b.n	80028ba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80029d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029d6:	f000 fa17 	bl	8002e08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80029da:	f000 fcfd 	bl	80033d8 <xTaskResumeAll>
 80029de:	e76c      	b.n	80028ba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80029e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029e2:	f000 fa11 	bl	8002e08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80029e6:	f000 fcf7 	bl	80033d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80029ea:	2300      	movs	r3, #0
		}
	}
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3738      	adds	r7, #56	; 0x38
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	e000ed04 	.word	0xe000ed04

080029f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b08e      	sub	sp, #56	; 0x38
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
 8002a04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10a      	bne.n	8002a26 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a14:	f383 8811 	msr	BASEPRI, r3
 8002a18:	f3bf 8f6f 	isb	sy
 8002a1c:	f3bf 8f4f 	dsb	sy
 8002a20:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002a22:	bf00      	nop
 8002a24:	e7fe      	b.n	8002a24 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d103      	bne.n	8002a34 <xQueueGenericSendFromISR+0x3c>
 8002a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <xQueueGenericSendFromISR+0x40>
 8002a34:	2301      	movs	r3, #1
 8002a36:	e000      	b.n	8002a3a <xQueueGenericSendFromISR+0x42>
 8002a38:	2300      	movs	r3, #0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10a      	bne.n	8002a54 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a42:	f383 8811 	msr	BASEPRI, r3
 8002a46:	f3bf 8f6f 	isb	sy
 8002a4a:	f3bf 8f4f 	dsb	sy
 8002a4e:	623b      	str	r3, [r7, #32]
}
 8002a50:	bf00      	nop
 8002a52:	e7fe      	b.n	8002a52 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d103      	bne.n	8002a62 <xQueueGenericSendFromISR+0x6a>
 8002a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d101      	bne.n	8002a66 <xQueueGenericSendFromISR+0x6e>
 8002a62:	2301      	movs	r3, #1
 8002a64:	e000      	b.n	8002a68 <xQueueGenericSendFromISR+0x70>
 8002a66:	2300      	movs	r3, #0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10a      	bne.n	8002a82 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a70:	f383 8811 	msr	BASEPRI, r3
 8002a74:	f3bf 8f6f 	isb	sy
 8002a78:	f3bf 8f4f 	dsb	sy
 8002a7c:	61fb      	str	r3, [r7, #28]
}
 8002a7e:	bf00      	nop
 8002a80:	e7fe      	b.n	8002a80 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002a82:	f001 fe25 	bl	80046d0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002a86:	f3ef 8211 	mrs	r2, BASEPRI
 8002a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a8e:	f383 8811 	msr	BASEPRI, r3
 8002a92:	f3bf 8f6f 	isb	sy
 8002a96:	f3bf 8f4f 	dsb	sy
 8002a9a:	61ba      	str	r2, [r7, #24]
 8002a9c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002a9e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d302      	bcc.n	8002ab4 <xQueueGenericSendFromISR+0xbc>
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d12c      	bne.n	8002b0e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002aba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	68b9      	ldr	r1, [r7, #8]
 8002ac2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ac4:	f000 f910 	bl	8002ce8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002ac8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad0:	d112      	bne.n	8002af8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d016      	beq.n	8002b08 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002adc:	3324      	adds	r3, #36	; 0x24
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f000 fe90 	bl	8003804 <xTaskRemoveFromEventList>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00e      	beq.n	8002b08 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00b      	beq.n	8002b08 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	e007      	b.n	8002b08 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002af8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002afc:	3301      	adds	r3, #1
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	b25a      	sxtb	r2, r3
 8002b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002b0c:	e001      	b.n	8002b12 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	637b      	str	r3, [r7, #52]	; 0x34
 8002b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b14:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002b1c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3738      	adds	r7, #56	; 0x38
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b08c      	sub	sp, #48	; 0x30
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002b34:	2300      	movs	r3, #0
 8002b36:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d10a      	bne.n	8002b58 <xQueueReceive+0x30>
	__asm volatile
 8002b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b46:	f383 8811 	msr	BASEPRI, r3
 8002b4a:	f3bf 8f6f 	isb	sy
 8002b4e:	f3bf 8f4f 	dsb	sy
 8002b52:	623b      	str	r3, [r7, #32]
}
 8002b54:	bf00      	nop
 8002b56:	e7fe      	b.n	8002b56 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d103      	bne.n	8002b66 <xQueueReceive+0x3e>
 8002b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <xQueueReceive+0x42>
 8002b66:	2301      	movs	r3, #1
 8002b68:	e000      	b.n	8002b6c <xQueueReceive+0x44>
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d10a      	bne.n	8002b86 <xQueueReceive+0x5e>
	__asm volatile
 8002b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b74:	f383 8811 	msr	BASEPRI, r3
 8002b78:	f3bf 8f6f 	isb	sy
 8002b7c:	f3bf 8f4f 	dsb	sy
 8002b80:	61fb      	str	r3, [r7, #28]
}
 8002b82:	bf00      	nop
 8002b84:	e7fe      	b.n	8002b84 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b86:	f000 ffff 	bl	8003b88 <xTaskGetSchedulerState>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d102      	bne.n	8002b96 <xQueueReceive+0x6e>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <xQueueReceive+0x72>
 8002b96:	2301      	movs	r3, #1
 8002b98:	e000      	b.n	8002b9c <xQueueReceive+0x74>
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d10a      	bne.n	8002bb6 <xQueueReceive+0x8e>
	__asm volatile
 8002ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba4:	f383 8811 	msr	BASEPRI, r3
 8002ba8:	f3bf 8f6f 	isb	sy
 8002bac:	f3bf 8f4f 	dsb	sy
 8002bb0:	61bb      	str	r3, [r7, #24]
}
 8002bb2:	bf00      	nop
 8002bb4:	e7fe      	b.n	8002bb4 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002bb6:	f001 fcc9 	bl	800454c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bbe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d01f      	beq.n	8002c06 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002bc6:	68b9      	ldr	r1, [r7, #8]
 8002bc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bca:	f000 f8f7 	bl	8002dbc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd0:	1e5a      	subs	r2, r3, #1
 8002bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00f      	beq.n	8002bfe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be0:	3310      	adds	r3, #16
 8002be2:	4618      	mov	r0, r3
 8002be4:	f000 fe0e 	bl	8003804 <xTaskRemoveFromEventList>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d007      	beq.n	8002bfe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002bee:	4b3d      	ldr	r3, [pc, #244]	; (8002ce4 <xQueueReceive+0x1bc>)
 8002bf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bf4:	601a      	str	r2, [r3, #0]
 8002bf6:	f3bf 8f4f 	dsb	sy
 8002bfa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002bfe:	f001 fcd5 	bl	80045ac <vPortExitCritical>
				return pdPASS;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e069      	b.n	8002cda <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d103      	bne.n	8002c14 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c0c:	f001 fcce 	bl	80045ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002c10:	2300      	movs	r3, #0
 8002c12:	e062      	b.n	8002cda <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d106      	bne.n	8002c28 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c1a:	f107 0310 	add.w	r3, r7, #16
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f000 fe54 	bl	80038cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c24:	2301      	movs	r3, #1
 8002c26:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c28:	f001 fcc0 	bl	80045ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c2c:	f000 fbc6 	bl	80033bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c30:	f001 fc8c 	bl	800454c <vPortEnterCritical>
 8002c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c3a:	b25b      	sxtb	r3, r3
 8002c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c40:	d103      	bne.n	8002c4a <xQueueReceive+0x122>
 8002c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c50:	b25b      	sxtb	r3, r3
 8002c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c56:	d103      	bne.n	8002c60 <xQueueReceive+0x138>
 8002c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c60:	f001 fca4 	bl	80045ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c64:	1d3a      	adds	r2, r7, #4
 8002c66:	f107 0310 	add.w	r3, r7, #16
 8002c6a:	4611      	mov	r1, r2
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f000 fe43 	bl	80038f8 <xTaskCheckForTimeOut>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d123      	bne.n	8002cc0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c7a:	f000 f917 	bl	8002eac <prvIsQueueEmpty>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d017      	beq.n	8002cb4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c86:	3324      	adds	r3, #36	; 0x24
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	4611      	mov	r1, r2
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f000 fd69 	bl	8003764 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002c92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c94:	f000 f8b8 	bl	8002e08 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002c98:	f000 fb9e 	bl	80033d8 <xTaskResumeAll>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d189      	bne.n	8002bb6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002ca2:	4b10      	ldr	r3, [pc, #64]	; (8002ce4 <xQueueReceive+0x1bc>)
 8002ca4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	f3bf 8f4f 	dsb	sy
 8002cae:	f3bf 8f6f 	isb	sy
 8002cb2:	e780      	b.n	8002bb6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002cb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cb6:	f000 f8a7 	bl	8002e08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002cba:	f000 fb8d 	bl	80033d8 <xTaskResumeAll>
 8002cbe:	e77a      	b.n	8002bb6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002cc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cc2:	f000 f8a1 	bl	8002e08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002cc6:	f000 fb87 	bl	80033d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002cca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ccc:	f000 f8ee 	bl	8002eac <prvIsQueueEmpty>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f43f af6f 	beq.w	8002bb6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002cd8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3730      	adds	r7, #48	; 0x30
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	e000ed04 	.word	0xe000ed04

08002ce8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10d      	bne.n	8002d22 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d14d      	bne.n	8002daa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f000 ff56 	bl	8003bc4 <xTaskPriorityDisinherit>
 8002d18:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	605a      	str	r2, [r3, #4]
 8002d20:	e043      	b.n	8002daa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d119      	bne.n	8002d5c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6898      	ldr	r0, [r3, #8]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d30:	461a      	mov	r2, r3
 8002d32:	68b9      	ldr	r1, [r7, #8]
 8002d34:	f001 ff20 	bl	8004b78 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	689a      	ldr	r2, [r3, #8]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d40:	441a      	add	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	689a      	ldr	r2, [r3, #8]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d32b      	bcc.n	8002daa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	609a      	str	r2, [r3, #8]
 8002d5a:	e026      	b.n	8002daa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	68d8      	ldr	r0, [r3, #12]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d64:	461a      	mov	r2, r3
 8002d66:	68b9      	ldr	r1, [r7, #8]
 8002d68:	f001 ff06 	bl	8004b78 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	68da      	ldr	r2, [r3, #12]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d74:	425b      	negs	r3, r3
 8002d76:	441a      	add	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	68da      	ldr	r2, [r3, #12]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d207      	bcs.n	8002d98 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d90:	425b      	negs	r3, r3
 8002d92:	441a      	add	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d105      	bne.n	8002daa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d002      	beq.n	8002daa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	3b01      	subs	r3, #1
 8002da8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1c5a      	adds	r2, r3, #1
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002db2:	697b      	ldr	r3, [r7, #20]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3718      	adds	r7, #24
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d018      	beq.n	8002e00 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68da      	ldr	r2, [r3, #12]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	441a      	add	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	68da      	ldr	r2, [r3, #12]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d303      	bcc.n	8002df0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68d9      	ldr	r1, [r3, #12]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df8:	461a      	mov	r2, r3
 8002dfa:	6838      	ldr	r0, [r7, #0]
 8002dfc:	f001 febc 	bl	8004b78 <memcpy>
	}
}
 8002e00:	bf00      	nop
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002e10:	f001 fb9c 	bl	800454c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e1a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e1c:	e011      	b.n	8002e42 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d012      	beq.n	8002e4c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	3324      	adds	r3, #36	; 0x24
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f000 fcea 	bl	8003804 <xTaskRemoveFromEventList>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002e36:	f000 fdc1 	bl	80039bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002e3a:	7bfb      	ldrb	r3, [r7, #15]
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	dce9      	bgt.n	8002e1e <prvUnlockQueue+0x16>
 8002e4a:	e000      	b.n	8002e4e <prvUnlockQueue+0x46>
					break;
 8002e4c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	22ff      	movs	r2, #255	; 0xff
 8002e52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002e56:	f001 fba9 	bl	80045ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002e5a:	f001 fb77 	bl	800454c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e64:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e66:	e011      	b.n	8002e8c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d012      	beq.n	8002e96 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3310      	adds	r3, #16
 8002e74:	4618      	mov	r0, r3
 8002e76:	f000 fcc5 	bl	8003804 <xTaskRemoveFromEventList>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002e80:	f000 fd9c 	bl	80039bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002e84:	7bbb      	ldrb	r3, [r7, #14]
 8002e86:	3b01      	subs	r3, #1
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	dce9      	bgt.n	8002e68 <prvUnlockQueue+0x60>
 8002e94:	e000      	b.n	8002e98 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002e96:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	22ff      	movs	r2, #255	; 0xff
 8002e9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002ea0:	f001 fb84 	bl	80045ac <vPortExitCritical>
}
 8002ea4:	bf00      	nop
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002eb4:	f001 fb4a 	bl	800454c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d102      	bne.n	8002ec6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	60fb      	str	r3, [r7, #12]
 8002ec4:	e001      	b.n	8002eca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002eca:	f001 fb6f 	bl	80045ac <vPortExitCritical>

	return xReturn;
 8002ece:	68fb      	ldr	r3, [r7, #12]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002ee0:	f001 fb34 	bl	800454c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d102      	bne.n	8002ef6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	60fb      	str	r3, [r7, #12]
 8002ef4:	e001      	b.n	8002efa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002efa:	f001 fb57 	bl	80045ac <vPortExitCritical>

	return xReturn;
 8002efe:	68fb      	ldr	r3, [r7, #12]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f12:	2300      	movs	r3, #0
 8002f14:	60fb      	str	r3, [r7, #12]
 8002f16:	e014      	b.n	8002f42 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002f18:	4a0e      	ldr	r2, [pc, #56]	; (8002f54 <vQueueAddToRegistry+0x4c>)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10b      	bne.n	8002f3c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002f24:	490b      	ldr	r1, [pc, #44]	; (8002f54 <vQueueAddToRegistry+0x4c>)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002f2e:	4a09      	ldr	r2, [pc, #36]	; (8002f54 <vQueueAddToRegistry+0x4c>)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	4413      	add	r3, r2
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002f3a:	e006      	b.n	8002f4a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2b07      	cmp	r3, #7
 8002f46:	d9e7      	bls.n	8002f18 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002f48:	bf00      	nop
 8002f4a:	bf00      	nop
 8002f4c:	3714      	adds	r7, #20
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr
 8002f54:	2000075c 	.word	0x2000075c

08002f58 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002f68:	f001 faf0 	bl	800454c <vPortEnterCritical>
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f72:	b25b      	sxtb	r3, r3
 8002f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f78:	d103      	bne.n	8002f82 <vQueueWaitForMessageRestricted+0x2a>
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f88:	b25b      	sxtb	r3, r3
 8002f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f8e:	d103      	bne.n	8002f98 <vQueueWaitForMessageRestricted+0x40>
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f98:	f001 fb08 	bl	80045ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d106      	bne.n	8002fb2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	3324      	adds	r3, #36	; 0x24
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	68b9      	ldr	r1, [r7, #8]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f000 fbfd 	bl	80037ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002fb2:	6978      	ldr	r0, [r7, #20]
 8002fb4:	f7ff ff28 	bl	8002e08 <prvUnlockQueue>
	}
 8002fb8:	bf00      	nop
 8002fba:	3718      	adds	r7, #24
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b08e      	sub	sp, #56	; 0x38
 8002fc4:	af04      	add	r7, sp, #16
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
 8002fcc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10a      	bne.n	8002fea <xTaskCreateStatic+0x2a>
	__asm volatile
 8002fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd8:	f383 8811 	msr	BASEPRI, r3
 8002fdc:	f3bf 8f6f 	isb	sy
 8002fe0:	f3bf 8f4f 	dsb	sy
 8002fe4:	623b      	str	r3, [r7, #32]
}
 8002fe6:	bf00      	nop
 8002fe8:	e7fe      	b.n	8002fe8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d10a      	bne.n	8003006 <xTaskCreateStatic+0x46>
	__asm volatile
 8002ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff4:	f383 8811 	msr	BASEPRI, r3
 8002ff8:	f3bf 8f6f 	isb	sy
 8002ffc:	f3bf 8f4f 	dsb	sy
 8003000:	61fb      	str	r3, [r7, #28]
}
 8003002:	bf00      	nop
 8003004:	e7fe      	b.n	8003004 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003006:	235c      	movs	r3, #92	; 0x5c
 8003008:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	2b5c      	cmp	r3, #92	; 0x5c
 800300e:	d00a      	beq.n	8003026 <xTaskCreateStatic+0x66>
	__asm volatile
 8003010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003014:	f383 8811 	msr	BASEPRI, r3
 8003018:	f3bf 8f6f 	isb	sy
 800301c:	f3bf 8f4f 	dsb	sy
 8003020:	61bb      	str	r3, [r7, #24]
}
 8003022:	bf00      	nop
 8003024:	e7fe      	b.n	8003024 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003028:	2b00      	cmp	r3, #0
 800302a:	d01e      	beq.n	800306a <xTaskCreateStatic+0xaa>
 800302c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800302e:	2b00      	cmp	r3, #0
 8003030:	d01b      	beq.n	800306a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003034:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800303a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800303c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303e:	2202      	movs	r2, #2
 8003040:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003044:	2300      	movs	r3, #0
 8003046:	9303      	str	r3, [sp, #12]
 8003048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304a:	9302      	str	r3, [sp, #8]
 800304c:	f107 0314 	add.w	r3, r7, #20
 8003050:	9301      	str	r3, [sp, #4]
 8003052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003054:	9300      	str	r3, [sp, #0]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	68b9      	ldr	r1, [r7, #8]
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	f000 f850 	bl	8003102 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003062:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003064:	f000 f8d4 	bl	8003210 <prvAddNewTaskToReadyList>
 8003068:	e001      	b.n	800306e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800306a:	2300      	movs	r3, #0
 800306c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800306e:	697b      	ldr	r3, [r7, #20]
	}
 8003070:	4618      	mov	r0, r3
 8003072:	3728      	adds	r7, #40	; 0x28
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003078:	b580      	push	{r7, lr}
 800307a:	b08c      	sub	sp, #48	; 0x30
 800307c:	af04      	add	r7, sp, #16
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	603b      	str	r3, [r7, #0]
 8003084:	4613      	mov	r3, r2
 8003086:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003088:	88fb      	ldrh	r3, [r7, #6]
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	4618      	mov	r0, r3
 800308e:	f001 fb5d 	bl	800474c <pvPortMalloc>
 8003092:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00e      	beq.n	80030b8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800309a:	205c      	movs	r0, #92	; 0x5c
 800309c:	f001 fb56 	bl	800474c <pvPortMalloc>
 80030a0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d003      	beq.n	80030b0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	631a      	str	r2, [r3, #48]	; 0x30
 80030ae:	e005      	b.n	80030bc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80030b0:	6978      	ldr	r0, [r7, #20]
 80030b2:	f001 fc0f 	bl	80048d4 <vPortFree>
 80030b6:	e001      	b.n	80030bc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80030b8:	2300      	movs	r3, #0
 80030ba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d017      	beq.n	80030f2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80030ca:	88fa      	ldrh	r2, [r7, #6]
 80030cc:	2300      	movs	r3, #0
 80030ce:	9303      	str	r3, [sp, #12]
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	9302      	str	r3, [sp, #8]
 80030d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d6:	9301      	str	r3, [sp, #4]
 80030d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	68b9      	ldr	r1, [r7, #8]
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f000 f80e 	bl	8003102 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80030e6:	69f8      	ldr	r0, [r7, #28]
 80030e8:	f000 f892 	bl	8003210 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80030ec:	2301      	movs	r3, #1
 80030ee:	61bb      	str	r3, [r7, #24]
 80030f0:	e002      	b.n	80030f8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80030f2:	f04f 33ff 	mov.w	r3, #4294967295
 80030f6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80030f8:	69bb      	ldr	r3, [r7, #24]
	}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3720      	adds	r7, #32
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b088      	sub	sp, #32
 8003106:	af00      	add	r7, sp, #0
 8003108:	60f8      	str	r0, [r7, #12]
 800310a:	60b9      	str	r1, [r7, #8]
 800310c:	607a      	str	r2, [r7, #4]
 800310e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003112:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	461a      	mov	r2, r3
 800311a:	21a5      	movs	r1, #165	; 0xa5
 800311c:	f001 fd3a 	bl	8004b94 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003122:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800312a:	3b01      	subs	r3, #1
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	4413      	add	r3, r2
 8003130:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	f023 0307 	bic.w	r3, r3, #7
 8003138:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	f003 0307 	and.w	r3, r3, #7
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00a      	beq.n	800315a <prvInitialiseNewTask+0x58>
	__asm volatile
 8003144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003148:	f383 8811 	msr	BASEPRI, r3
 800314c:	f3bf 8f6f 	isb	sy
 8003150:	f3bf 8f4f 	dsb	sy
 8003154:	617b      	str	r3, [r7, #20]
}
 8003156:	bf00      	nop
 8003158:	e7fe      	b.n	8003158 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800315a:	2300      	movs	r3, #0
 800315c:	61fb      	str	r3, [r7, #28]
 800315e:	e012      	b.n	8003186 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003160:	68ba      	ldr	r2, [r7, #8]
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	4413      	add	r3, r2
 8003166:	7819      	ldrb	r1, [r3, #0]
 8003168:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	4413      	add	r3, r2
 800316e:	3334      	adds	r3, #52	; 0x34
 8003170:	460a      	mov	r2, r1
 8003172:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003174:	68ba      	ldr	r2, [r7, #8]
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	4413      	add	r3, r2
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d006      	beq.n	800318e <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	3301      	adds	r3, #1
 8003184:	61fb      	str	r3, [r7, #28]
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	2b0f      	cmp	r3, #15
 800318a:	d9e9      	bls.n	8003160 <prvInitialiseNewTask+0x5e>
 800318c:	e000      	b.n	8003190 <prvInitialiseNewTask+0x8e>
		{
			break;
 800318e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800319a:	2b37      	cmp	r3, #55	; 0x37
 800319c:	d901      	bls.n	80031a2 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800319e:	2337      	movs	r3, #55	; 0x37
 80031a0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80031a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031a6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80031a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031ac:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80031ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b0:	2200      	movs	r2, #0
 80031b2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80031b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b6:	3304      	adds	r3, #4
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff f98c 	bl	80024d6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80031be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c0:	3318      	adds	r3, #24
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff f987 	bl	80024d6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80031c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031cc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80031d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80031d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031dc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80031de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e0:	2200      	movs	r2, #0
 80031e2:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80031e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	68f9      	ldr	r1, [r7, #12]
 80031f0:	69b8      	ldr	r0, [r7, #24]
 80031f2:	f001 f8bb 	bl	800436c <pxPortInitialiseStack>
 80031f6:	4602      	mov	r2, r0
 80031f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fa:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80031fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d002      	beq.n	8003208 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003204:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003206:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003208:	bf00      	nop
 800320a:	3720      	adds	r7, #32
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003218:	f001 f998 	bl	800454c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800321c:	4b2d      	ldr	r3, [pc, #180]	; (80032d4 <prvAddNewTaskToReadyList+0xc4>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	3301      	adds	r3, #1
 8003222:	4a2c      	ldr	r2, [pc, #176]	; (80032d4 <prvAddNewTaskToReadyList+0xc4>)
 8003224:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003226:	4b2c      	ldr	r3, [pc, #176]	; (80032d8 <prvAddNewTaskToReadyList+0xc8>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d109      	bne.n	8003242 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800322e:	4a2a      	ldr	r2, [pc, #168]	; (80032d8 <prvAddNewTaskToReadyList+0xc8>)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003234:	4b27      	ldr	r3, [pc, #156]	; (80032d4 <prvAddNewTaskToReadyList+0xc4>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d110      	bne.n	800325e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800323c:	f000 fbe2 	bl	8003a04 <prvInitialiseTaskLists>
 8003240:	e00d      	b.n	800325e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003242:	4b26      	ldr	r3, [pc, #152]	; (80032dc <prvAddNewTaskToReadyList+0xcc>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d109      	bne.n	800325e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800324a:	4b23      	ldr	r3, [pc, #140]	; (80032d8 <prvAddNewTaskToReadyList+0xc8>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003254:	429a      	cmp	r2, r3
 8003256:	d802      	bhi.n	800325e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003258:	4a1f      	ldr	r2, [pc, #124]	; (80032d8 <prvAddNewTaskToReadyList+0xc8>)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800325e:	4b20      	ldr	r3, [pc, #128]	; (80032e0 <prvAddNewTaskToReadyList+0xd0>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	3301      	adds	r3, #1
 8003264:	4a1e      	ldr	r2, [pc, #120]	; (80032e0 <prvAddNewTaskToReadyList+0xd0>)
 8003266:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003268:	4b1d      	ldr	r3, [pc, #116]	; (80032e0 <prvAddNewTaskToReadyList+0xd0>)
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003274:	4b1b      	ldr	r3, [pc, #108]	; (80032e4 <prvAddNewTaskToReadyList+0xd4>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	429a      	cmp	r2, r3
 800327a:	d903      	bls.n	8003284 <prvAddNewTaskToReadyList+0x74>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003280:	4a18      	ldr	r2, [pc, #96]	; (80032e4 <prvAddNewTaskToReadyList+0xd4>)
 8003282:	6013      	str	r3, [r2, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003288:	4613      	mov	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4413      	add	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4a15      	ldr	r2, [pc, #84]	; (80032e8 <prvAddNewTaskToReadyList+0xd8>)
 8003292:	441a      	add	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	3304      	adds	r3, #4
 8003298:	4619      	mov	r1, r3
 800329a:	4610      	mov	r0, r2
 800329c:	f7ff f927 	bl	80024ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80032a0:	f001 f984 	bl	80045ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80032a4:	4b0d      	ldr	r3, [pc, #52]	; (80032dc <prvAddNewTaskToReadyList+0xcc>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00e      	beq.n	80032ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80032ac:	4b0a      	ldr	r3, [pc, #40]	; (80032d8 <prvAddNewTaskToReadyList+0xc8>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d207      	bcs.n	80032ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80032ba:	4b0c      	ldr	r3, [pc, #48]	; (80032ec <prvAddNewTaskToReadyList+0xdc>)
 80032bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	f3bf 8f4f 	dsb	sy
 80032c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80032ca:	bf00      	nop
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	20000c70 	.word	0x20000c70
 80032d8:	2000079c 	.word	0x2000079c
 80032dc:	20000c7c 	.word	0x20000c7c
 80032e0:	20000c8c 	.word	0x20000c8c
 80032e4:	20000c78 	.word	0x20000c78
 80032e8:	200007a0 	.word	0x200007a0
 80032ec:	e000ed04 	.word	0xe000ed04

080032f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b08a      	sub	sp, #40	; 0x28
 80032f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80032f6:	2300      	movs	r3, #0
 80032f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80032fa:	2300      	movs	r3, #0
 80032fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80032fe:	463a      	mov	r2, r7
 8003300:	1d39      	adds	r1, r7, #4
 8003302:	f107 0308 	add.w	r3, r7, #8
 8003306:	4618      	mov	r0, r3
 8003308:	f7ff f894 	bl	8002434 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800330c:	6839      	ldr	r1, [r7, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68ba      	ldr	r2, [r7, #8]
 8003312:	9202      	str	r2, [sp, #8]
 8003314:	9301      	str	r3, [sp, #4]
 8003316:	2300      	movs	r3, #0
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	2300      	movs	r3, #0
 800331c:	460a      	mov	r2, r1
 800331e:	4921      	ldr	r1, [pc, #132]	; (80033a4 <vTaskStartScheduler+0xb4>)
 8003320:	4821      	ldr	r0, [pc, #132]	; (80033a8 <vTaskStartScheduler+0xb8>)
 8003322:	f7ff fe4d 	bl	8002fc0 <xTaskCreateStatic>
 8003326:	4603      	mov	r3, r0
 8003328:	4a20      	ldr	r2, [pc, #128]	; (80033ac <vTaskStartScheduler+0xbc>)
 800332a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800332c:	4b1f      	ldr	r3, [pc, #124]	; (80033ac <vTaskStartScheduler+0xbc>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d002      	beq.n	800333a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003334:	2301      	movs	r3, #1
 8003336:	617b      	str	r3, [r7, #20]
 8003338:	e001      	b.n	800333e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800333a:	2300      	movs	r3, #0
 800333c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d102      	bne.n	800334a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003344:	f000 fd00 	bl	8003d48 <xTimerCreateTimerTask>
 8003348:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d116      	bne.n	800337e <vTaskStartScheduler+0x8e>
	__asm volatile
 8003350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003354:	f383 8811 	msr	BASEPRI, r3
 8003358:	f3bf 8f6f 	isb	sy
 800335c:	f3bf 8f4f 	dsb	sy
 8003360:	613b      	str	r3, [r7, #16]
}
 8003362:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003364:	4b12      	ldr	r3, [pc, #72]	; (80033b0 <vTaskStartScheduler+0xc0>)
 8003366:	f04f 32ff 	mov.w	r2, #4294967295
 800336a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800336c:	4b11      	ldr	r3, [pc, #68]	; (80033b4 <vTaskStartScheduler+0xc4>)
 800336e:	2201      	movs	r2, #1
 8003370:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003372:	4b11      	ldr	r3, [pc, #68]	; (80033b8 <vTaskStartScheduler+0xc8>)
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003378:	f001 f876 	bl	8004468 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800337c:	e00e      	b.n	800339c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003384:	d10a      	bne.n	800339c <vTaskStartScheduler+0xac>
	__asm volatile
 8003386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800338a:	f383 8811 	msr	BASEPRI, r3
 800338e:	f3bf 8f6f 	isb	sy
 8003392:	f3bf 8f4f 	dsb	sy
 8003396:	60fb      	str	r3, [r7, #12]
}
 8003398:	bf00      	nop
 800339a:	e7fe      	b.n	800339a <vTaskStartScheduler+0xaa>
}
 800339c:	bf00      	nop
 800339e:	3718      	adds	r7, #24
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	08004cb0 	.word	0x08004cb0
 80033a8:	080039d5 	.word	0x080039d5
 80033ac:	20000c94 	.word	0x20000c94
 80033b0:	20000c90 	.word	0x20000c90
 80033b4:	20000c7c 	.word	0x20000c7c
 80033b8:	20000c74 	.word	0x20000c74

080033bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80033c0:	4b04      	ldr	r3, [pc, #16]	; (80033d4 <vTaskSuspendAll+0x18>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	3301      	adds	r3, #1
 80033c6:	4a03      	ldr	r2, [pc, #12]	; (80033d4 <vTaskSuspendAll+0x18>)
 80033c8:	6013      	str	r3, [r2, #0]
}
 80033ca:	bf00      	nop
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bc80      	pop	{r7}
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	20000c98 	.word	0x20000c98

080033d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80033de:	2300      	movs	r3, #0
 80033e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80033e2:	2300      	movs	r3, #0
 80033e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80033e6:	4b42      	ldr	r3, [pc, #264]	; (80034f0 <xTaskResumeAll+0x118>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10a      	bne.n	8003404 <xTaskResumeAll+0x2c>
	__asm volatile
 80033ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f2:	f383 8811 	msr	BASEPRI, r3
 80033f6:	f3bf 8f6f 	isb	sy
 80033fa:	f3bf 8f4f 	dsb	sy
 80033fe:	603b      	str	r3, [r7, #0]
}
 8003400:	bf00      	nop
 8003402:	e7fe      	b.n	8003402 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003404:	f001 f8a2 	bl	800454c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003408:	4b39      	ldr	r3, [pc, #228]	; (80034f0 <xTaskResumeAll+0x118>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	3b01      	subs	r3, #1
 800340e:	4a38      	ldr	r2, [pc, #224]	; (80034f0 <xTaskResumeAll+0x118>)
 8003410:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003412:	4b37      	ldr	r3, [pc, #220]	; (80034f0 <xTaskResumeAll+0x118>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d162      	bne.n	80034e0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800341a:	4b36      	ldr	r3, [pc, #216]	; (80034f4 <xTaskResumeAll+0x11c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d05e      	beq.n	80034e0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003422:	e02f      	b.n	8003484 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003424:	4b34      	ldr	r3, [pc, #208]	; (80034f8 <xTaskResumeAll+0x120>)
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	3318      	adds	r3, #24
 8003430:	4618      	mov	r0, r3
 8003432:	f7ff f8b7 	bl	80025a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	3304      	adds	r3, #4
 800343a:	4618      	mov	r0, r3
 800343c:	f7ff f8b2 	bl	80025a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003444:	4b2d      	ldr	r3, [pc, #180]	; (80034fc <xTaskResumeAll+0x124>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	429a      	cmp	r2, r3
 800344a:	d903      	bls.n	8003454 <xTaskResumeAll+0x7c>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003450:	4a2a      	ldr	r2, [pc, #168]	; (80034fc <xTaskResumeAll+0x124>)
 8003452:	6013      	str	r3, [r2, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003458:	4613      	mov	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4413      	add	r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	4a27      	ldr	r2, [pc, #156]	; (8003500 <xTaskResumeAll+0x128>)
 8003462:	441a      	add	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	3304      	adds	r3, #4
 8003468:	4619      	mov	r1, r3
 800346a:	4610      	mov	r0, r2
 800346c:	f7ff f83f 	bl	80024ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003474:	4b23      	ldr	r3, [pc, #140]	; (8003504 <xTaskResumeAll+0x12c>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347a:	429a      	cmp	r2, r3
 800347c:	d302      	bcc.n	8003484 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800347e:	4b22      	ldr	r3, [pc, #136]	; (8003508 <xTaskResumeAll+0x130>)
 8003480:	2201      	movs	r2, #1
 8003482:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003484:	4b1c      	ldr	r3, [pc, #112]	; (80034f8 <xTaskResumeAll+0x120>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1cb      	bne.n	8003424 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003492:	f000 fb55 	bl	8003b40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003496:	4b1d      	ldr	r3, [pc, #116]	; (800350c <xTaskResumeAll+0x134>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d010      	beq.n	80034c4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80034a2:	f000 f845 	bl	8003530 <xTaskIncrementTick>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d002      	beq.n	80034b2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80034ac:	4b16      	ldr	r3, [pc, #88]	; (8003508 <xTaskResumeAll+0x130>)
 80034ae:	2201      	movs	r2, #1
 80034b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	3b01      	subs	r3, #1
 80034b6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1f1      	bne.n	80034a2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80034be:	4b13      	ldr	r3, [pc, #76]	; (800350c <xTaskResumeAll+0x134>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80034c4:	4b10      	ldr	r3, [pc, #64]	; (8003508 <xTaskResumeAll+0x130>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d009      	beq.n	80034e0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80034cc:	2301      	movs	r3, #1
 80034ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80034d0:	4b0f      	ldr	r3, [pc, #60]	; (8003510 <xTaskResumeAll+0x138>)
 80034d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034d6:	601a      	str	r2, [r3, #0]
 80034d8:	f3bf 8f4f 	dsb	sy
 80034dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80034e0:	f001 f864 	bl	80045ac <vPortExitCritical>

	return xAlreadyYielded;
 80034e4:	68bb      	ldr	r3, [r7, #8]
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	20000c98 	.word	0x20000c98
 80034f4:	20000c70 	.word	0x20000c70
 80034f8:	20000c30 	.word	0x20000c30
 80034fc:	20000c78 	.word	0x20000c78
 8003500:	200007a0 	.word	0x200007a0
 8003504:	2000079c 	.word	0x2000079c
 8003508:	20000c84 	.word	0x20000c84
 800350c:	20000c80 	.word	0x20000c80
 8003510:	e000ed04 	.word	0xe000ed04

08003514 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800351a:	4b04      	ldr	r3, [pc, #16]	; (800352c <xTaskGetTickCount+0x18>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003520:	687b      	ldr	r3, [r7, #4]
}
 8003522:	4618      	mov	r0, r3
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	bc80      	pop	{r7}
 800352a:	4770      	bx	lr
 800352c:	20000c74 	.word	0x20000c74

08003530 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003536:	2300      	movs	r3, #0
 8003538:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800353a:	4b51      	ldr	r3, [pc, #324]	; (8003680 <xTaskIncrementTick+0x150>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	f040 808e 	bne.w	8003660 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003544:	4b4f      	ldr	r3, [pc, #316]	; (8003684 <xTaskIncrementTick+0x154>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	3301      	adds	r3, #1
 800354a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800354c:	4a4d      	ldr	r2, [pc, #308]	; (8003684 <xTaskIncrementTick+0x154>)
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d120      	bne.n	800359a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003558:	4b4b      	ldr	r3, [pc, #300]	; (8003688 <xTaskIncrementTick+0x158>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00a      	beq.n	8003578 <xTaskIncrementTick+0x48>
	__asm volatile
 8003562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003566:	f383 8811 	msr	BASEPRI, r3
 800356a:	f3bf 8f6f 	isb	sy
 800356e:	f3bf 8f4f 	dsb	sy
 8003572:	603b      	str	r3, [r7, #0]
}
 8003574:	bf00      	nop
 8003576:	e7fe      	b.n	8003576 <xTaskIncrementTick+0x46>
 8003578:	4b43      	ldr	r3, [pc, #268]	; (8003688 <xTaskIncrementTick+0x158>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	60fb      	str	r3, [r7, #12]
 800357e:	4b43      	ldr	r3, [pc, #268]	; (800368c <xTaskIncrementTick+0x15c>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a41      	ldr	r2, [pc, #260]	; (8003688 <xTaskIncrementTick+0x158>)
 8003584:	6013      	str	r3, [r2, #0]
 8003586:	4a41      	ldr	r2, [pc, #260]	; (800368c <xTaskIncrementTick+0x15c>)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6013      	str	r3, [r2, #0]
 800358c:	4b40      	ldr	r3, [pc, #256]	; (8003690 <xTaskIncrementTick+0x160>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	3301      	adds	r3, #1
 8003592:	4a3f      	ldr	r2, [pc, #252]	; (8003690 <xTaskIncrementTick+0x160>)
 8003594:	6013      	str	r3, [r2, #0]
 8003596:	f000 fad3 	bl	8003b40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800359a:	4b3e      	ldr	r3, [pc, #248]	; (8003694 <xTaskIncrementTick+0x164>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d34e      	bcc.n	8003642 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035a4:	4b38      	ldr	r3, [pc, #224]	; (8003688 <xTaskIncrementTick+0x158>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <xTaskIncrementTick+0x82>
 80035ae:	2301      	movs	r3, #1
 80035b0:	e000      	b.n	80035b4 <xTaskIncrementTick+0x84>
 80035b2:	2300      	movs	r3, #0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d004      	beq.n	80035c2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035b8:	4b36      	ldr	r3, [pc, #216]	; (8003694 <xTaskIncrementTick+0x164>)
 80035ba:	f04f 32ff 	mov.w	r2, #4294967295
 80035be:	601a      	str	r2, [r3, #0]
					break;
 80035c0:	e03f      	b.n	8003642 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80035c2:	4b31      	ldr	r3, [pc, #196]	; (8003688 <xTaskIncrementTick+0x158>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d203      	bcs.n	80035e2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80035da:	4a2e      	ldr	r2, [pc, #184]	; (8003694 <xTaskIncrementTick+0x164>)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6013      	str	r3, [r2, #0]
						break;
 80035e0:	e02f      	b.n	8003642 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	3304      	adds	r3, #4
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7fe ffdc 	bl	80025a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d004      	beq.n	80035fe <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	3318      	adds	r3, #24
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7fe ffd3 	bl	80025a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003602:	4b25      	ldr	r3, [pc, #148]	; (8003698 <xTaskIncrementTick+0x168>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	429a      	cmp	r2, r3
 8003608:	d903      	bls.n	8003612 <xTaskIncrementTick+0xe2>
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360e:	4a22      	ldr	r2, [pc, #136]	; (8003698 <xTaskIncrementTick+0x168>)
 8003610:	6013      	str	r3, [r2, #0]
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003616:	4613      	mov	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	4413      	add	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	4a1f      	ldr	r2, [pc, #124]	; (800369c <xTaskIncrementTick+0x16c>)
 8003620:	441a      	add	r2, r3
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	3304      	adds	r3, #4
 8003626:	4619      	mov	r1, r3
 8003628:	4610      	mov	r0, r2
 800362a:	f7fe ff60 	bl	80024ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003632:	4b1b      	ldr	r3, [pc, #108]	; (80036a0 <xTaskIncrementTick+0x170>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003638:	429a      	cmp	r2, r3
 800363a:	d3b3      	bcc.n	80035a4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800363c:	2301      	movs	r3, #1
 800363e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003640:	e7b0      	b.n	80035a4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003642:	4b17      	ldr	r3, [pc, #92]	; (80036a0 <xTaskIncrementTick+0x170>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003648:	4914      	ldr	r1, [pc, #80]	; (800369c <xTaskIncrementTick+0x16c>)
 800364a:	4613      	mov	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	440b      	add	r3, r1
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d907      	bls.n	800366a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800365a:	2301      	movs	r3, #1
 800365c:	617b      	str	r3, [r7, #20]
 800365e:	e004      	b.n	800366a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003660:	4b10      	ldr	r3, [pc, #64]	; (80036a4 <xTaskIncrementTick+0x174>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	3301      	adds	r3, #1
 8003666:	4a0f      	ldr	r2, [pc, #60]	; (80036a4 <xTaskIncrementTick+0x174>)
 8003668:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800366a:	4b0f      	ldr	r3, [pc, #60]	; (80036a8 <xTaskIncrementTick+0x178>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8003672:	2301      	movs	r3, #1
 8003674:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003676:	697b      	ldr	r3, [r7, #20]
}
 8003678:	4618      	mov	r0, r3
 800367a:	3718      	adds	r7, #24
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	20000c98 	.word	0x20000c98
 8003684:	20000c74 	.word	0x20000c74
 8003688:	20000c28 	.word	0x20000c28
 800368c:	20000c2c 	.word	0x20000c2c
 8003690:	20000c88 	.word	0x20000c88
 8003694:	20000c90 	.word	0x20000c90
 8003698:	20000c78 	.word	0x20000c78
 800369c:	200007a0 	.word	0x200007a0
 80036a0:	2000079c 	.word	0x2000079c
 80036a4:	20000c80 	.word	0x20000c80
 80036a8:	20000c84 	.word	0x20000c84

080036ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80036ac:	b480      	push	{r7}
 80036ae:	b085      	sub	sp, #20
 80036b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80036b2:	4b27      	ldr	r3, [pc, #156]	; (8003750 <vTaskSwitchContext+0xa4>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d003      	beq.n	80036c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80036ba:	4b26      	ldr	r3, [pc, #152]	; (8003754 <vTaskSwitchContext+0xa8>)
 80036bc:	2201      	movs	r2, #1
 80036be:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80036c0:	e041      	b.n	8003746 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80036c2:	4b24      	ldr	r3, [pc, #144]	; (8003754 <vTaskSwitchContext+0xa8>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80036c8:	4b23      	ldr	r3, [pc, #140]	; (8003758 <vTaskSwitchContext+0xac>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	60fb      	str	r3, [r7, #12]
 80036ce:	e010      	b.n	80036f2 <vTaskSwitchContext+0x46>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10a      	bne.n	80036ec <vTaskSwitchContext+0x40>
	__asm volatile
 80036d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036da:	f383 8811 	msr	BASEPRI, r3
 80036de:	f3bf 8f6f 	isb	sy
 80036e2:	f3bf 8f4f 	dsb	sy
 80036e6:	607b      	str	r3, [r7, #4]
}
 80036e8:	bf00      	nop
 80036ea:	e7fe      	b.n	80036ea <vTaskSwitchContext+0x3e>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	3b01      	subs	r3, #1
 80036f0:	60fb      	str	r3, [r7, #12]
 80036f2:	491a      	ldr	r1, [pc, #104]	; (800375c <vTaskSwitchContext+0xb0>)
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	4613      	mov	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4413      	add	r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	440b      	add	r3, r1
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d0e4      	beq.n	80036d0 <vTaskSwitchContext+0x24>
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	4613      	mov	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4a12      	ldr	r2, [pc, #72]	; (800375c <vTaskSwitchContext+0xb0>)
 8003712:	4413      	add	r3, r2
 8003714:	60bb      	str	r3, [r7, #8]
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	685a      	ldr	r2, [r3, #4]
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	605a      	str	r2, [r3, #4]
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	685a      	ldr	r2, [r3, #4]
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	3308      	adds	r3, #8
 8003728:	429a      	cmp	r2, r3
 800372a:	d104      	bne.n	8003736 <vTaskSwitchContext+0x8a>
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	605a      	str	r2, [r3, #4]
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	4a08      	ldr	r2, [pc, #32]	; (8003760 <vTaskSwitchContext+0xb4>)
 800373e:	6013      	str	r3, [r2, #0]
 8003740:	4a05      	ldr	r2, [pc, #20]	; (8003758 <vTaskSwitchContext+0xac>)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6013      	str	r3, [r2, #0]
}
 8003746:	bf00      	nop
 8003748:	3714      	adds	r7, #20
 800374a:	46bd      	mov	sp, r7
 800374c:	bc80      	pop	{r7}
 800374e:	4770      	bx	lr
 8003750:	20000c98 	.word	0x20000c98
 8003754:	20000c84 	.word	0x20000c84
 8003758:	20000c78 	.word	0x20000c78
 800375c:	200007a0 	.word	0x200007a0
 8003760:	2000079c 	.word	0x2000079c

08003764 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d10a      	bne.n	800378a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003778:	f383 8811 	msr	BASEPRI, r3
 800377c:	f3bf 8f6f 	isb	sy
 8003780:	f3bf 8f4f 	dsb	sy
 8003784:	60fb      	str	r3, [r7, #12]
}
 8003786:	bf00      	nop
 8003788:	e7fe      	b.n	8003788 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800378a:	4b07      	ldr	r3, [pc, #28]	; (80037a8 <vTaskPlaceOnEventList+0x44>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	3318      	adds	r3, #24
 8003790:	4619      	mov	r1, r3
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7fe fece 	bl	8002534 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003798:	2101      	movs	r1, #1
 800379a:	6838      	ldr	r0, [r7, #0]
 800379c:	f000 fa80 	bl	8003ca0 <prvAddCurrentTaskToDelayedList>
}
 80037a0:	bf00      	nop
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	2000079c 	.word	0x2000079c

080037ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10a      	bne.n	80037d4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80037be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c2:	f383 8811 	msr	BASEPRI, r3
 80037c6:	f3bf 8f6f 	isb	sy
 80037ca:	f3bf 8f4f 	dsb	sy
 80037ce:	617b      	str	r3, [r7, #20]
}
 80037d0:	bf00      	nop
 80037d2:	e7fe      	b.n	80037d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80037d4:	4b0a      	ldr	r3, [pc, #40]	; (8003800 <vTaskPlaceOnEventListRestricted+0x54>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	3318      	adds	r3, #24
 80037da:	4619      	mov	r1, r3
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f7fe fe86 	bl	80024ee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d002      	beq.n	80037ee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80037e8:	f04f 33ff 	mov.w	r3, #4294967295
 80037ec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80037ee:	6879      	ldr	r1, [r7, #4]
 80037f0:	68b8      	ldr	r0, [r7, #8]
 80037f2:	f000 fa55 	bl	8003ca0 <prvAddCurrentTaskToDelayedList>
	}
 80037f6:	bf00      	nop
 80037f8:	3718      	adds	r7, #24
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	2000079c 	.word	0x2000079c

08003804 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10a      	bne.n	8003830 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800381a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800381e:	f383 8811 	msr	BASEPRI, r3
 8003822:	f3bf 8f6f 	isb	sy
 8003826:	f3bf 8f4f 	dsb	sy
 800382a:	60fb      	str	r3, [r7, #12]
}
 800382c:	bf00      	nop
 800382e:	e7fe      	b.n	800382e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	3318      	adds	r3, #24
 8003834:	4618      	mov	r0, r3
 8003836:	f7fe feb5 	bl	80025a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800383a:	4b1e      	ldr	r3, [pc, #120]	; (80038b4 <xTaskRemoveFromEventList+0xb0>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d11d      	bne.n	800387e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	3304      	adds	r3, #4
 8003846:	4618      	mov	r0, r3
 8003848:	f7fe feac 	bl	80025a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003850:	4b19      	ldr	r3, [pc, #100]	; (80038b8 <xTaskRemoveFromEventList+0xb4>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	429a      	cmp	r2, r3
 8003856:	d903      	bls.n	8003860 <xTaskRemoveFromEventList+0x5c>
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385c:	4a16      	ldr	r2, [pc, #88]	; (80038b8 <xTaskRemoveFromEventList+0xb4>)
 800385e:	6013      	str	r3, [r2, #0]
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003864:	4613      	mov	r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	4413      	add	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	4a13      	ldr	r2, [pc, #76]	; (80038bc <xTaskRemoveFromEventList+0xb8>)
 800386e:	441a      	add	r2, r3
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	3304      	adds	r3, #4
 8003874:	4619      	mov	r1, r3
 8003876:	4610      	mov	r0, r2
 8003878:	f7fe fe39 	bl	80024ee <vListInsertEnd>
 800387c:	e005      	b.n	800388a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	3318      	adds	r3, #24
 8003882:	4619      	mov	r1, r3
 8003884:	480e      	ldr	r0, [pc, #56]	; (80038c0 <xTaskRemoveFromEventList+0xbc>)
 8003886:	f7fe fe32 	bl	80024ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800388e:	4b0d      	ldr	r3, [pc, #52]	; (80038c4 <xTaskRemoveFromEventList+0xc0>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	429a      	cmp	r2, r3
 8003896:	d905      	bls.n	80038a4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003898:	2301      	movs	r3, #1
 800389a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800389c:	4b0a      	ldr	r3, [pc, #40]	; (80038c8 <xTaskRemoveFromEventList+0xc4>)
 800389e:	2201      	movs	r2, #1
 80038a0:	601a      	str	r2, [r3, #0]
 80038a2:	e001      	b.n	80038a8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80038a4:	2300      	movs	r3, #0
 80038a6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80038a8:	697b      	ldr	r3, [r7, #20]
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3718      	adds	r7, #24
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	20000c98 	.word	0x20000c98
 80038b8:	20000c78 	.word	0x20000c78
 80038bc:	200007a0 	.word	0x200007a0
 80038c0:	20000c30 	.word	0x20000c30
 80038c4:	2000079c 	.word	0x2000079c
 80038c8:	20000c84 	.word	0x20000c84

080038cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80038d4:	4b06      	ldr	r3, [pc, #24]	; (80038f0 <vTaskInternalSetTimeOutState+0x24>)
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80038dc:	4b05      	ldr	r3, [pc, #20]	; (80038f4 <vTaskInternalSetTimeOutState+0x28>)
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	605a      	str	r2, [r3, #4]
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bc80      	pop	{r7}
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	20000c88 	.word	0x20000c88
 80038f4:	20000c74 	.word	0x20000c74

080038f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b088      	sub	sp, #32
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10a      	bne.n	800391e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800390c:	f383 8811 	msr	BASEPRI, r3
 8003910:	f3bf 8f6f 	isb	sy
 8003914:	f3bf 8f4f 	dsb	sy
 8003918:	613b      	str	r3, [r7, #16]
}
 800391a:	bf00      	nop
 800391c:	e7fe      	b.n	800391c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d10a      	bne.n	800393a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003928:	f383 8811 	msr	BASEPRI, r3
 800392c:	f3bf 8f6f 	isb	sy
 8003930:	f3bf 8f4f 	dsb	sy
 8003934:	60fb      	str	r3, [r7, #12]
}
 8003936:	bf00      	nop
 8003938:	e7fe      	b.n	8003938 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800393a:	f000 fe07 	bl	800454c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800393e:	4b1d      	ldr	r3, [pc, #116]	; (80039b4 <xTaskCheckForTimeOut+0xbc>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003956:	d102      	bne.n	800395e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003958:	2300      	movs	r3, #0
 800395a:	61fb      	str	r3, [r7, #28]
 800395c:	e023      	b.n	80039a6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	4b15      	ldr	r3, [pc, #84]	; (80039b8 <xTaskCheckForTimeOut+0xc0>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	429a      	cmp	r2, r3
 8003968:	d007      	beq.n	800397a <xTaskCheckForTimeOut+0x82>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	429a      	cmp	r2, r3
 8003972:	d302      	bcc.n	800397a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003974:	2301      	movs	r3, #1
 8003976:	61fb      	str	r3, [r7, #28]
 8003978:	e015      	b.n	80039a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	429a      	cmp	r2, r3
 8003982:	d20b      	bcs.n	800399c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	1ad2      	subs	r2, r2, r3
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f7ff ff9b 	bl	80038cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003996:	2300      	movs	r3, #0
 8003998:	61fb      	str	r3, [r7, #28]
 800399a:	e004      	b.n	80039a6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	2200      	movs	r2, #0
 80039a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80039a2:	2301      	movs	r3, #1
 80039a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80039a6:	f000 fe01 	bl	80045ac <vPortExitCritical>

	return xReturn;
 80039aa:	69fb      	ldr	r3, [r7, #28]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3720      	adds	r7, #32
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	20000c74 	.word	0x20000c74
 80039b8:	20000c88 	.word	0x20000c88

080039bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80039c0:	4b03      	ldr	r3, [pc, #12]	; (80039d0 <vTaskMissedYield+0x14>)
 80039c2:	2201      	movs	r2, #1
 80039c4:	601a      	str	r2, [r3, #0]
}
 80039c6:	bf00      	nop
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bc80      	pop	{r7}
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	20000c84 	.word	0x20000c84

080039d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80039dc:	f000 f852 	bl	8003a84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80039e0:	4b06      	ldr	r3, [pc, #24]	; (80039fc <prvIdleTask+0x28>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d9f9      	bls.n	80039dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80039e8:	4b05      	ldr	r3, [pc, #20]	; (8003a00 <prvIdleTask+0x2c>)
 80039ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	f3bf 8f4f 	dsb	sy
 80039f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80039f8:	e7f0      	b.n	80039dc <prvIdleTask+0x8>
 80039fa:	bf00      	nop
 80039fc:	200007a0 	.word	0x200007a0
 8003a00:	e000ed04 	.word	0xe000ed04

08003a04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	607b      	str	r3, [r7, #4]
 8003a0e:	e00c      	b.n	8003a2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	4613      	mov	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4a12      	ldr	r2, [pc, #72]	; (8003a64 <prvInitialiseTaskLists+0x60>)
 8003a1c:	4413      	add	r3, r2
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7fe fd3a 	bl	8002498 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	3301      	adds	r3, #1
 8003a28:	607b      	str	r3, [r7, #4]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2b37      	cmp	r3, #55	; 0x37
 8003a2e:	d9ef      	bls.n	8003a10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003a30:	480d      	ldr	r0, [pc, #52]	; (8003a68 <prvInitialiseTaskLists+0x64>)
 8003a32:	f7fe fd31 	bl	8002498 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003a36:	480d      	ldr	r0, [pc, #52]	; (8003a6c <prvInitialiseTaskLists+0x68>)
 8003a38:	f7fe fd2e 	bl	8002498 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003a3c:	480c      	ldr	r0, [pc, #48]	; (8003a70 <prvInitialiseTaskLists+0x6c>)
 8003a3e:	f7fe fd2b 	bl	8002498 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003a42:	480c      	ldr	r0, [pc, #48]	; (8003a74 <prvInitialiseTaskLists+0x70>)
 8003a44:	f7fe fd28 	bl	8002498 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003a48:	480b      	ldr	r0, [pc, #44]	; (8003a78 <prvInitialiseTaskLists+0x74>)
 8003a4a:	f7fe fd25 	bl	8002498 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003a4e:	4b0b      	ldr	r3, [pc, #44]	; (8003a7c <prvInitialiseTaskLists+0x78>)
 8003a50:	4a05      	ldr	r2, [pc, #20]	; (8003a68 <prvInitialiseTaskLists+0x64>)
 8003a52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a54:	4b0a      	ldr	r3, [pc, #40]	; (8003a80 <prvInitialiseTaskLists+0x7c>)
 8003a56:	4a05      	ldr	r2, [pc, #20]	; (8003a6c <prvInitialiseTaskLists+0x68>)
 8003a58:	601a      	str	r2, [r3, #0]
}
 8003a5a:	bf00      	nop
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	200007a0 	.word	0x200007a0
 8003a68:	20000c00 	.word	0x20000c00
 8003a6c:	20000c14 	.word	0x20000c14
 8003a70:	20000c30 	.word	0x20000c30
 8003a74:	20000c44 	.word	0x20000c44
 8003a78:	20000c5c 	.word	0x20000c5c
 8003a7c:	20000c28 	.word	0x20000c28
 8003a80:	20000c2c 	.word	0x20000c2c

08003a84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a8a:	e019      	b.n	8003ac0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003a8c:	f000 fd5e 	bl	800454c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003a90:	4b10      	ldr	r3, [pc, #64]	; (8003ad4 <prvCheckTasksWaitingTermination+0x50>)
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	3304      	adds	r3, #4
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7fe fd81 	bl	80025a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003aa2:	4b0d      	ldr	r3, [pc, #52]	; (8003ad8 <prvCheckTasksWaitingTermination+0x54>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	4a0b      	ldr	r2, [pc, #44]	; (8003ad8 <prvCheckTasksWaitingTermination+0x54>)
 8003aaa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003aac:	4b0b      	ldr	r3, [pc, #44]	; (8003adc <prvCheckTasksWaitingTermination+0x58>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	4a0a      	ldr	r2, [pc, #40]	; (8003adc <prvCheckTasksWaitingTermination+0x58>)
 8003ab4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003ab6:	f000 fd79 	bl	80045ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f810 	bl	8003ae0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ac0:	4b06      	ldr	r3, [pc, #24]	; (8003adc <prvCheckTasksWaitingTermination+0x58>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1e1      	bne.n	8003a8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003ac8:	bf00      	nop
 8003aca:	bf00      	nop
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	20000c44 	.word	0x20000c44
 8003ad8:	20000c70 	.word	0x20000c70
 8003adc:	20000c58 	.word	0x20000c58

08003ae0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d108      	bne.n	8003b04 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af6:	4618      	mov	r0, r3
 8003af8:	f000 feec 	bl	80048d4 <vPortFree>
				vPortFree( pxTCB );
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 fee9 	bl	80048d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003b02:	e018      	b.n	8003b36 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d103      	bne.n	8003b16 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 fee0 	bl	80048d4 <vPortFree>
	}
 8003b14:	e00f      	b.n	8003b36 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d00a      	beq.n	8003b36 <prvDeleteTCB+0x56>
	__asm volatile
 8003b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b24:	f383 8811 	msr	BASEPRI, r3
 8003b28:	f3bf 8f6f 	isb	sy
 8003b2c:	f3bf 8f4f 	dsb	sy
 8003b30:	60fb      	str	r3, [r7, #12]
}
 8003b32:	bf00      	nop
 8003b34:	e7fe      	b.n	8003b34 <prvDeleteTCB+0x54>
	}
 8003b36:	bf00      	nop
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
	...

08003b40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b46:	4b0e      	ldr	r3, [pc, #56]	; (8003b80 <prvResetNextTaskUnblockTime+0x40>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d101      	bne.n	8003b54 <prvResetNextTaskUnblockTime+0x14>
 8003b50:	2301      	movs	r3, #1
 8003b52:	e000      	b.n	8003b56 <prvResetNextTaskUnblockTime+0x16>
 8003b54:	2300      	movs	r3, #0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d004      	beq.n	8003b64 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003b5a:	4b0a      	ldr	r3, [pc, #40]	; (8003b84 <prvResetNextTaskUnblockTime+0x44>)
 8003b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b60:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003b62:	e008      	b.n	8003b76 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b64:	4b06      	ldr	r3, [pc, #24]	; (8003b80 <prvResetNextTaskUnblockTime+0x40>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	4a04      	ldr	r2, [pc, #16]	; (8003b84 <prvResetNextTaskUnblockTime+0x44>)
 8003b74:	6013      	str	r3, [r2, #0]
}
 8003b76:	bf00      	nop
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bc80      	pop	{r7}
 8003b7e:	4770      	bx	lr
 8003b80:	20000c28 	.word	0x20000c28
 8003b84:	20000c90 	.word	0x20000c90

08003b88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003b8e:	4b0b      	ldr	r3, [pc, #44]	; (8003bbc <xTaskGetSchedulerState+0x34>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d102      	bne.n	8003b9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003b96:	2301      	movs	r3, #1
 8003b98:	607b      	str	r3, [r7, #4]
 8003b9a:	e008      	b.n	8003bae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b9c:	4b08      	ldr	r3, [pc, #32]	; (8003bc0 <xTaskGetSchedulerState+0x38>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d102      	bne.n	8003baa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	607b      	str	r3, [r7, #4]
 8003ba8:	e001      	b.n	8003bae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003baa:	2300      	movs	r3, #0
 8003bac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003bae:	687b      	ldr	r3, [r7, #4]
	}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bc80      	pop	{r7}
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	20000c7c 	.word	0x20000c7c
 8003bc0:	20000c98 	.word	0x20000c98

08003bc4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d056      	beq.n	8003c88 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003bda:	4b2e      	ldr	r3, [pc, #184]	; (8003c94 <xTaskPriorityDisinherit+0xd0>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d00a      	beq.n	8003bfa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be8:	f383 8811 	msr	BASEPRI, r3
 8003bec:	f3bf 8f6f 	isb	sy
 8003bf0:	f3bf 8f4f 	dsb	sy
 8003bf4:	60fb      	str	r3, [r7, #12]
}
 8003bf6:	bf00      	nop
 8003bf8:	e7fe      	b.n	8003bf8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10a      	bne.n	8003c18 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c06:	f383 8811 	msr	BASEPRI, r3
 8003c0a:	f3bf 8f6f 	isb	sy
 8003c0e:	f3bf 8f4f 	dsb	sy
 8003c12:	60bb      	str	r3, [r7, #8]
}
 8003c14:	bf00      	nop
 8003c16:	e7fe      	b.n	8003c16 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c1c:	1e5a      	subs	r2, r3, #1
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d02c      	beq.n	8003c88 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d128      	bne.n	8003c88 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	3304      	adds	r3, #4
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7fe fcb2 	bl	80025a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c58:	4b0f      	ldr	r3, [pc, #60]	; (8003c98 <xTaskPriorityDisinherit+0xd4>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d903      	bls.n	8003c68 <xTaskPriorityDisinherit+0xa4>
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c64:	4a0c      	ldr	r2, [pc, #48]	; (8003c98 <xTaskPriorityDisinherit+0xd4>)
 8003c66:	6013      	str	r3, [r2, #0]
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	4413      	add	r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	4a09      	ldr	r2, [pc, #36]	; (8003c9c <xTaskPriorityDisinherit+0xd8>)
 8003c76:	441a      	add	r2, r3
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	3304      	adds	r3, #4
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	4610      	mov	r0, r2
 8003c80:	f7fe fc35 	bl	80024ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003c84:	2301      	movs	r3, #1
 8003c86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003c88:	697b      	ldr	r3, [r7, #20]
	}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3718      	adds	r7, #24
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	2000079c 	.word	0x2000079c
 8003c98:	20000c78 	.word	0x20000c78
 8003c9c:	200007a0 	.word	0x200007a0

08003ca0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003caa:	4b21      	ldr	r3, [pc, #132]	; (8003d30 <prvAddCurrentTaskToDelayedList+0x90>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003cb0:	4b20      	ldr	r3, [pc, #128]	; (8003d34 <prvAddCurrentTaskToDelayedList+0x94>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	3304      	adds	r3, #4
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7fe fc74 	bl	80025a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc2:	d10a      	bne.n	8003cda <prvAddCurrentTaskToDelayedList+0x3a>
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d007      	beq.n	8003cda <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cca:	4b1a      	ldr	r3, [pc, #104]	; (8003d34 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	3304      	adds	r3, #4
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	4819      	ldr	r0, [pc, #100]	; (8003d38 <prvAddCurrentTaskToDelayedList+0x98>)
 8003cd4:	f7fe fc0b 	bl	80024ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003cd8:	e026      	b.n	8003d28 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4413      	add	r3, r2
 8003ce0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003ce2:	4b14      	ldr	r3, [pc, #80]	; (8003d34 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68ba      	ldr	r2, [r7, #8]
 8003ce8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003cea:	68ba      	ldr	r2, [r7, #8]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d209      	bcs.n	8003d06 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cf2:	4b12      	ldr	r3, [pc, #72]	; (8003d3c <prvAddCurrentTaskToDelayedList+0x9c>)
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	4b0f      	ldr	r3, [pc, #60]	; (8003d34 <prvAddCurrentTaskToDelayedList+0x94>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	3304      	adds	r3, #4
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	4610      	mov	r0, r2
 8003d00:	f7fe fc18 	bl	8002534 <vListInsert>
}
 8003d04:	e010      	b.n	8003d28 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d06:	4b0e      	ldr	r3, [pc, #56]	; (8003d40 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	4b0a      	ldr	r3, [pc, #40]	; (8003d34 <prvAddCurrentTaskToDelayedList+0x94>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	3304      	adds	r3, #4
 8003d10:	4619      	mov	r1, r3
 8003d12:	4610      	mov	r0, r2
 8003d14:	f7fe fc0e 	bl	8002534 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003d18:	4b0a      	ldr	r3, [pc, #40]	; (8003d44 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68ba      	ldr	r2, [r7, #8]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d202      	bcs.n	8003d28 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003d22:	4a08      	ldr	r2, [pc, #32]	; (8003d44 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	6013      	str	r3, [r2, #0]
}
 8003d28:	bf00      	nop
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	20000c74 	.word	0x20000c74
 8003d34:	2000079c 	.word	0x2000079c
 8003d38:	20000c5c 	.word	0x20000c5c
 8003d3c:	20000c2c 	.word	0x20000c2c
 8003d40:	20000c28 	.word	0x20000c28
 8003d44:	20000c90 	.word	0x20000c90

08003d48 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b08a      	sub	sp, #40	; 0x28
 8003d4c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003d52:	f000 facb 	bl	80042ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003d56:	4b1c      	ldr	r3, [pc, #112]	; (8003dc8 <xTimerCreateTimerTask+0x80>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d021      	beq.n	8003da2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003d62:	2300      	movs	r3, #0
 8003d64:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003d66:	1d3a      	adds	r2, r7, #4
 8003d68:	f107 0108 	add.w	r1, r7, #8
 8003d6c:	f107 030c 	add.w	r3, r7, #12
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7fe fb77 	bl	8002464 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003d76:	6879      	ldr	r1, [r7, #4]
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	9202      	str	r2, [sp, #8]
 8003d7e:	9301      	str	r3, [sp, #4]
 8003d80:	2302      	movs	r3, #2
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	2300      	movs	r3, #0
 8003d86:	460a      	mov	r2, r1
 8003d88:	4910      	ldr	r1, [pc, #64]	; (8003dcc <xTimerCreateTimerTask+0x84>)
 8003d8a:	4811      	ldr	r0, [pc, #68]	; (8003dd0 <xTimerCreateTimerTask+0x88>)
 8003d8c:	f7ff f918 	bl	8002fc0 <xTaskCreateStatic>
 8003d90:	4603      	mov	r3, r0
 8003d92:	4a10      	ldr	r2, [pc, #64]	; (8003dd4 <xTimerCreateTimerTask+0x8c>)
 8003d94:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003d96:	4b0f      	ldr	r3, [pc, #60]	; (8003dd4 <xTimerCreateTimerTask+0x8c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10a      	bne.n	8003dbe <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dac:	f383 8811 	msr	BASEPRI, r3
 8003db0:	f3bf 8f6f 	isb	sy
 8003db4:	f3bf 8f4f 	dsb	sy
 8003db8:	613b      	str	r3, [r7, #16]
}
 8003dba:	bf00      	nop
 8003dbc:	e7fe      	b.n	8003dbc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003dbe:	697b      	ldr	r3, [r7, #20]
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3718      	adds	r7, #24
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	20000ccc 	.word	0x20000ccc
 8003dcc:	08004cb8 	.word	0x08004cb8
 8003dd0:	08003ef5 	.word	0x08003ef5
 8003dd4:	20000cd0 	.word	0x20000cd0

08003dd8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b08a      	sub	sp, #40	; 0x28
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
 8003de4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003de6:	2300      	movs	r3, #0
 8003de8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d10a      	bne.n	8003e06 <xTimerGenericCommand+0x2e>
	__asm volatile
 8003df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df4:	f383 8811 	msr	BASEPRI, r3
 8003df8:	f3bf 8f6f 	isb	sy
 8003dfc:	f3bf 8f4f 	dsb	sy
 8003e00:	623b      	str	r3, [r7, #32]
}
 8003e02:	bf00      	nop
 8003e04:	e7fe      	b.n	8003e04 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003e06:	4b1a      	ldr	r3, [pc, #104]	; (8003e70 <xTimerGenericCommand+0x98>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d02a      	beq.n	8003e64 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	2b05      	cmp	r3, #5
 8003e1e:	dc18      	bgt.n	8003e52 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003e20:	f7ff feb2 	bl	8003b88 <xTaskGetSchedulerState>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d109      	bne.n	8003e3e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003e2a:	4b11      	ldr	r3, [pc, #68]	; (8003e70 <xTimerGenericCommand+0x98>)
 8003e2c:	6818      	ldr	r0, [r3, #0]
 8003e2e:	f107 0110 	add.w	r1, r7, #16
 8003e32:	2300      	movs	r3, #0
 8003e34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e36:	f7fe fce1 	bl	80027fc <xQueueGenericSend>
 8003e3a:	6278      	str	r0, [r7, #36]	; 0x24
 8003e3c:	e012      	b.n	8003e64 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003e3e:	4b0c      	ldr	r3, [pc, #48]	; (8003e70 <xTimerGenericCommand+0x98>)
 8003e40:	6818      	ldr	r0, [r3, #0]
 8003e42:	f107 0110 	add.w	r1, r7, #16
 8003e46:	2300      	movs	r3, #0
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f7fe fcd7 	bl	80027fc <xQueueGenericSend>
 8003e4e:	6278      	str	r0, [r7, #36]	; 0x24
 8003e50:	e008      	b.n	8003e64 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003e52:	4b07      	ldr	r3, [pc, #28]	; (8003e70 <xTimerGenericCommand+0x98>)
 8003e54:	6818      	ldr	r0, [r3, #0]
 8003e56:	f107 0110 	add.w	r1, r7, #16
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	683a      	ldr	r2, [r7, #0]
 8003e5e:	f7fe fdcb 	bl	80029f8 <xQueueGenericSendFromISR>
 8003e62:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3728      	adds	r7, #40	; 0x28
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	20000ccc 	.word	0x20000ccc

08003e74 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b088      	sub	sp, #32
 8003e78:	af02      	add	r7, sp, #8
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e7e:	4b1c      	ldr	r3, [pc, #112]	; (8003ef0 <prvProcessExpiredTimer+0x7c>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	3304      	adds	r3, #4
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7fe fb89 	bl	80025a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	69db      	ldr	r3, [r3, #28]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d122      	bne.n	8003ee0 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	699a      	ldr	r2, [r3, #24]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	18d1      	adds	r1, r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	683a      	ldr	r2, [r7, #0]
 8003ea6:	6978      	ldr	r0, [r7, #20]
 8003ea8:	f000 f8c8 	bl	800403c <prvInsertTimerInActiveList>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d016      	beq.n	8003ee0 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	9300      	str	r3, [sp, #0]
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	2100      	movs	r1, #0
 8003ebc:	6978      	ldr	r0, [r7, #20]
 8003ebe:	f7ff ff8b 	bl	8003dd8 <xTimerGenericCommand>
 8003ec2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10a      	bne.n	8003ee0 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8003eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ece:	f383 8811 	msr	BASEPRI, r3
 8003ed2:	f3bf 8f6f 	isb	sy
 8003ed6:	f3bf 8f4f 	dsb	sy
 8003eda:	60fb      	str	r3, [r7, #12]
}
 8003edc:	bf00      	nop
 8003ede:	e7fe      	b.n	8003ede <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee4:	6978      	ldr	r0, [r7, #20]
 8003ee6:	4798      	blx	r3
}
 8003ee8:	bf00      	nop
 8003eea:	3718      	adds	r7, #24
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	20000cc4 	.word	0x20000cc4

08003ef4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003efc:	f107 0308 	add.w	r3, r7, #8
 8003f00:	4618      	mov	r0, r3
 8003f02:	f000 f857 	bl	8003fb4 <prvGetNextExpireTime>
 8003f06:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f000 f803 	bl	8003f18 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003f12:	f000 f8d5 	bl	80040c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003f16:	e7f1      	b.n	8003efc <prvTimerTask+0x8>

08003f18 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003f22:	f7ff fa4b 	bl	80033bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003f26:	f107 0308 	add.w	r3, r7, #8
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f000 f866 	bl	8003ffc <prvSampleTimeNow>
 8003f30:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d130      	bne.n	8003f9a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10a      	bne.n	8003f54 <prvProcessTimerOrBlockTask+0x3c>
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d806      	bhi.n	8003f54 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003f46:	f7ff fa47 	bl	80033d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003f4a:	68f9      	ldr	r1, [r7, #12]
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f7ff ff91 	bl	8003e74 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003f52:	e024      	b.n	8003f9e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d008      	beq.n	8003f6c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003f5a:	4b13      	ldr	r3, [pc, #76]	; (8003fa8 <prvProcessTimerOrBlockTask+0x90>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	bf0c      	ite	eq
 8003f64:	2301      	moveq	r3, #1
 8003f66:	2300      	movne	r3, #0
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003f6c:	4b0f      	ldr	r3, [pc, #60]	; (8003fac <prvProcessTimerOrBlockTask+0x94>)
 8003f6e:	6818      	ldr	r0, [r3, #0]
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	683a      	ldr	r2, [r7, #0]
 8003f78:	4619      	mov	r1, r3
 8003f7a:	f7fe ffed 	bl	8002f58 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003f7e:	f7ff fa2b 	bl	80033d8 <xTaskResumeAll>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10a      	bne.n	8003f9e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003f88:	4b09      	ldr	r3, [pc, #36]	; (8003fb0 <prvProcessTimerOrBlockTask+0x98>)
 8003f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	f3bf 8f4f 	dsb	sy
 8003f94:	f3bf 8f6f 	isb	sy
}
 8003f98:	e001      	b.n	8003f9e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003f9a:	f7ff fa1d 	bl	80033d8 <xTaskResumeAll>
}
 8003f9e:	bf00      	nop
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	20000cc8 	.word	0x20000cc8
 8003fac:	20000ccc 	.word	0x20000ccc
 8003fb0:	e000ed04 	.word	0xe000ed04

08003fb4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003fbc:	4b0e      	ldr	r3, [pc, #56]	; (8003ff8 <prvGetNextExpireTime+0x44>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	bf0c      	ite	eq
 8003fc6:	2301      	moveq	r3, #1
 8003fc8:	2300      	movne	r3, #0
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	461a      	mov	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d105      	bne.n	8003fe6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003fda:	4b07      	ldr	r3, [pc, #28]	; (8003ff8 <prvGetNextExpireTime+0x44>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	60fb      	str	r3, [r7, #12]
 8003fe4:	e001      	b.n	8003fea <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003fea:	68fb      	ldr	r3, [r7, #12]
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3714      	adds	r7, #20
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bc80      	pop	{r7}
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	20000cc4 	.word	0x20000cc4

08003ffc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004004:	f7ff fa86 	bl	8003514 <xTaskGetTickCount>
 8004008:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800400a:	4b0b      	ldr	r3, [pc, #44]	; (8004038 <prvSampleTimeNow+0x3c>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	429a      	cmp	r2, r3
 8004012:	d205      	bcs.n	8004020 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004014:	f000 f908 	bl	8004228 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	601a      	str	r2, [r3, #0]
 800401e:	e002      	b.n	8004026 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004026:	4a04      	ldr	r2, [pc, #16]	; (8004038 <prvSampleTimeNow+0x3c>)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800402c:	68fb      	ldr	r3, [r7, #12]
}
 800402e:	4618      	mov	r0, r3
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	20000cd4 	.word	0x20000cd4

0800403c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b086      	sub	sp, #24
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
 8004048:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800404a:	2300      	movs	r3, #0
 800404c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800405a:	68ba      	ldr	r2, [r7, #8]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	429a      	cmp	r2, r3
 8004060:	d812      	bhi.n	8004088 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	1ad2      	subs	r2, r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	429a      	cmp	r2, r3
 800406e:	d302      	bcc.n	8004076 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004070:	2301      	movs	r3, #1
 8004072:	617b      	str	r3, [r7, #20]
 8004074:	e01b      	b.n	80040ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004076:	4b10      	ldr	r3, [pc, #64]	; (80040b8 <prvInsertTimerInActiveList+0x7c>)
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	3304      	adds	r3, #4
 800407e:	4619      	mov	r1, r3
 8004080:	4610      	mov	r0, r2
 8004082:	f7fe fa57 	bl	8002534 <vListInsert>
 8004086:	e012      	b.n	80040ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	429a      	cmp	r2, r3
 800408e:	d206      	bcs.n	800409e <prvInsertTimerInActiveList+0x62>
 8004090:	68ba      	ldr	r2, [r7, #8]
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	429a      	cmp	r2, r3
 8004096:	d302      	bcc.n	800409e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004098:	2301      	movs	r3, #1
 800409a:	617b      	str	r3, [r7, #20]
 800409c:	e007      	b.n	80040ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800409e:	4b07      	ldr	r3, [pc, #28]	; (80040bc <prvInsertTimerInActiveList+0x80>)
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	3304      	adds	r3, #4
 80040a6:	4619      	mov	r1, r3
 80040a8:	4610      	mov	r0, r2
 80040aa:	f7fe fa43 	bl	8002534 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80040ae:	697b      	ldr	r3, [r7, #20]
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3718      	adds	r7, #24
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	20000cc8 	.word	0x20000cc8
 80040bc:	20000cc4 	.word	0x20000cc4

080040c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b08e      	sub	sp, #56	; 0x38
 80040c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80040c6:	e09d      	b.n	8004204 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	da18      	bge.n	8004100 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80040ce:	1d3b      	adds	r3, r7, #4
 80040d0:	3304      	adds	r3, #4
 80040d2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80040d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10a      	bne.n	80040f0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80040da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040de:	f383 8811 	msr	BASEPRI, r3
 80040e2:	f3bf 8f6f 	isb	sy
 80040e6:	f3bf 8f4f 	dsb	sy
 80040ea:	61fb      	str	r3, [r7, #28]
}
 80040ec:	bf00      	nop
 80040ee:	e7fe      	b.n	80040ee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80040f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040f6:	6850      	ldr	r0, [r2, #4]
 80040f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040fa:	6892      	ldr	r2, [r2, #8]
 80040fc:	4611      	mov	r1, r2
 80040fe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	db7d      	blt.n	8004202 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800410a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d004      	beq.n	800411c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004114:	3304      	adds	r3, #4
 8004116:	4618      	mov	r0, r3
 8004118:	f7fe fa44 	bl	80025a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800411c:	463b      	mov	r3, r7
 800411e:	4618      	mov	r0, r3
 8004120:	f7ff ff6c 	bl	8003ffc <prvSampleTimeNow>
 8004124:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2b09      	cmp	r3, #9
 800412a:	d86b      	bhi.n	8004204 <prvProcessReceivedCommands+0x144>
 800412c:	a201      	add	r2, pc, #4	; (adr r2, 8004134 <prvProcessReceivedCommands+0x74>)
 800412e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004132:	bf00      	nop
 8004134:	0800415d 	.word	0x0800415d
 8004138:	0800415d 	.word	0x0800415d
 800413c:	0800415d 	.word	0x0800415d
 8004140:	08004205 	.word	0x08004205
 8004144:	080041b9 	.word	0x080041b9
 8004148:	080041f1 	.word	0x080041f1
 800414c:	0800415d 	.word	0x0800415d
 8004150:	0800415d 	.word	0x0800415d
 8004154:	08004205 	.word	0x08004205
 8004158:	080041b9 	.word	0x080041b9
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800415c:	68ba      	ldr	r2, [r7, #8]
 800415e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	18d1      	adds	r1, r2, r3
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004168:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800416a:	f7ff ff67 	bl	800403c <prvInsertTimerInActiveList>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d047      	beq.n	8004204 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004178:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800417a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800417c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417e:	69db      	ldr	r3, [r3, #28]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d13f      	bne.n	8004204 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	441a      	add	r2, r3
 800418c:	2300      	movs	r3, #0
 800418e:	9300      	str	r3, [sp, #0]
 8004190:	2300      	movs	r3, #0
 8004192:	2100      	movs	r1, #0
 8004194:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004196:	f7ff fe1f 	bl	8003dd8 <xTimerGenericCommand>
 800419a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800419c:	6a3b      	ldr	r3, [r7, #32]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d130      	bne.n	8004204 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80041a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a6:	f383 8811 	msr	BASEPRI, r3
 80041aa:	f3bf 8f6f 	isb	sy
 80041ae:	f3bf 8f4f 	dsb	sy
 80041b2:	61bb      	str	r3, [r7, #24]
}
 80041b4:	bf00      	nop
 80041b6:	e7fe      	b.n	80041b6 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80041b8:	68ba      	ldr	r2, [r7, #8]
 80041ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041bc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80041be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10a      	bne.n	80041dc <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80041c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ca:	f383 8811 	msr	BASEPRI, r3
 80041ce:	f3bf 8f6f 	isb	sy
 80041d2:	f3bf 8f4f 	dsb	sy
 80041d6:	617b      	str	r3, [r7, #20]
}
 80041d8:	bf00      	nop
 80041da:	e7fe      	b.n	80041da <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80041dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041de:	699a      	ldr	r2, [r3, #24]
 80041e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e2:	18d1      	adds	r1, r2, r3
 80041e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041ea:	f7ff ff27 	bl	800403c <prvInsertTimerInActiveList>
					break;
 80041ee:	e009      	b.n	8004204 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80041f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d104      	bne.n	8004204 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80041fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041fc:	f000 fb6a 	bl	80048d4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004200:	e000      	b.n	8004204 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004202:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004204:	4b07      	ldr	r3, [pc, #28]	; (8004224 <prvProcessReceivedCommands+0x164>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	1d39      	adds	r1, r7, #4
 800420a:	2200      	movs	r2, #0
 800420c:	4618      	mov	r0, r3
 800420e:	f7fe fc8b 	bl	8002b28 <xQueueReceive>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	f47f af57 	bne.w	80040c8 <prvProcessReceivedCommands+0x8>
	}
}
 800421a:	bf00      	nop
 800421c:	bf00      	nop
 800421e:	3730      	adds	r7, #48	; 0x30
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	20000ccc 	.word	0x20000ccc

08004228 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b088      	sub	sp, #32
 800422c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800422e:	e045      	b.n	80042bc <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004230:	4b2c      	ldr	r3, [pc, #176]	; (80042e4 <prvSwitchTimerLists+0xbc>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800423a:	4b2a      	ldr	r3, [pc, #168]	; (80042e4 <prvSwitchTimerLists+0xbc>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	3304      	adds	r3, #4
 8004248:	4618      	mov	r0, r3
 800424a:	f7fe f9ab 	bl	80025a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	69db      	ldr	r3, [r3, #28]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d12e      	bne.n	80042bc <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	4413      	add	r3, r2
 8004266:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004268:	68ba      	ldr	r2, [r7, #8]
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	429a      	cmp	r2, r3
 800426e:	d90e      	bls.n	800428e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	68ba      	ldr	r2, [r7, #8]
 8004274:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800427c:	4b19      	ldr	r3, [pc, #100]	; (80042e4 <prvSwitchTimerLists+0xbc>)
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	3304      	adds	r3, #4
 8004284:	4619      	mov	r1, r3
 8004286:	4610      	mov	r0, r2
 8004288:	f7fe f954 	bl	8002534 <vListInsert>
 800428c:	e016      	b.n	80042bc <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800428e:	2300      	movs	r3, #0
 8004290:	9300      	str	r3, [sp, #0]
 8004292:	2300      	movs	r3, #0
 8004294:	693a      	ldr	r2, [r7, #16]
 8004296:	2100      	movs	r1, #0
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f7ff fd9d 	bl	8003dd8 <xTimerGenericCommand>
 800429e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10a      	bne.n	80042bc <prvSwitchTimerLists+0x94>
	__asm volatile
 80042a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042aa:	f383 8811 	msr	BASEPRI, r3
 80042ae:	f3bf 8f6f 	isb	sy
 80042b2:	f3bf 8f4f 	dsb	sy
 80042b6:	603b      	str	r3, [r7, #0]
}
 80042b8:	bf00      	nop
 80042ba:	e7fe      	b.n	80042ba <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80042bc:	4b09      	ldr	r3, [pc, #36]	; (80042e4 <prvSwitchTimerLists+0xbc>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1b4      	bne.n	8004230 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80042c6:	4b07      	ldr	r3, [pc, #28]	; (80042e4 <prvSwitchTimerLists+0xbc>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80042cc:	4b06      	ldr	r3, [pc, #24]	; (80042e8 <prvSwitchTimerLists+0xc0>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a04      	ldr	r2, [pc, #16]	; (80042e4 <prvSwitchTimerLists+0xbc>)
 80042d2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80042d4:	4a04      	ldr	r2, [pc, #16]	; (80042e8 <prvSwitchTimerLists+0xc0>)
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	6013      	str	r3, [r2, #0]
}
 80042da:	bf00      	nop
 80042dc:	3718      	adds	r7, #24
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	20000cc4 	.word	0x20000cc4
 80042e8:	20000cc8 	.word	0x20000cc8

080042ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80042f2:	f000 f92b 	bl	800454c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80042f6:	4b15      	ldr	r3, [pc, #84]	; (800434c <prvCheckForValidListAndQueue+0x60>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d120      	bne.n	8004340 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80042fe:	4814      	ldr	r0, [pc, #80]	; (8004350 <prvCheckForValidListAndQueue+0x64>)
 8004300:	f7fe f8ca 	bl	8002498 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004304:	4813      	ldr	r0, [pc, #76]	; (8004354 <prvCheckForValidListAndQueue+0x68>)
 8004306:	f7fe f8c7 	bl	8002498 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800430a:	4b13      	ldr	r3, [pc, #76]	; (8004358 <prvCheckForValidListAndQueue+0x6c>)
 800430c:	4a10      	ldr	r2, [pc, #64]	; (8004350 <prvCheckForValidListAndQueue+0x64>)
 800430e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004310:	4b12      	ldr	r3, [pc, #72]	; (800435c <prvCheckForValidListAndQueue+0x70>)
 8004312:	4a10      	ldr	r2, [pc, #64]	; (8004354 <prvCheckForValidListAndQueue+0x68>)
 8004314:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004316:	2300      	movs	r3, #0
 8004318:	9300      	str	r3, [sp, #0]
 800431a:	4b11      	ldr	r3, [pc, #68]	; (8004360 <prvCheckForValidListAndQueue+0x74>)
 800431c:	4a11      	ldr	r2, [pc, #68]	; (8004364 <prvCheckForValidListAndQueue+0x78>)
 800431e:	2110      	movs	r1, #16
 8004320:	200a      	movs	r0, #10
 8004322:	f7fe f9d1 	bl	80026c8 <xQueueGenericCreateStatic>
 8004326:	4603      	mov	r3, r0
 8004328:	4a08      	ldr	r2, [pc, #32]	; (800434c <prvCheckForValidListAndQueue+0x60>)
 800432a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800432c:	4b07      	ldr	r3, [pc, #28]	; (800434c <prvCheckForValidListAndQueue+0x60>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d005      	beq.n	8004340 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004334:	4b05      	ldr	r3, [pc, #20]	; (800434c <prvCheckForValidListAndQueue+0x60>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	490b      	ldr	r1, [pc, #44]	; (8004368 <prvCheckForValidListAndQueue+0x7c>)
 800433a:	4618      	mov	r0, r3
 800433c:	f7fe fde4 	bl	8002f08 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004340:	f000 f934 	bl	80045ac <vPortExitCritical>
}
 8004344:	bf00      	nop
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	20000ccc 	.word	0x20000ccc
 8004350:	20000c9c 	.word	0x20000c9c
 8004354:	20000cb0 	.word	0x20000cb0
 8004358:	20000cc4 	.word	0x20000cc4
 800435c:	20000cc8 	.word	0x20000cc8
 8004360:	20000d78 	.word	0x20000d78
 8004364:	20000cd8 	.word	0x20000cd8
 8004368:	08004cc0 	.word	0x08004cc0

0800436c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	3b04      	subs	r3, #4
 800437c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004384:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	3b04      	subs	r3, #4
 800438a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	f023 0201 	bic.w	r2, r3, #1
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	3b04      	subs	r3, #4
 800439a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800439c:	4a08      	ldr	r2, [pc, #32]	; (80043c0 <pxPortInitialiseStack+0x54>)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	3b14      	subs	r3, #20
 80043a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	3b20      	subs	r3, #32
 80043b2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80043b4:	68fb      	ldr	r3, [r7, #12]
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3714      	adds	r7, #20
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bc80      	pop	{r7}
 80043be:	4770      	bx	lr
 80043c0:	080043c5 	.word	0x080043c5

080043c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80043c4:	b480      	push	{r7}
 80043c6:	b085      	sub	sp, #20
 80043c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80043ca:	2300      	movs	r3, #0
 80043cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80043ce:	4b12      	ldr	r3, [pc, #72]	; (8004418 <prvTaskExitError+0x54>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d6:	d00a      	beq.n	80043ee <prvTaskExitError+0x2a>
	__asm volatile
 80043d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043dc:	f383 8811 	msr	BASEPRI, r3
 80043e0:	f3bf 8f6f 	isb	sy
 80043e4:	f3bf 8f4f 	dsb	sy
 80043e8:	60fb      	str	r3, [r7, #12]
}
 80043ea:	bf00      	nop
 80043ec:	e7fe      	b.n	80043ec <prvTaskExitError+0x28>
	__asm volatile
 80043ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f2:	f383 8811 	msr	BASEPRI, r3
 80043f6:	f3bf 8f6f 	isb	sy
 80043fa:	f3bf 8f4f 	dsb	sy
 80043fe:	60bb      	str	r3, [r7, #8]
}
 8004400:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004402:	bf00      	nop
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d0fc      	beq.n	8004404 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800440a:	bf00      	nop
 800440c:	bf00      	nop
 800440e:	3714      	adds	r7, #20
 8004410:	46bd      	mov	sp, r7
 8004412:	bc80      	pop	{r7}
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	2000001c 	.word	0x2000001c
 800441c:	00000000 	.word	0x00000000

08004420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004420:	4b07      	ldr	r3, [pc, #28]	; (8004440 <pxCurrentTCBConst2>)
 8004422:	6819      	ldr	r1, [r3, #0]
 8004424:	6808      	ldr	r0, [r1, #0]
 8004426:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800442a:	f380 8809 	msr	PSP, r0
 800442e:	f3bf 8f6f 	isb	sy
 8004432:	f04f 0000 	mov.w	r0, #0
 8004436:	f380 8811 	msr	BASEPRI, r0
 800443a:	f04e 0e0d 	orr.w	lr, lr, #13
 800443e:	4770      	bx	lr

08004440 <pxCurrentTCBConst2>:
 8004440:	2000079c 	.word	0x2000079c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004444:	bf00      	nop
 8004446:	bf00      	nop

08004448 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004448:	4806      	ldr	r0, [pc, #24]	; (8004464 <prvPortStartFirstTask+0x1c>)
 800444a:	6800      	ldr	r0, [r0, #0]
 800444c:	6800      	ldr	r0, [r0, #0]
 800444e:	f380 8808 	msr	MSP, r0
 8004452:	b662      	cpsie	i
 8004454:	b661      	cpsie	f
 8004456:	f3bf 8f4f 	dsb	sy
 800445a:	f3bf 8f6f 	isb	sy
 800445e:	df00      	svc	0
 8004460:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004462:	bf00      	nop
 8004464:	e000ed08 	.word	0xe000ed08

08004468 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800446e:	4b32      	ldr	r3, [pc, #200]	; (8004538 <xPortStartScheduler+0xd0>)
 8004470:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	b2db      	uxtb	r3, r3
 8004478:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	22ff      	movs	r2, #255	; 0xff
 800447e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	b2db      	uxtb	r3, r3
 8004486:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004488:	78fb      	ldrb	r3, [r7, #3]
 800448a:	b2db      	uxtb	r3, r3
 800448c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004490:	b2da      	uxtb	r2, r3
 8004492:	4b2a      	ldr	r3, [pc, #168]	; (800453c <xPortStartScheduler+0xd4>)
 8004494:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004496:	4b2a      	ldr	r3, [pc, #168]	; (8004540 <xPortStartScheduler+0xd8>)
 8004498:	2207      	movs	r2, #7
 800449a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800449c:	e009      	b.n	80044b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800449e:	4b28      	ldr	r3, [pc, #160]	; (8004540 <xPortStartScheduler+0xd8>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	3b01      	subs	r3, #1
 80044a4:	4a26      	ldr	r2, [pc, #152]	; (8004540 <xPortStartScheduler+0xd8>)
 80044a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80044a8:	78fb      	ldrb	r3, [r7, #3]
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044b2:	78fb      	ldrb	r3, [r7, #3]
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ba:	2b80      	cmp	r3, #128	; 0x80
 80044bc:	d0ef      	beq.n	800449e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80044be:	4b20      	ldr	r3, [pc, #128]	; (8004540 <xPortStartScheduler+0xd8>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f1c3 0307 	rsb	r3, r3, #7
 80044c6:	2b04      	cmp	r3, #4
 80044c8:	d00a      	beq.n	80044e0 <xPortStartScheduler+0x78>
	__asm volatile
 80044ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ce:	f383 8811 	msr	BASEPRI, r3
 80044d2:	f3bf 8f6f 	isb	sy
 80044d6:	f3bf 8f4f 	dsb	sy
 80044da:	60bb      	str	r3, [r7, #8]
}
 80044dc:	bf00      	nop
 80044de:	e7fe      	b.n	80044de <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80044e0:	4b17      	ldr	r3, [pc, #92]	; (8004540 <xPortStartScheduler+0xd8>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	021b      	lsls	r3, r3, #8
 80044e6:	4a16      	ldr	r2, [pc, #88]	; (8004540 <xPortStartScheduler+0xd8>)
 80044e8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80044ea:	4b15      	ldr	r3, [pc, #84]	; (8004540 <xPortStartScheduler+0xd8>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80044f2:	4a13      	ldr	r2, [pc, #76]	; (8004540 <xPortStartScheduler+0xd8>)
 80044f4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	b2da      	uxtb	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80044fe:	4b11      	ldr	r3, [pc, #68]	; (8004544 <xPortStartScheduler+0xdc>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a10      	ldr	r2, [pc, #64]	; (8004544 <xPortStartScheduler+0xdc>)
 8004504:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004508:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800450a:	4b0e      	ldr	r3, [pc, #56]	; (8004544 <xPortStartScheduler+0xdc>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a0d      	ldr	r2, [pc, #52]	; (8004544 <xPortStartScheduler+0xdc>)
 8004510:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004514:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004516:	f000 f8b9 	bl	800468c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800451a:	4b0b      	ldr	r3, [pc, #44]	; (8004548 <xPortStartScheduler+0xe0>)
 800451c:	2200      	movs	r2, #0
 800451e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004520:	f7ff ff92 	bl	8004448 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004524:	f7ff f8c2 	bl	80036ac <vTaskSwitchContext>
	prvTaskExitError();
 8004528:	f7ff ff4c 	bl	80043c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	e000e400 	.word	0xe000e400
 800453c:	20000dc8 	.word	0x20000dc8
 8004540:	20000dcc 	.word	0x20000dcc
 8004544:	e000ed20 	.word	0xe000ed20
 8004548:	2000001c 	.word	0x2000001c

0800454c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
	__asm volatile
 8004552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004556:	f383 8811 	msr	BASEPRI, r3
 800455a:	f3bf 8f6f 	isb	sy
 800455e:	f3bf 8f4f 	dsb	sy
 8004562:	607b      	str	r3, [r7, #4]
}
 8004564:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004566:	4b0f      	ldr	r3, [pc, #60]	; (80045a4 <vPortEnterCritical+0x58>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	3301      	adds	r3, #1
 800456c:	4a0d      	ldr	r2, [pc, #52]	; (80045a4 <vPortEnterCritical+0x58>)
 800456e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004570:	4b0c      	ldr	r3, [pc, #48]	; (80045a4 <vPortEnterCritical+0x58>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d10f      	bne.n	8004598 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004578:	4b0b      	ldr	r3, [pc, #44]	; (80045a8 <vPortEnterCritical+0x5c>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00a      	beq.n	8004598 <vPortEnterCritical+0x4c>
	__asm volatile
 8004582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004586:	f383 8811 	msr	BASEPRI, r3
 800458a:	f3bf 8f6f 	isb	sy
 800458e:	f3bf 8f4f 	dsb	sy
 8004592:	603b      	str	r3, [r7, #0]
}
 8004594:	bf00      	nop
 8004596:	e7fe      	b.n	8004596 <vPortEnterCritical+0x4a>
	}
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	bc80      	pop	{r7}
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	2000001c 	.word	0x2000001c
 80045a8:	e000ed04 	.word	0xe000ed04

080045ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80045b2:	4b11      	ldr	r3, [pc, #68]	; (80045f8 <vPortExitCritical+0x4c>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10a      	bne.n	80045d0 <vPortExitCritical+0x24>
	__asm volatile
 80045ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045be:	f383 8811 	msr	BASEPRI, r3
 80045c2:	f3bf 8f6f 	isb	sy
 80045c6:	f3bf 8f4f 	dsb	sy
 80045ca:	607b      	str	r3, [r7, #4]
}
 80045cc:	bf00      	nop
 80045ce:	e7fe      	b.n	80045ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80045d0:	4b09      	ldr	r3, [pc, #36]	; (80045f8 <vPortExitCritical+0x4c>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	3b01      	subs	r3, #1
 80045d6:	4a08      	ldr	r2, [pc, #32]	; (80045f8 <vPortExitCritical+0x4c>)
 80045d8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80045da:	4b07      	ldr	r3, [pc, #28]	; (80045f8 <vPortExitCritical+0x4c>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d105      	bne.n	80045ee <vPortExitCritical+0x42>
 80045e2:	2300      	movs	r3, #0
 80045e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	f383 8811 	msr	BASEPRI, r3
}
 80045ec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80045ee:	bf00      	nop
 80045f0:	370c      	adds	r7, #12
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bc80      	pop	{r7}
 80045f6:	4770      	bx	lr
 80045f8:	2000001c 	.word	0x2000001c
 80045fc:	00000000 	.word	0x00000000

08004600 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004600:	f3ef 8009 	mrs	r0, PSP
 8004604:	f3bf 8f6f 	isb	sy
 8004608:	4b0d      	ldr	r3, [pc, #52]	; (8004640 <pxCurrentTCBConst>)
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004610:	6010      	str	r0, [r2, #0]
 8004612:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004616:	f04f 0050 	mov.w	r0, #80	; 0x50
 800461a:	f380 8811 	msr	BASEPRI, r0
 800461e:	f7ff f845 	bl	80036ac <vTaskSwitchContext>
 8004622:	f04f 0000 	mov.w	r0, #0
 8004626:	f380 8811 	msr	BASEPRI, r0
 800462a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800462e:	6819      	ldr	r1, [r3, #0]
 8004630:	6808      	ldr	r0, [r1, #0]
 8004632:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004636:	f380 8809 	msr	PSP, r0
 800463a:	f3bf 8f6f 	isb	sy
 800463e:	4770      	bx	lr

08004640 <pxCurrentTCBConst>:
 8004640:	2000079c 	.word	0x2000079c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004644:	bf00      	nop
 8004646:	bf00      	nop

08004648 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
	__asm volatile
 800464e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004652:	f383 8811 	msr	BASEPRI, r3
 8004656:	f3bf 8f6f 	isb	sy
 800465a:	f3bf 8f4f 	dsb	sy
 800465e:	607b      	str	r3, [r7, #4]
}
 8004660:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004662:	f7fe ff65 	bl	8003530 <xTaskIncrementTick>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d003      	beq.n	8004674 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800466c:	4b06      	ldr	r3, [pc, #24]	; (8004688 <xPortSysTickHandler+0x40>)
 800466e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004672:	601a      	str	r2, [r3, #0]
 8004674:	2300      	movs	r3, #0
 8004676:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	f383 8811 	msr	BASEPRI, r3
}
 800467e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004680:	bf00      	nop
 8004682:	3708      	adds	r7, #8
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	e000ed04 	.word	0xe000ed04

0800468c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800468c:	b480      	push	{r7}
 800468e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004690:	4b0a      	ldr	r3, [pc, #40]	; (80046bc <vPortSetupTimerInterrupt+0x30>)
 8004692:	2200      	movs	r2, #0
 8004694:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004696:	4b0a      	ldr	r3, [pc, #40]	; (80046c0 <vPortSetupTimerInterrupt+0x34>)
 8004698:	2200      	movs	r2, #0
 800469a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800469c:	4b09      	ldr	r3, [pc, #36]	; (80046c4 <vPortSetupTimerInterrupt+0x38>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a09      	ldr	r2, [pc, #36]	; (80046c8 <vPortSetupTimerInterrupt+0x3c>)
 80046a2:	fba2 2303 	umull	r2, r3, r2, r3
 80046a6:	099b      	lsrs	r3, r3, #6
 80046a8:	4a08      	ldr	r2, [pc, #32]	; (80046cc <vPortSetupTimerInterrupt+0x40>)
 80046aa:	3b01      	subs	r3, #1
 80046ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80046ae:	4b03      	ldr	r3, [pc, #12]	; (80046bc <vPortSetupTimerInterrupt+0x30>)
 80046b0:	2207      	movs	r2, #7
 80046b2:	601a      	str	r2, [r3, #0]
}
 80046b4:	bf00      	nop
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bc80      	pop	{r7}
 80046ba:	4770      	bx	lr
 80046bc:	e000e010 	.word	0xe000e010
 80046c0:	e000e018 	.word	0xe000e018
 80046c4:	20000010 	.word	0x20000010
 80046c8:	10624dd3 	.word	0x10624dd3
 80046cc:	e000e014 	.word	0xe000e014

080046d0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80046d6:	f3ef 8305 	mrs	r3, IPSR
 80046da:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2b0f      	cmp	r3, #15
 80046e0:	d914      	bls.n	800470c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80046e2:	4a16      	ldr	r2, [pc, #88]	; (800473c <vPortValidateInterruptPriority+0x6c>)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	4413      	add	r3, r2
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80046ec:	4b14      	ldr	r3, [pc, #80]	; (8004740 <vPortValidateInterruptPriority+0x70>)
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	7afa      	ldrb	r2, [r7, #11]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d20a      	bcs.n	800470c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80046f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fa:	f383 8811 	msr	BASEPRI, r3
 80046fe:	f3bf 8f6f 	isb	sy
 8004702:	f3bf 8f4f 	dsb	sy
 8004706:	607b      	str	r3, [r7, #4]
}
 8004708:	bf00      	nop
 800470a:	e7fe      	b.n	800470a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800470c:	4b0d      	ldr	r3, [pc, #52]	; (8004744 <vPortValidateInterruptPriority+0x74>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004714:	4b0c      	ldr	r3, [pc, #48]	; (8004748 <vPortValidateInterruptPriority+0x78>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	429a      	cmp	r2, r3
 800471a:	d90a      	bls.n	8004732 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800471c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004720:	f383 8811 	msr	BASEPRI, r3
 8004724:	f3bf 8f6f 	isb	sy
 8004728:	f3bf 8f4f 	dsb	sy
 800472c:	603b      	str	r3, [r7, #0]
}
 800472e:	bf00      	nop
 8004730:	e7fe      	b.n	8004730 <vPortValidateInterruptPriority+0x60>
	}
 8004732:	bf00      	nop
 8004734:	3714      	adds	r7, #20
 8004736:	46bd      	mov	sp, r7
 8004738:	bc80      	pop	{r7}
 800473a:	4770      	bx	lr
 800473c:	e000e3f0 	.word	0xe000e3f0
 8004740:	20000dc8 	.word	0x20000dc8
 8004744:	e000ed0c 	.word	0xe000ed0c
 8004748:	20000dcc 	.word	0x20000dcc

0800474c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b08a      	sub	sp, #40	; 0x28
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004754:	2300      	movs	r3, #0
 8004756:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004758:	f7fe fe30 	bl	80033bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800475c:	4b58      	ldr	r3, [pc, #352]	; (80048c0 <pvPortMalloc+0x174>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d101      	bne.n	8004768 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004764:	f000 f910 	bl	8004988 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004768:	4b56      	ldr	r3, [pc, #344]	; (80048c4 <pvPortMalloc+0x178>)
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4013      	ands	r3, r2
 8004770:	2b00      	cmp	r3, #0
 8004772:	f040 808e 	bne.w	8004892 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d01d      	beq.n	80047b8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800477c:	2208      	movs	r2, #8
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4413      	add	r3, r2
 8004782:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f003 0307 	and.w	r3, r3, #7
 800478a:	2b00      	cmp	r3, #0
 800478c:	d014      	beq.n	80047b8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f023 0307 	bic.w	r3, r3, #7
 8004794:	3308      	adds	r3, #8
 8004796:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f003 0307 	and.w	r3, r3, #7
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00a      	beq.n	80047b8 <pvPortMalloc+0x6c>
	__asm volatile
 80047a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a6:	f383 8811 	msr	BASEPRI, r3
 80047aa:	f3bf 8f6f 	isb	sy
 80047ae:	f3bf 8f4f 	dsb	sy
 80047b2:	617b      	str	r3, [r7, #20]
}
 80047b4:	bf00      	nop
 80047b6:	e7fe      	b.n	80047b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d069      	beq.n	8004892 <pvPortMalloc+0x146>
 80047be:	4b42      	ldr	r3, [pc, #264]	; (80048c8 <pvPortMalloc+0x17c>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d864      	bhi.n	8004892 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80047c8:	4b40      	ldr	r3, [pc, #256]	; (80048cc <pvPortMalloc+0x180>)
 80047ca:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80047cc:	4b3f      	ldr	r3, [pc, #252]	; (80048cc <pvPortMalloc+0x180>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047d2:	e004      	b.n	80047de <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80047d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d903      	bls.n	80047f0 <pvPortMalloc+0xa4>
 80047e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d1f1      	bne.n	80047d4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80047f0:	4b33      	ldr	r3, [pc, #204]	; (80048c0 <pvPortMalloc+0x174>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d04b      	beq.n	8004892 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80047fa:	6a3b      	ldr	r3, [r7, #32]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2208      	movs	r2, #8
 8004800:	4413      	add	r3, r2
 8004802:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	6a3b      	ldr	r3, [r7, #32]
 800480a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800480c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	1ad2      	subs	r2, r2, r3
 8004814:	2308      	movs	r3, #8
 8004816:	005b      	lsls	r3, r3, #1
 8004818:	429a      	cmp	r2, r3
 800481a:	d91f      	bls.n	800485c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800481c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4413      	add	r3, r2
 8004822:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	f003 0307 	and.w	r3, r3, #7
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00a      	beq.n	8004844 <pvPortMalloc+0xf8>
	__asm volatile
 800482e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004832:	f383 8811 	msr	BASEPRI, r3
 8004836:	f3bf 8f6f 	isb	sy
 800483a:	f3bf 8f4f 	dsb	sy
 800483e:	613b      	str	r3, [r7, #16]
}
 8004840:	bf00      	nop
 8004842:	e7fe      	b.n	8004842 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	1ad2      	subs	r2, r2, r3
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004856:	69b8      	ldr	r0, [r7, #24]
 8004858:	f000 f8f8 	bl	8004a4c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800485c:	4b1a      	ldr	r3, [pc, #104]	; (80048c8 <pvPortMalloc+0x17c>)
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	4a18      	ldr	r2, [pc, #96]	; (80048c8 <pvPortMalloc+0x17c>)
 8004868:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800486a:	4b17      	ldr	r3, [pc, #92]	; (80048c8 <pvPortMalloc+0x17c>)
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	4b18      	ldr	r3, [pc, #96]	; (80048d0 <pvPortMalloc+0x184>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	429a      	cmp	r2, r3
 8004874:	d203      	bcs.n	800487e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004876:	4b14      	ldr	r3, [pc, #80]	; (80048c8 <pvPortMalloc+0x17c>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a15      	ldr	r2, [pc, #84]	; (80048d0 <pvPortMalloc+0x184>)
 800487c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800487e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004880:	685a      	ldr	r2, [r3, #4]
 8004882:	4b10      	ldr	r3, [pc, #64]	; (80048c4 <pvPortMalloc+0x178>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	431a      	orrs	r2, r3
 8004888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800488c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488e:	2200      	movs	r2, #0
 8004890:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004892:	f7fe fda1 	bl	80033d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	f003 0307 	and.w	r3, r3, #7
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00a      	beq.n	80048b6 <pvPortMalloc+0x16a>
	__asm volatile
 80048a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a4:	f383 8811 	msr	BASEPRI, r3
 80048a8:	f3bf 8f6f 	isb	sy
 80048ac:	f3bf 8f4f 	dsb	sy
 80048b0:	60fb      	str	r3, [r7, #12]
}
 80048b2:	bf00      	nop
 80048b4:	e7fe      	b.n	80048b4 <pvPortMalloc+0x168>
	return pvReturn;
 80048b6:	69fb      	ldr	r3, [r7, #28]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3728      	adds	r7, #40	; 0x28
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	200019d8 	.word	0x200019d8
 80048c4:	200019e4 	.word	0x200019e4
 80048c8:	200019dc 	.word	0x200019dc
 80048cc:	200019d0 	.word	0x200019d0
 80048d0:	200019e0 	.word	0x200019e0

080048d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b086      	sub	sp, #24
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d048      	beq.n	8004978 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80048e6:	2308      	movs	r3, #8
 80048e8:	425b      	negs	r3, r3
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	4413      	add	r3, r2
 80048ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	685a      	ldr	r2, [r3, #4]
 80048f8:	4b21      	ldr	r3, [pc, #132]	; (8004980 <vPortFree+0xac>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4013      	ands	r3, r2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d10a      	bne.n	8004918 <vPortFree+0x44>
	__asm volatile
 8004902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004906:	f383 8811 	msr	BASEPRI, r3
 800490a:	f3bf 8f6f 	isb	sy
 800490e:	f3bf 8f4f 	dsb	sy
 8004912:	60fb      	str	r3, [r7, #12]
}
 8004914:	bf00      	nop
 8004916:	e7fe      	b.n	8004916 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00a      	beq.n	8004936 <vPortFree+0x62>
	__asm volatile
 8004920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004924:	f383 8811 	msr	BASEPRI, r3
 8004928:	f3bf 8f6f 	isb	sy
 800492c:	f3bf 8f4f 	dsb	sy
 8004930:	60bb      	str	r3, [r7, #8]
}
 8004932:	bf00      	nop
 8004934:	e7fe      	b.n	8004934 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	685a      	ldr	r2, [r3, #4]
 800493a:	4b11      	ldr	r3, [pc, #68]	; (8004980 <vPortFree+0xac>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4013      	ands	r3, r2
 8004940:	2b00      	cmp	r3, #0
 8004942:	d019      	beq.n	8004978 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d115      	bne.n	8004978 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	685a      	ldr	r2, [r3, #4]
 8004950:	4b0b      	ldr	r3, [pc, #44]	; (8004980 <vPortFree+0xac>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	43db      	mvns	r3, r3
 8004956:	401a      	ands	r2, r3
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800495c:	f7fe fd2e 	bl	80033bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	685a      	ldr	r2, [r3, #4]
 8004964:	4b07      	ldr	r3, [pc, #28]	; (8004984 <vPortFree+0xb0>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4413      	add	r3, r2
 800496a:	4a06      	ldr	r2, [pc, #24]	; (8004984 <vPortFree+0xb0>)
 800496c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800496e:	6938      	ldr	r0, [r7, #16]
 8004970:	f000 f86c 	bl	8004a4c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004974:	f7fe fd30 	bl	80033d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004978:	bf00      	nop
 800497a:	3718      	adds	r7, #24
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	200019e4 	.word	0x200019e4
 8004984:	200019dc 	.word	0x200019dc

08004988 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800498e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004992:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004994:	4b27      	ldr	r3, [pc, #156]	; (8004a34 <prvHeapInit+0xac>)
 8004996:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f003 0307 	and.w	r3, r3, #7
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00c      	beq.n	80049bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	3307      	adds	r3, #7
 80049a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f023 0307 	bic.w	r3, r3, #7
 80049ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80049b0:	68ba      	ldr	r2, [r7, #8]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	4a1f      	ldr	r2, [pc, #124]	; (8004a34 <prvHeapInit+0xac>)
 80049b8:	4413      	add	r3, r2
 80049ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80049c0:	4a1d      	ldr	r2, [pc, #116]	; (8004a38 <prvHeapInit+0xb0>)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80049c6:	4b1c      	ldr	r3, [pc, #112]	; (8004a38 <prvHeapInit+0xb0>)
 80049c8:	2200      	movs	r2, #0
 80049ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	68ba      	ldr	r2, [r7, #8]
 80049d0:	4413      	add	r3, r2
 80049d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80049d4:	2208      	movs	r2, #8
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	1a9b      	subs	r3, r3, r2
 80049da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f023 0307 	bic.w	r3, r3, #7
 80049e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	4a15      	ldr	r2, [pc, #84]	; (8004a3c <prvHeapInit+0xb4>)
 80049e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80049ea:	4b14      	ldr	r3, [pc, #80]	; (8004a3c <prvHeapInit+0xb4>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2200      	movs	r2, #0
 80049f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80049f2:	4b12      	ldr	r3, [pc, #72]	; (8004a3c <prvHeapInit+0xb4>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2200      	movs	r2, #0
 80049f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	1ad2      	subs	r2, r2, r3
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004a08:	4b0c      	ldr	r3, [pc, #48]	; (8004a3c <prvHeapInit+0xb4>)
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	4a0a      	ldr	r2, [pc, #40]	; (8004a40 <prvHeapInit+0xb8>)
 8004a16:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	4a09      	ldr	r2, [pc, #36]	; (8004a44 <prvHeapInit+0xbc>)
 8004a1e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004a20:	4b09      	ldr	r3, [pc, #36]	; (8004a48 <prvHeapInit+0xc0>)
 8004a22:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004a26:	601a      	str	r2, [r3, #0]
}
 8004a28:	bf00      	nop
 8004a2a:	3714      	adds	r7, #20
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bc80      	pop	{r7}
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	20000dd0 	.word	0x20000dd0
 8004a38:	200019d0 	.word	0x200019d0
 8004a3c:	200019d8 	.word	0x200019d8
 8004a40:	200019e0 	.word	0x200019e0
 8004a44:	200019dc 	.word	0x200019dc
 8004a48:	200019e4 	.word	0x200019e4

08004a4c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004a54:	4b27      	ldr	r3, [pc, #156]	; (8004af4 <prvInsertBlockIntoFreeList+0xa8>)
 8004a56:	60fb      	str	r3, [r7, #12]
 8004a58:	e002      	b.n	8004a60 <prvInsertBlockIntoFreeList+0x14>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	60fb      	str	r3, [r7, #12]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d8f7      	bhi.n	8004a5a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	4413      	add	r3, r2
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d108      	bne.n	8004a8e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	685a      	ldr	r2, [r3, #4]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	441a      	add	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	441a      	add	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d118      	bne.n	8004ad4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	4b14      	ldr	r3, [pc, #80]	; (8004af8 <prvInsertBlockIntoFreeList+0xac>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d00d      	beq.n	8004aca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685a      	ldr	r2, [r3, #4]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	441a      	add	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	601a      	str	r2, [r3, #0]
 8004ac8:	e008      	b.n	8004adc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004aca:	4b0b      	ldr	r3, [pc, #44]	; (8004af8 <prvInsertBlockIntoFreeList+0xac>)
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	601a      	str	r2, [r3, #0]
 8004ad2:	e003      	b.n	8004adc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d002      	beq.n	8004aea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004aea:	bf00      	nop
 8004aec:	3714      	adds	r7, #20
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bc80      	pop	{r7}
 8004af2:	4770      	bx	lr
 8004af4:	200019d0 	.word	0x200019d0
 8004af8:	200019d8 	.word	0x200019d8

08004afc <__libc_init_array>:
 8004afc:	b570      	push	{r4, r5, r6, lr}
 8004afe:	2600      	movs	r6, #0
 8004b00:	4d0c      	ldr	r5, [pc, #48]	; (8004b34 <__libc_init_array+0x38>)
 8004b02:	4c0d      	ldr	r4, [pc, #52]	; (8004b38 <__libc_init_array+0x3c>)
 8004b04:	1b64      	subs	r4, r4, r5
 8004b06:	10a4      	asrs	r4, r4, #2
 8004b08:	42a6      	cmp	r6, r4
 8004b0a:	d109      	bne.n	8004b20 <__libc_init_array+0x24>
 8004b0c:	f000 f88c 	bl	8004c28 <_init>
 8004b10:	2600      	movs	r6, #0
 8004b12:	4d0a      	ldr	r5, [pc, #40]	; (8004b3c <__libc_init_array+0x40>)
 8004b14:	4c0a      	ldr	r4, [pc, #40]	; (8004b40 <__libc_init_array+0x44>)
 8004b16:	1b64      	subs	r4, r4, r5
 8004b18:	10a4      	asrs	r4, r4, #2
 8004b1a:	42a6      	cmp	r6, r4
 8004b1c:	d105      	bne.n	8004b2a <__libc_init_array+0x2e>
 8004b1e:	bd70      	pop	{r4, r5, r6, pc}
 8004b20:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b24:	4798      	blx	r3
 8004b26:	3601      	adds	r6, #1
 8004b28:	e7ee      	b.n	8004b08 <__libc_init_array+0xc>
 8004b2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b2e:	4798      	blx	r3
 8004b30:	3601      	adds	r6, #1
 8004b32:	e7f2      	b.n	8004b1a <__libc_init_array+0x1e>
 8004b34:	08004d2c 	.word	0x08004d2c
 8004b38:	08004d2c 	.word	0x08004d2c
 8004b3c:	08004d2c 	.word	0x08004d2c
 8004b40:	08004d30 	.word	0x08004d30

08004b44 <__itoa>:
 8004b44:	1e93      	subs	r3, r2, #2
 8004b46:	2b22      	cmp	r3, #34	; 0x22
 8004b48:	b510      	push	{r4, lr}
 8004b4a:	460c      	mov	r4, r1
 8004b4c:	d904      	bls.n	8004b58 <__itoa+0x14>
 8004b4e:	2300      	movs	r3, #0
 8004b50:	461c      	mov	r4, r3
 8004b52:	700b      	strb	r3, [r1, #0]
 8004b54:	4620      	mov	r0, r4
 8004b56:	bd10      	pop	{r4, pc}
 8004b58:	2a0a      	cmp	r2, #10
 8004b5a:	d109      	bne.n	8004b70 <__itoa+0x2c>
 8004b5c:	2800      	cmp	r0, #0
 8004b5e:	da07      	bge.n	8004b70 <__itoa+0x2c>
 8004b60:	232d      	movs	r3, #45	; 0x2d
 8004b62:	700b      	strb	r3, [r1, #0]
 8004b64:	2101      	movs	r1, #1
 8004b66:	4240      	negs	r0, r0
 8004b68:	4421      	add	r1, r4
 8004b6a:	f000 f81b 	bl	8004ba4 <__utoa>
 8004b6e:	e7f1      	b.n	8004b54 <__itoa+0x10>
 8004b70:	2100      	movs	r1, #0
 8004b72:	e7f9      	b.n	8004b68 <__itoa+0x24>

08004b74 <itoa>:
 8004b74:	f7ff bfe6 	b.w	8004b44 <__itoa>

08004b78 <memcpy>:
 8004b78:	440a      	add	r2, r1
 8004b7a:	4291      	cmp	r1, r2
 8004b7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b80:	d100      	bne.n	8004b84 <memcpy+0xc>
 8004b82:	4770      	bx	lr
 8004b84:	b510      	push	{r4, lr}
 8004b86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b8a:	4291      	cmp	r1, r2
 8004b8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b90:	d1f9      	bne.n	8004b86 <memcpy+0xe>
 8004b92:	bd10      	pop	{r4, pc}

08004b94 <memset>:
 8004b94:	4603      	mov	r3, r0
 8004b96:	4402      	add	r2, r0
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d100      	bne.n	8004b9e <memset+0xa>
 8004b9c:	4770      	bx	lr
 8004b9e:	f803 1b01 	strb.w	r1, [r3], #1
 8004ba2:	e7f9      	b.n	8004b98 <memset+0x4>

08004ba4 <__utoa>:
 8004ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ba6:	b08b      	sub	sp, #44	; 0x2c
 8004ba8:	4605      	mov	r5, r0
 8004baa:	460b      	mov	r3, r1
 8004bac:	466e      	mov	r6, sp
 8004bae:	4c1d      	ldr	r4, [pc, #116]	; (8004c24 <__utoa+0x80>)
 8004bb0:	f104 0c20 	add.w	ip, r4, #32
 8004bb4:	4637      	mov	r7, r6
 8004bb6:	6820      	ldr	r0, [r4, #0]
 8004bb8:	6861      	ldr	r1, [r4, #4]
 8004bba:	3408      	adds	r4, #8
 8004bbc:	c703      	stmia	r7!, {r0, r1}
 8004bbe:	4564      	cmp	r4, ip
 8004bc0:	463e      	mov	r6, r7
 8004bc2:	d1f7      	bne.n	8004bb4 <__utoa+0x10>
 8004bc4:	7921      	ldrb	r1, [r4, #4]
 8004bc6:	6820      	ldr	r0, [r4, #0]
 8004bc8:	7139      	strb	r1, [r7, #4]
 8004bca:	1e91      	subs	r1, r2, #2
 8004bcc:	2922      	cmp	r1, #34	; 0x22
 8004bce:	6038      	str	r0, [r7, #0]
 8004bd0:	f04f 0100 	mov.w	r1, #0
 8004bd4:	d904      	bls.n	8004be0 <__utoa+0x3c>
 8004bd6:	7019      	strb	r1, [r3, #0]
 8004bd8:	460b      	mov	r3, r1
 8004bda:	4618      	mov	r0, r3
 8004bdc:	b00b      	add	sp, #44	; 0x2c
 8004bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004be0:	1e58      	subs	r0, r3, #1
 8004be2:	4684      	mov	ip, r0
 8004be4:	fbb5 f7f2 	udiv	r7, r5, r2
 8004be8:	fb02 5617 	mls	r6, r2, r7, r5
 8004bec:	3628      	adds	r6, #40	; 0x28
 8004bee:	446e      	add	r6, sp
 8004bf0:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8004bf4:	460c      	mov	r4, r1
 8004bf6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8004bfa:	462e      	mov	r6, r5
 8004bfc:	42b2      	cmp	r2, r6
 8004bfe:	463d      	mov	r5, r7
 8004c00:	f101 0101 	add.w	r1, r1, #1
 8004c04:	d9ee      	bls.n	8004be4 <__utoa+0x40>
 8004c06:	2200      	movs	r2, #0
 8004c08:	545a      	strb	r2, [r3, r1]
 8004c0a:	1919      	adds	r1, r3, r4
 8004c0c:	1aa5      	subs	r5, r4, r2
 8004c0e:	42aa      	cmp	r2, r5
 8004c10:	dae3      	bge.n	8004bda <__utoa+0x36>
 8004c12:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8004c16:	780e      	ldrb	r6, [r1, #0]
 8004c18:	3201      	adds	r2, #1
 8004c1a:	7006      	strb	r6, [r0, #0]
 8004c1c:	f801 5901 	strb.w	r5, [r1], #-1
 8004c20:	e7f4      	b.n	8004c0c <__utoa+0x68>
 8004c22:	bf00      	nop
 8004c24:	08004d04 	.word	0x08004d04

08004c28 <_init>:
 8004c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c2a:	bf00      	nop
 8004c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c2e:	bc08      	pop	{r3}
 8004c30:	469e      	mov	lr, r3
 8004c32:	4770      	bx	lr

08004c34 <_fini>:
 8004c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c36:	bf00      	nop
 8004c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c3a:	bc08      	pop	{r3}
 8004c3c:	469e      	mov	lr, r3
 8004c3e:	4770      	bx	lr
